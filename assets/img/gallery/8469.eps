%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: DPR162.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 8/9/2020
%%BoundingBox: 0 0 3500 2000
%%HiResBoundingBox: 0 0 3500 2000
%%CropBox: 0 0 3500 2000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159547, 2016/07/07-11:39:24        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
   xmp:ModifyDate="2020-08-09T19:56:30+03:00"
   xmp:CreateDate="2020-08-09T19:56:29+03:00"
   xmp:MetadataDate="2020-08-17T22:32:07+07:00"
   xmp:CreatorTool="Adobe Illustrator CS6 (Windows)"
   xmpMM:DocumentID="xmp.did:AB69F4BC5CDAEA118B17BFE6AA659F47"
   xmpMM:InstanceID="xmp.iid:e33dedf6-8501-ee42-a8bd-4a573064e07f"
   xmpMM:OriginalDocumentID="uuid:212d0abb-00c7-45b5-9983-5cc70dfcad65"
   xmpMM:RenditionClass="proof:pdf"
   dc:format="application/postscript"
   pdf:Producer="Adobe PDF Library 15.0"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="148"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEAtAC0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAtAAAAAEA&#xA;AQC0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxbzZ+ZnlLylq&#xA;FtZ+YLiSyW6QPFdejJLDUlgFZog5VvhPUU+40VRejefvJOtFV0vXbG7kbpCk8fq79P3ZIf8ADFU+&#xA;xV2KuxV2KuxVj2s/mJ5F0UN+k9esbd16wmdGl/5FIWc/diql5Q/Mbyr5wmu08vXEl5FZBfWuTFJF&#xA;HyatFX1QjE7fy0xVk2Ksf83eY7/RG0n6raxXQ1K9WxczSNCsbSxu0bF1SUgFk4/ZO5GKqx13VYDS&#xA;90O6oPtT2jw3MX0DnHOf+ROKuHnLy0CBc3osGOyrqEcliWP+SLpYS30YqnKOkiLJGwdHAZHU1BB3&#xA;BBGKt4q7FXYqgL/zBoenzCC9v7e3uGHJLeSRRKw6VWOvNvoGKoX/ABNHL/vDp2oXp8Ft2thTxD3h&#xA;tkYfJjiqW6j5q1+01XRrF9KihGsXf1ePncGSZUjRppXaOOP09o0PSU79qVoqyvFXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYqwL84vJJ8zeWGktoBPqWnhpIYuAkM0TU9WDgSvLlxDCjBuSgqQ1MVfKj+U9Nm9&#xA;Rltr9Fhr9Ym05U1KNDUg84WNpPbCu3GY8vniqI0TVPN2lsg8o+bZZZk/u9KjkuIZjQ/Z+rzL6Ejf&#xA;5CM5Phir6L/If83Lvzzp13Y6wiJrumBGlkjHBZ4XqBJw/ZZWFHA23FOtAq9VxV5D+fX5w6h5MjtN&#xA;E0FVOv6jGZfXZQ/oQ8iissZBDO7Aha7CnQ4q+etavvM+qyMnm3zbKbhjSTSjJcXUyk/sejEPqyN4&#xA;oZFIOxAOKqcPlKxhaKtlfSvMVFr+kVFh6rMfhVLSI3N1cBjt+5YfMYq+svyl8mDyx5VijnhEOo3l&#xA;JrpAoQxrv6UPEFgvpqd1BPxFiWZiWZVmuKoDXtFtta0qfTrhmjWUAxzx09SKVGDxypyDDkjqGFRi&#xA;rCvMf5geafK+kPJq2jepNbB1k1CHk9rIgAWK4BAVYyXPxwyvGAK0kO1VWY+XbzVr/RoLnV7SKzu5&#xA;hya3ik9dAjbr8dFrUe2KoPRzDpWs3eiFRDb3JN7pKgBY+DAC4hQeMctZCPCQU6HFU/xV2KoTVtUt&#xA;tL0+a+uamOICiIKvI7ELHHGv7TyOQqr3JAxVDeXNJbTtNX11T9JXRNzqcq787mX4pPi6lVJ4J4KA&#xA;BsMVYjqH5jeYdP8AN8vl+fRPXZgs9sbQvPJ9U9Qo0zpGrMG6cVIVOpMgPw4qn2i6Zqt9q/8AiLXI&#xA;BZzxRvb6ZpYdZvQjZqtNI6gL60oABCkhBsGNTirJMVQ99p9nf27W93Es0LAgxuAymopup2PXvir5&#xA;7/N78q9c8vW83mDQ2TV9KXib61u7aGe5gq397GqRxxyIvfmKjvUdFXmek/mT5o0d1a3v5rXi4Mkq&#xA;zC0IABPH6jH60G5/aaBvo64q9u8ifn6tzAv+IwGsxx5aqkfoywq5CpJeWoZ+MTMwAniJSv2gmKva&#xA;IZopokmhdZYZVDxyIQysrCoZSNiCMVSPzd510XyvaRy3zPNd3JKWGnW453Nw4FSsaVGwG7MxCr3O&#xA;Kvnrzz+ffmm7uJLa0vEsI2/ubeyfjCenwvqFOcrA7MYfSQdnbFWEadqHmzzNrlvYWNuupX11MEhi&#xA;uYUvkiYVPM3rNLMeAJZix2GKvpz8vfyptfLVkj6lc/pHU3jHr0SJLeKQ7n6vxjSXbZebuWNK7Yqz&#xA;7FXYq7FXnn5jflDpnmicarZJbQa0g2klR0WRhsC01s0VwrAbA8mUfyHFXjev+TvzI0iWl7p/mCaO&#xA;M8kura4i12HYjdIniSSMLTbma4qlPlK/8weXfPlv5k0HTr65mkBh1vTru1+otPzP75o1LyxryYB+&#xA;IfZ+i8Ngq+oZvNkMflo66unag44cl04Wsgu+VK8DGRt/rV4f5VMVfLet3vmPWfPV75n1yxv7fVmI&#xA;TR7Sxs/rxtfT+GNmBeKMtGtStGr6nxEAChVTry95G/MjVuMdnpuuWsDgh5ru7i0S2APTnbQxNK67&#xA;/sn374q9n/Lf8pNJ8os+oSpBPrMwIeaKNuMfL7QSSdpp2J7lnp4Ku+Ks/wAVdirsVQ2p6fb6jpt1&#xA;p9yoe3vIZIJlIqCkilWBHyOKvPfKPnaHyxHF5O82FrG90xEtrC8kjZIr2BOMcckJHNXPxICqmoZu&#xA;NDxYhVPNQ8yeW9VvbnTNQT0dOs40u01p544YvUO8bW0scnqBuBY8hx226HFUFbatrerMtv5U1uTU&#xA;bb1As2rXNrG0EaChcpOiwRztSoQRo2/22HXFU68xjzXbTW91pdyZLBI/TvrcW6TT1BqJ4xyi5+DI&#xA;N/5QT8JVSWLzD5SAm1WTVzrur6ajyxadcPFb3EBUUkEdmywcJeLUBkXnvx5AHFUw1H8zvK2maVHf&#xA;ajP9SmljMiWExHrhgVX02EZkHLk4BAJPU9ASFUN+Xum6lPe6v5u1W2ksr3XjAsNjOnpzQ2tqpWIS&#xA;KSxV35F2Q/Z6b0qVWa4q7FXYqsmhinhkhmQSQyqUkjYVVlYUII8CMVfJ/wCY/wCTXmXy7rU0mkaf&#xA;dXejyOXs7vTkZnjQ1PC4ZFnuOS/zU4tsetaKsV0Hyh+YsWpJNpHl+9N2lOUi2U5ikDVDpNJdhVVX&#xA;UlXH2WU0NRir6Y/KXy1528vW1za6ksUOgTRpcaZpckpkuLGdxWa2Dr6iGAMTwPMmnapOKvLfzI8j&#xA;fm6JLrU5rNtW1PV2ddQvtNAuUt7GNqQ2Ftbvwl4PTnKePxbD+fkq8vt/JXnFmMEWg6mhk+F4Le1v&#xA;Y5JKH/diNHJHWnaoAxV9HfkX+Vl15Xtp9Z1m2jg1e8UR28ACiSGDqfV9MmP1HPXj0HzIxV6zirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdiqHv9N07UbY2uoWsN5bMatBcRrKhI8VcEYqk9r+XvkO1m&#xA;E9v5c02KYHksi2kAZSTX4Tx+H6MVZAAAAAKAbADFXYql+qeXPL2r0/Sul2mocRRfrUEc1BWtB6it&#xA;3GKobSfJnlDR5hPpWi2NjcLUieC3ijk3BH21UN0Yjr3xVOcVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdiqEuNX0m2uY7W5vYIbmYhYYJJUSR2PQKpIJJ9sVReKu&#xA;xV2KuxVDXuqabYCM313DaCZuEXryJHzaleK8iKn5YqiFZXUMpDKwqrDcEHuMVbxV2KuxVAazr2ka&#xA;LDBPql0lpDczx2sMkhopmmNEWvatOpxVH4q7FXYq7FXYqgNZ17R9Ft4bjVLpLWK4nitYWevxzTuE&#xA;jRQKk1J+gVJ2GKo/FXYq7FWHfml5c8xaz5ejby7e3Npq1hOlzHHaXLWjXMYqstv6o+FS6mqlgRyA&#xA;rtXFXn9v591HTZ0tpPO82l3oApo/nDSuDeG95bi2Vlr+0CcVZbpnnnz7JH6iaLpfmW2A5NeeX9Ui&#xA;bb2huQn/ACc+/FU20b8y9K1DWrfQ7vTdT0fV7tXe2tdQtHQSLEKyFZY/ViIXueXh44qy7FWH6p+Z&#xA;umWus3miafpWqa1qtgUW8t7C0YpEZV5x+pNMYYlDruDy3HTFUp1Tz159iiEk2laP5WhPxC48wamh&#xA;JXsfRtgR/wAlcVYlc+eNU1d5bW0853Wt6gKV0jylpgReTV4g31wtwqJ/llthvQ4q9J/LTy7r2heW&#xA;Vh1++mv9Yu5nu7t553uTEZKBYVkfqsaIo22rUjFWVYqk3mPSvMN/bsmja42jT8aJKttDcgN4lZa1&#xA;xV8nfm1dfnH5d1n9F+ZtfvJ4J1MlpPbzPHbTxg0JCR+mvJf2lIqPkQSq8zWaeOdLkMRMGEqSHc8g&#xA;1eW/uMVffvk7zLZ+Z/LGm67aMpjvoFkdVNeElKSRn3RwVPyxVOcVdirsVfIn/OTvmuDWfPyaZavz&#xA;g0OD6tIRuPrEjc5qf6o4qfcHFXmmka75m0q4WPR9RvLKctxRLSaSMlmPQCMitT9+Kvrb8svK/wCc&#xA;EGnwXXmvzU49RQw0lreGeRARUCW4Yc+Xior/AK2KvUFBCgE1NNz0qcVdiryf/nJe30y4/LlIr24+&#xA;qyG+iNjKylozcCKUhJCteCugdQ1KBiK0FSFWF/k1/wA5E2Vtp8fl/wA7XJja1UR2OsENIGjUUEc/&#xA;AM3JegfuPtb7lV7b5Z8/eTvNEtzDoGqw38tpQzxx8gygmgYBwvJajqNsVT/FXEgCp6YqwHUfz3/K&#xA;qxhuZG16Kd7YlWggSSR3YVHGOi8WqR1rx98VfPGtfmVN+YP5jabf6zO9h5b0+6ie001KyScVcEKi&#xA;LTnNMRQt0XxoN1X2LirsVdirsVY1508kw+Y1tLqC6bTda01nbT9RSNJgokHGSKWJ/hlikA+JDiry&#xA;XW9JntfNsGha55L0LUNSuofX0/UdMnk0OW54txZYnrRp02LJ6gNCKbYqnXkGIaf+aqQX9hrGny3O&#xA;jyxacmuXIvKSRXCvPFaTiSbknplW+1UUOKvZcVeKecYG1L81tVi07TtY1KOHTbK31GDRrpbGJ7rn&#xA;NKi3k5kh2EMi03xVLPLmkXOo+aL3R/L3k/QNLuLCNZNQ1a/eTW5IJWNFiMx4g3FPiKhzTue2KvXP&#xA;Jnky28tW9073L6jq+oyCbVNUmVUeeRV4oAifDHHGvwxxrsoxVkWKuxV2KvG/+cmtHj1Xy3osCQvJ&#xA;dpflw8MZklEAhcSpGo3Z3cx8VHXqaAEhV8ua/pes2N2TqWmXGl+p/cQXMUkREaiiqPUClqAde+Ks&#xA;2/J785tR8g3b2lxG175eu3D3Nop/eRvShlgqePKlOSnZqduuKvqTy5+bH5eeYYUfTtctRKwBNrcS&#xA;C3nB7j05eLGnitRiqfat5g0LR4xLq2o22nxkEq11NHCDTw5la4q8V/M//nJnR7Ozn0zyU5vdSkBQ&#xA;6qVpbw12LRBxWVx2249/i6Yq+Yma4urgsxee4nepJq7u7n6SzMTir038r/K+px+ePLF7rOk3lqtt&#xA;eRVe4t5Y0lQGkMis6UJikA5b/ZAP7LHFX2TirsVdirGfzJ8s2/mXyVqmly2Qv5HhaS1t/U9FjPGO&#xA;Ufpy8X4PXYEinY7E4q+Er6zurK8mtLuCS1uIWKS28ylJEI/ZdWCkH6MVRnlrWvMOj6xBeeX7ie21&#xA;Sojga2qXcuQPT4AHmGP7JBrir7M/LDQPOiaY2r+fL97/AF6/i9P6owjWG1t2oTF6USpFzegMh49g&#xA;O26rx/8APNPzZ8o20ljb65d3Pka+Jjt3+Aywhq/6LPccfXIpsvJ6Mu3WuKvAMVesf845eTm1vzxB&#xA;qFzpb3em6WfXe7Z+EEUyisNV4n1H50IXkPE9MVfYWKuxV2KuxV2Kpdr3lzQvMFgbDWrGG/tCeQjm&#xA;WvFh+0h+0re6muKsMvvyS0B57O40zV9X0qXTZRcaekV49xDDKBSqx3Xr7FdmAIqNjtirPWivDYek&#xA;LhVvDHx+tCP4RJxpzEZbx348sVYHpn5IeW7f6ydR1LVtWN7M91exz3skMMs8lOUjx2voAk0A3rtt&#xA;0xVmui6Fo2h6emn6PZw2NlHusECBFqerGnVj3J3OKo7FXYq7FXYq7FUu8weXtG8w6VPpWsWqXdjc&#xA;Ah4pBWhpQOh6qy/ssNxirwryt/zivbDXryfzJdGTRreX09PtLc8JLmNQAJJnX7Abuq7k9x3VerW/&#xA;5P8A5X28KxJ5ZsCiCgMkQkb6Xfkx+k4qmuteR/J+uXEdxrGjWl/PDGIYpLiFHZYwSQgJGwBY7Yqw&#xA;Lzr/AM43+QtctJH0eAaFqlCYprepgLdhJATx4/6nE/Ppirf5J/kxbeTbWTU9Yt45PMcxKK9RIsES&#xA;gL+6PjIQWLdaEDbfFXq+KuxV2KuxV2KsD/Mf8mfKfnyeC81J7i11C3T0kurZwCYwS3BkcOh3J3AB&#xA;98Vb8hfkr5G8lTC7063e71OlBqF4wklUHqIwqoifNVr74qzvFVC+sbK/s5rK9gjubS4Uxz28qh0d&#xA;T1VlOxGKvI9T/wCcWfy5vNQN1bz39hA7cns4JY2jG9aIZY5HUfMnFXquhaJpuhaRa6RpsZhsbKMR&#xA;wRlixAG+7MSSSTU4qjsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVSqTzX5XjmEEur2cVwf90SzxxyfIozBh92KpBrF3+Y0TPd+V&#xA;rnSdfsftfUbjlBcAHcBLmJ2hav8AlRr8zirGZfz+/Qk623nfypqfl6RjxFwoW6tifESj0+Q/1A2K&#xA;vQPKvnPyx5rsTfaBqEd9Ah4yharIhPaSNwrr9IxVOsVSHzb568p+UbRLnzBqMdkkpIhjIZ5ZCOvC&#xA;OMM7U7mlB3xVgkH58XWvStD5I8oanru/EXk3G0tQelTKfUUfJuOKso0e78/Fku/Nl5pOi2v2hYWg&#xA;aSYgEGklzO4jHgeEZ/1sVT2DzT5ZuJzb22rWdxcA09CGeOSSoNKcEYt+GKppirsVSTzL538peWIh&#xA;Jr2q29hyFUjkasrDxWJeUjfQuKsHf/nJH8u2ZvqUepahEp4tNbWbFAT0HxmM79tsVTTRPz1/LXVb&#xA;hLU6kdOupacIdRie2rX/AIscel/w2Ks+VldQykMrCqsNwQe4xVvFUg80+ffJ3lWMPr+qwWLMOSQM&#xA;S8zL0qsKBpGHuFxVhkn/ADkZ5DEjLDaatcotayxWTcaLWp+NlbYCvTFU18v/AJ6flfrky29vrUdr&#xA;cseKw3qtbEk9AHkAjJPgGrirPQQQCDUHcEYq7FXYq8P8w/nT+YHlTzTfaLqej6ZqsUEp+qfV7tLW&#xA;6kgb4oiYneZi5QivFKYqmNr/AM5LeWIWji8xaLquhSv+1PBziH01WQ/RHirOPK/5m+Q/NE31fQ9Z&#xA;gurkjkLY8opiB1IjlCOad6DFWT4qp3NzbWtvJc3MqQW8Kl5ZpGCIijcszNQAD3xV53rH/OQ/5U6a&#xA;xRdWa/mX/ddlDJLX5OQsZ/4LFWNan/zkhdmMPpHlC99CQVjvdVljsIKeJdg8Z/5GDFWZflN5q84+&#xA;atMu9Z16GwtrOSQRaZDp7+tURlhK0kqySo3xUUcadDirO8VdiqhfWtrc2zxXNsl3FQn6vIqOGIHS&#xA;j/DX54q8q81+Rvy7kdpJvy61EzqKrNpEcEDBvEfV7mJSfmMVeUeZ9CvLSOSPy/p/n3TInovp3MTS&#xA;wUoaD906/cWOKr/+cW57qH8y762ldojLp0wlhcEF3SWIioP7Q3P34q+sMVfIv/OSMl9dfm6be3eS&#xA;eaK1toraKEF5EqC/FFXetXLfTiqL8t6DPepGPMWm+f8AVEUEcYYjHAQO1JXJ69g4xV6x5V8j/l5E&#xA;yy2/5dX8c5PIy6tHBM/Olak3FzKAffp9OKvUrW3t7eBIreFbeJR8MKKqqvtRdvuxVVxVLfMNnrV7&#xA;pU1ro2oJpd9KOKX7w/WfSB6ssReMFvCpoPA4q8H1z/nGLzG31jUrfzDDruuTMZGm1OF0DHY93uAz&#xA;GlP3lV9h1xV4R5s0fzRourPpfmOKeG/t9hFO3McT0MbAspQ9ippiqTcm48anjWtO1cVe1f8AOP35&#xA;valoet2nljWrh5tB1FlhsmlNfqszNxTgx/3U7fCw6A77b1Ve2/nX+Z3+BPLCy2nF9b1Fmh02NxVV&#xA;4gGSZh3EYI2/mI7VxV8Zajqep6hqE1/qFzLcX07c5riVi0jMe5J3xVCgkEEGhG4IxV7N5F/Inz95&#xA;ssYr3WzHZaVOA0Mt9ya9KHo8VBzVadBI3HvxPXFXuH5afln5p8kN9UPms6voVCF0y4tChi8DBL68&#xA;nDfqvHifAHfFXomKuxV4x/zkb5MivdLtfM0NjZXM1h+4vjeGWIGBz+7PqwvCRwkNPianxYq8Fs7T&#xA;ULdJV0y11S15is02iXyX9uoH80UFSR/rT4q1Y66bTUre8g1KyW8spVkj/SWnm0ufVQgqxls0kfr3&#xA;eYe+Kvszyn5gtvMPl2w1i3eN1u4g0ghcSIso+GRAykg8XBXFXkn/ADkd5zhijs/K0d1YRLJ/pWof&#xA;XTM4FD+4X0bcSO29WPNCv2foVeG2V3dzhhp13qNzIm0sOh2EdnEw/wAqWHg//BQ4qraV5ak1TWrf&#xA;T7XSrV76/kWJF1XUvrNwJG/mitGt5BTqecdAOuKvs7y/olloei2WkWSLHbWUSxIEUICR9puI6Fmq&#xA;xxVH4q7FXYqoXtrJcwGJLmW1J6yQcOdPCrq4H0Yq8481/lYmpmSAR6jrLSgVk1TWLiGzTx4xweo5&#xA;P+T6YHvirGPLH/OOOs6BrcfmPTvMFvp2q2xLWtnb20stqKji0cjTztK6OpKt37jFXsbyeY/0QCkF&#xA;mNYIoUaaU2wbpy5CL1CO/HiPDl3xV4v5g/5xr1bVtdm8w3uu2+rajeN6t5a3lvNBAzEAcUkgm9RE&#xA;UDigoaCnXFWYeVPywXTAkJGpaK8a7/o7WLi4sWI/yJxG9fYxUHjir0S0t5LeBYnuJLll/wB2zcOZ&#xA;HvwVB+GKq2KuxV2KuxVin5h/lp5a896Ylnq6PHPAS1pfQELNETTkFJDAq1PiUj8d8VSfyF+RfkXy&#xA;gvrJbfpTUia/X75UkZKdBElOEfzHxe+Kst8yeVdB8yaVJper2iXFs4IQ0AeJuzxP1Rl7EYqh08na&#xA;bLrttr2phdQ1SztI7S0mlQcYuJLSyxoSwWSVm3bqAAB3qqiPMXlPy35js2tNc06C/hYFQZUBda90&#xA;kHxofdSMVed+W/8AnGnyDovmFdXaS51CKF/UtLC6KNCjA1BfiqmTiegO3jXFXrWKuxV2KuxVZPBB&#xA;cQSQXEazQSqUlikUMjKwoVZTUEEdsVeZ6z/zjh+Vmou0kNhNpkzmpksZ3Sh8VST1Y1+haYqxnVf+&#xA;cb9bCBdI84TzQR7RWGrwrdwj/gi0Y/5FYqyz8nvKXnnyjDqOka8thNpzsLmxuNOog9VhxkVoikIX&#xA;kFUjioFQfHFWFaj+Sv5neZ/MN7rerX2kaQ19IXHpWyXl1GoAVF9R4wQVQBarLiqcW3/OM2i3AiPm&#xA;TzHquttF9lGkEUX0K/rsB8nxVnflH8rfInlGU3GhaVHb3hUqbuRnmmoeoDys5UHuFoMVZXirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirA/zP/NCTyALG7u9He/0e8YxSXcMypJFMNwnpOtG5LUg8+xxVJ9G/wCcl/ys1EAXF3caXIf2&#xA;LuBiK/60HrL95xVnGk+efJmroG0zXLG7r+xHcRlx80ryH0jFU8VlZQykFSKgjcEHFXYq0zKilmIV&#xA;VFWY7AAdziqRat598k6OD+k9dsbVhv6b3EfqH5ICXP0DFWDaz/zk1+V2n8hbXF1qjrsBaQMor/rT&#xA;mEfdirIPyw/Me48+Wd5qcOkNp2kQSCG1uJZlkknkG7/u1UcAg478jWvtirN8VdiqX69d6lZ6VNea&#xA;dbfXbm2Al+pDZ5kU1kjjP+/CleHYtQHbFVvl3zHo/mLSYdV0i4W5s5hsw2ZWH2kkXqjr+0p3GKpl&#xA;irsVdirsVdirHtN82Qaz5huNP0crc2GmBl1XUBUxi4OyW0TDZnXdpD0XYdW+FVkOKuxV2KvFfzc/&#xA;MH82fImvyalaW1neeT7loY7Rp0FY5TF8cbsjxyAlkZgxqN6e2KpJo/8AzlxZkqmueXZYf5pbOZZC&#xA;flHKsX/E8VZ/5b/5yA/K/XZo7dNTOn3UpASG/jMFSdqer8UNf9nir0YEEVHTFUs8weZtA8u2Dahr&#xA;l/DYWgNBJM1CzdeKKKs7eygnFXl2s/8AOU/5d2fJdPhvdUk/ZaOIQxH5tMyuP+AxVhV//wA5Weat&#xA;QnW28veX7W2kmcRQm6le4Ys5ooHH6uoY9hvir3P8uz53fy1HN50MQ1ueR5GghVFWGI0CRngSpbap&#xA;3PWmKsmxV2Kpd5i8v6Z5h0W70fU4vVsrxDHKoJVhXoykbgg7jFXxP+ZP5XeY/Imqm31CP1tOmY/U&#xA;dSjBMMq7kKTQcZAB8SH6KjfFWHYq9d/5x5/My/0Dzda6DfXTtoOrMLcQyMSkNw5pDIgP2eTfA1Nt&#xA;6noMVfXuKvjT8+PzLvfNXm+7sLW6f/D2mOba1gRj6Urxmkk7AbNycHif5aU74q8wxVnX5W/lPr/n&#xA;vVUEEZt9EgkX9Iai4IQKCC0ce3xyleg7d6Yq+1NH0jT9H0u10vTohBY2caxW8QJbiq9N2JJPiTiq&#xA;MxV2KofUIryWzljspxbXZFYJ2QSKrA1HNCRyU9GAINOhB3xV4H5mvbTTNafWo7658geYbsky6nao&#xA;2oeXtTYVActGrLzam/JKr3BO+Kqb/nl+YNhbN6ureUdRVRRLqOa45sRXdolZH+gIuKsm/Jj85dS8&#xA;2a9qOi67LaSXBQXGlXFlHNFBIiACeNROFkLJyU7iv2uwxV6R5080WnlbyxqGuXI5LZxExQ95Zm+G&#xA;KMe7uQMVeBaH/wA5D+f7iARy3fls3BHxLefWrSRGPaQsUiNP8k/Tiqre+eNV8xSC080+eIFtJzx/&#xA;w55PgnuLm5rsYvX4HjyG1PUYEYq9h/Lq2u4dPSCHTofL+iWS+jZaGrLLdLyo3qXrgsEkYHlwBJ3q&#xA;zEmgVZjirsVdiqA1zQdH17TJtL1i0jvbCenqwSioNDUEEUIIPQjfFXxf+bX5X6j5D1sQytHLpt80&#xA;smlzIX5GJGHwPy2DqHFdzirBMVfUv/OLnn2/1bR73yxqMpml0hUl0+RyS/1aQlWjJPaNqcfZqdAM&#xA;VeE/mn59v/Onm681GaVm0+KR4tLgqeEdurUWi/zOByY+P0YqxFVqaVA8ScVfUX5C/klDpkEXmjzJ&#xA;a2897cJb3Oiw/vGa3UqX9SRXoBIeS0FPhp49FXu+KuxV2KuxVDajpthqVlNY38CXNnOvCaCQclYH&#xA;xGKvFPNn/OKflvULt7ny/qUmjhzU2kkf1mIE1rwJdHUexJ/oqxCP/nEnzaLkBtcsVgBFJVWYyfPh&#xA;xUf8Nir3W88k65ceQh5a/wAU3q6kI/TfXeEfrv1qrLSvChps/P8AyzvVV4V/0KR5q+sBf05Y/Vqm&#xA;snCbnTt8HGn/AA2Ks08of84r+VtMuFufMF9JrboQy2yobeCoofiAd3f7xir2mysrSxtIrOzhS3tY&#xA;FCRQxgKqqOwAxVWxV2KuxV2KsK84+RXv3e80X1LK9nr9bNrcm09Y/wA0kbR3NtOe37yKv+WMVeV6&#xA;j+VfnWWU8dKnlINPUTTvK8MhAUCv1lZFl8f2PvxVMfLn5J+cLTVrXzG08dlqWmOJ7OO5updQvJyi&#xA;lTbTXFIIIoXVmX93ESK9TirOvzQ8hav54htLCOeG106yH1swXKtJHdXRqiRSiGSOREjTlVlbqykf&#xA;ZOKvLj+T/nq2lWJtOuLlI9lb1NJ1m3AGwEUerC2kjWh2BLfPFWXeVfy08zA+nfG5sLNgFngjaw0p&#xA;HWvRodFQtIKdjcpir1nT9PsdOs47OxgjtrWEUjhiUKo3qdh4nc4qiMVdirsVdiqT+bPKuk+aNCu9&#xA;H1OFJIbmJ445WRXeF3UqssfIHi6VqDir5k1v/nFf8wbRmbTbmy1SKp4BZGglPzSRQg/4PFWX/wDO&#xA;Ov5Z+b/LnmPXZfMWnS6fFJZLaoWKMHMsgY+m6M6niI96eIxV5jp3/OPX5q31w0a6R9WhViv1m6lj&#xA;iU0NK8Sxkoeuy4q9a/Kr/nG2fy9rkes+abmy1A26t6GnRRmaL1GFA7vMi/Y7AL1oa7Yq94xV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:8491eaa3-1d64-774e-9f64-517c6fee4be4"
    stRef:documentID="xmp.did:8491eaa3-1d64-774e-9f64-517c6fee4be4"
    stRef:originalDocumentID="uuid:212d0abb-00c7-45b5-9983-5cc70dfcad65"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:5f4c5403-c51b-414e-9ed7-1da229ae9d51"
      stEvt:when="2020-07-28T19:45:54+05:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:8491eaa3-1d64-774e-9f64-517c6fee4be4"
      stEvt:when="2020-08-05T14:13:04+05:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:AB69F4BC5CDAEA118B17BFE6AA659F47"
      stEvt:when="2020-08-09T19:56:30+03:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:e33dedf6-8501-ee42-a8bd-4a573064e07f"
      stEvt:when="2020-08-17T22:32:07+07:00"
      stEvt:softwareAgent="Adobe Bridge CC 2017 (Windows)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Monochrome wings set</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Monochrome wings set. Flying symbols, black shapes, pilot insignia, aviation patch. Vector illustrations collection isolated on white background</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>wing</rdf:li>
     <rdf:li>crest</rdf:li>
     <rdf:li>insignia</rdf:li>
     <rdf:li>patch</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>pilot</rdf:li>
     <rdf:li>tag</rdf:li>
     <rdf:li>badge</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>black</rdf:li>
     <rdf:li>background</rdf:li>
     <rdf:li>isolated</rdf:li>
     <rdf:li>set</rdf:li>
     <rdf:li>collection</rdf:li>
     <rdf:li>text</rdf:li>
     <rdf:li>sample</rdf:li>
     <rdf:li>symbol</rdf:li>
     <rdf:li>sign</rdf:li>
     <rdf:li>label</rdf:li>
     <rdf:li>flight</rdf:li>
     <rdf:li>element</rdf:li>
     <rdf:li>silhouette</rdf:li>
     <rdf:li>freedom</rdf:li>
     <rdf:li>decorative</rdf:li>
     <rdf:li>retro</rdf:li>
     <rdf:li>dove</rdf:li>
     <rdf:li>cartoon</rdf:li>
     <rdf:li>simple</rdf:li>
     <rdf:li>angel</rdf:li>
     <rdf:li>eagle</rdf:li>
     <rdf:li>logo</rdf:li>
     <rdf:li>bird</rdf:li>
     <rdf:li>feather</rdf:li>
     <rdf:li>tattoo</rdf:li>
     <rdf:li>vintage</rdf:li>
     <rdf:li>animal</rdf:li>
     <rdf:li>hawk</rdf:li>
     <rdf:li>falcon</rdf:li>
     <rdf:li>military</rdf:li>
     <rdf:li>army</rdf:li>
     <rdf:li>union</rdf:li>
     <rdf:li>phoenix</rdf:li>
     <rdf:li>pigeon</rdf:li>
     <rdf:li>spread</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmpTPg:MaxPageSize
    stDim:w="3500.000000"
    stDim:h="2000.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                             
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
3500 2000 li
3500 0 li
cp
clp
3500 2000 mo
0 2000 li
0 0 li
3500 0 li
3500 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
1737.89 1793.86 mo
1715.22 1742 1698.93 1710.03 1681.08 1675.15 cv
1670.42 1677.82 li
1619.41 1690.63 1565.13 1688.2 1516.29 1669.12 cv
1491.87 1659.58 1468.75 1646.26 1447.75 1629.5 cv
1426.83 1612.64 1407.74 1592.89 1390.97 1570.39 cv
1400.51 1596.8 1416.04 1621.38 1435.67 1642.39 cv
1455.08 1663.78 1479.25 1681.09 1505.79 1693.65 cv
1532.42 1706.03 1561.62 1713.1 1590.99 1714.68 cv
1617.08 1715.99 1643.22 1713.1 1668.22 1706.09 cv
1670.34 1709.52 1672.47 1712.96 1674.6 1716.39 cv
1670.31 1717.92 1665.91 1719.32 1661.49 1720.49 cv
1651.73 1723.87 1641.64 1725.78 1631.66 1728.19 cv
1611.49 1731.96 1591.08 1734.05 1570.57 1733.92 cv
1550.2 1733.17 1529.73 1730.99 1509.66 1725.96 cv
1469.42 1716.12 1431.52 1696.25 1396.09 1670.93 cv
1423.07 1705.14 1460.28 1732.55 1502.94 1747.93 cv
1513.59 1751.77 1524.53 1754.82 1535.72 1756.91 cv
1546.76 1759.68 1558.15 1760.37 1569.46 1761.58 cv
1592.23 1762.91 1615.04 1761.04 1637.39 1756.91 cv
1655.43 1753.08 1673.1 1747.72 1690.09 1740.84 cv
1691.87 1743.75 1693.73 1746.61 1695.64 1749.48 cv
1686.12 1754.08 1676.38 1758.23 1666.46 1761.89 cv
1646.96 1768.95 1626.8 1773.97 1606.33 1776.87 cv
1585.8 1779.41 1564.97 1779.84 1544.23 1777.91 cv
1502.7 1773.63 1462.1 1759.13 1423.9 1738.45 cv
1456.55 1767.12 1497.41 1787.87 1541.62 1795.89 cv
1552.63 1798.01 1563.81 1799.32 1575.03 1799.52 cv
1586.33 1800.37 1597.53 1799.38 1608.79 1798.87 cv
1631.24 1796.54 1653.24 1791.12 1674.48 1783.89 cv
1686.04 1779.46 1697.33 1774.39 1708.3 1768.69 cv
1710.75 1772.41 1713.26 1776.07 1715.71 1779.72 cv
1715.44 1779.92 1715.13 1780.05 1714.87 1780.25 cv
1696.78 1790.77 1677.64 1799.48 1657.74 1806.01 cv
1637.78 1812.12 1617.14 1816.3 1596.15 1817.89 cv
1554.15 1820.82 1511.42 1813.13 1470.65 1798.6 cv
1508.43 1819.81 1552.18 1832.03 1596.69 1831.52 cv
1607.82 1831.52 1618.94 1830.63 1629.91 1828.78 cv
1640.97 1827.53 1651.75 1824.47 1662.58 1821.89 cv
1684 1815.51 1704.4 1806.26 1723.83 1795.4 cv
1724.48 1795.02 1725.06 1794.63 1725.72 1794.18 cv
1726.8 1795.75 1727.89 1797.27 1728.98 1798.84 cv
1736.79 1809.92 1744.79 1820.91 1753.19 1831.66 cv
1748.39 1818.87 1743.21 1806.31 1737.89 1793.86 cv
cp
.168627 .168627 .168627 rgb
f
1807.94 1793.86 mo
1829.92 1743.6 1845.38 1713.03 1864.75 1675.15 cv
1875.42 1677.82 li
1926.42 1690.63 1980.71 1688.2 2029.55 1669.12 cv
2053.96 1659.58 2077.09 1646.26 2098.08 1629.5 cv
2119 1612.64 2138.1 1592.89 2154.86 1570.39 cv
2145.33 1596.8 2129.8 1621.38 2110.16 1642.39 cv
2090.76 1663.78 2066.59 1681.09 2040.04 1693.65 cv
2013.42 1706.03 1984.22 1713.1 1954.85 1714.68 cv
1928.76 1715.99 1902.62 1713.1 1877.62 1706.09 cv
1875.49 1709.52 1873.36 1712.96 1871.23 1716.39 cv
1875.53 1717.92 1879.93 1719.32 1884.35 1720.49 cv
1894.11 1723.87 1904.2 1725.78 1914.17 1728.19 cv
1934.34 1731.96 1954.75 1734.05 1975.27 1733.92 cv
1995.64 1733.17 2016.11 1730.99 2036.18 1725.96 cv
2076.42 1716.12 2114.31 1696.25 2149.74 1670.93 cv
2122.77 1705.14 2085.56 1732.55 2042.89 1747.93 cv
2032.24 1751.77 2021.3 1754.82 2010.11 1756.91 cv
1999.08 1759.68 1987.69 1760.37 1976.38 1761.58 cv
1953.6 1762.91 1930.8 1761.04 1908.45 1756.91 cv
1890.4 1753.08 1872.74 1747.72 1855.75 1740.84 cv
1853.96 1743.75 1852.11 1746.61 1850.2 1749.48 cv
1859.71 1754.08 1869.46 1758.23 1879.37 1761.89 cv
1898.87 1768.95 1919.04 1773.97 1939.5 1776.87 cv
1960.03 1779.41 1980.86 1779.84 2001.6 1777.91 cv
2043.14 1773.63 2083.74 1759.13 2121.94 1738.45 cv
2089.28 1767.12 2048.43 1787.87 2004.21 1795.89 cv
1993.2 1798.01 1982.02 1799.32 1970.81 1799.52 cv
1959.5 1800.37 1948.3 1799.38 1937.05 1798.87 cv
1914.59 1796.54 1892.6 1791.12 1871.36 1783.89 cv
1859.8 1779.46 1848.5 1774.39 1837.53 1768.69 cv
1835.09 1772.41 1832.58 1776.07 1830.13 1779.72 cv
1830.39 1779.92 1830.71 1780.05 1830.97 1780.25 cv
1849.06 1790.77 1868.19 1799.48 1888.09 1806.01 cv
1908.05 1812.12 1928.69 1816.3 1949.68 1817.89 cv
1991.69 1820.82 2034.41 1813.13 2075.18 1798.6 cv
2037.41 1819.81 1993.66 1832.03 1949.15 1831.52 cv
1938.02 1831.52 1926.89 1830.63 1915.92 1828.78 cv
1904.86 1827.53 1894.08 1824.47 1883.25 1821.89 cv
1861.83 1815.51 1841.44 1806.26 1822 1795.4 cv
1821.36 1795.02 1820.77 1794.63 1820.12 1794.18 cv
1819.04 1795.75 1817.94 1797.27 1816.86 1798.84 cv
1809.04 1809.92 1801.04 1820.91 1792.65 1831.66 cv
1797.44 1818.87 1802.63 1806.31 1807.94 1793.86 cv
cp
f
1743.39 870.254 mo
1715.15 868.306 1653.93 858.832 1600 810.173 cv
1542.51 758.329 1527.72 693.078 1523.77 660.593 cv
1522.61 651.075 1513.56 644.601 1504.16 646.479 cv
1417.31 663.606 1330.43 680.769 1243.59 697.896 cv
1307.25 695.672 1362 732.211 1378.03 783.676 cv
1388.75 818.087 1379.19 849.76 1370.96 868.177 cv
1376.04 862.922 1380.93 857.544 1385.68 852.085 cv
1390.23 846.84 1394.89 841.676 1399.15 836.229 cv
1401.32 833.525 1403.56 830.864 1405.65 828.082 cv
1411.94 819.775 li
1420.42 808.803 1428.16 797.229 1435.67 785.531 cv
1450.62 762.057 1463.69 737.321 1475.59 711.776 cv
1468.07 738.938 1457.02 765.241 1443.24 790.014 cv
1429.53 814.904 1412.76 838.059 1394.12 859.502 cv
1389.93 864.24 1385.6 868.858 1381.2 873.398 cv
1399.92 864.796 1430.65 855.65 1465.78 865.163 cv
1508.53 876.721 1542.02 911.56 1553.72 955.968 cv
1556.8 918.817 1554.96 881.225 1549.04 844.021 cv
1555.79 867.98 1559.91 892.817 1561.06 917.837 cv
1561.69 929.543 1561.57 941.248 1561.01 952.929 cv
1572.04 941.339 1587.38 927.757 1607.68 915.669 cv
1613.41 912.25 1619.12 909.242 1624.7 906.566 cv
1655.34 891.824 1689.68 886.882 1723.46 890.468 cv
1731.49 891.334 1737.59 891.65 1741.13 891.42 cv
1744.78 891.196 1747.49 890.285 1749.5 888.438 cv
1751.79 886.379 1752.64 883.683 1752.98 882.124 cv
1753.78 876.085 1749.41 870.642 1743.39 870.254 cv
cp
f
2302.24 697.896 mo
2215.4 680.769 2128.52 663.606 2041.68 646.479 cv
2032.27 644.601 2023.22 651.075 2022.07 660.593 cv
2018.12 693.078 2003.32 758.329 1945.84 810.173 cv
1891.9 858.832 1830.69 868.306 1802.45 870.254 cv
1796.42 870.642 1792.05 876.085 1792.85 882.124 cv
1793.2 883.683 1794.05 886.379 1796.33 888.438 cv
1798.34 890.285 1801.05 891.196 1804.71 891.42 cv
1808.25 891.65 1814.35 891.334 1822.37 890.468 cv
1856.16 886.882 1890.5 891.824 1921.14 906.566 cv
1926.72 909.242 1932.43 912.25 1938.16 915.669 cv
1958.45 927.757 1973.79 941.339 1984.83 952.929 cv
1984.26 941.248 1984.15 929.543 1984.78 917.837 cv
1985.92 892.817 1990.04 867.98 1996.8 844.021 cv
1990.88 881.225 1989.03 918.817 1992.12 955.968 cv
2003.82 911.56 2037.3 876.721 2080.06 865.163 cv
2115.19 855.65 2145.91 864.796 2164.64 873.398 cv
2160.24 868.858 2155.9 864.24 2151.72 859.502 cv
2133.08 838.059 2116.3 814.904 2102.59 790.014 cv
2088.81 765.241 2077.77 738.938 2070.24 711.776 cv
2082.15 737.321 2095.22 762.057 2110.17 785.531 cv
2117.68 797.229 2125.41 808.803 2133.9 819.775 cv
2140.18 828.082 li
2142.28 830.864 2144.52 833.525 2146.69 836.229 cv
2150.95 841.676 2155.6 846.84 2160.16 852.085 cv
2164.9 857.544 2169.8 862.922 2174.88 868.177 cv
2166.64 849.76 2157.08 818.087 2167.8 783.676 cv
2183.83 732.211 2238.58 695.672 2302.24 697.896 cv
cp
f
1703.73 403.502 mo
1694.01 410.245 1684.68 415.276 1676.45 419.047 cv
1676.46 419.03 1676.46 419.013 1676.46 418.996 cv
1675.05 419.697 1673.72 420.273 1672.68 420.634 cv
1673.69 416.604 1674.7 412.575 1675.71 408.545 cv
1673.98 412.883 1672.42 416.466 1669.03 420.081 cv
1664.72 424.683 1659.81 426.843 1656.87 427.863 cv
1657.79 424.179 1658.72 420.494 1659.64 416.81 cv
1658.31 419.851 1656.8 422.573 1654.23 425.315 cv
1649.91 429.917 1645.01 432.077 1642.06 433.097 cv
1643.04 429.2 1644.02 425.303 1645 421.405 cv
1643.66 424.469 1642.15 427.205 1639.56 429.962 cv
1635.24 434.564 1630.34 436.725 1627.39 437.745 cv
1628.76 432.324 1630.12 426.902 1631.48 421.481 cv
1628.61 426.204 1625.64 430.28 1620.81 434.125 cv
1613.31 440.085 1605.47 442.251 1600.83 443.136 cv
1603.24 437.299 1605.65 431.461 1608.06 425.624 cv
1605.63 429.31 1602.95 432.649 1598.99 435.801 cv
1591.5 441.762 1583.66 443.927 1579.01 444.812 cv
1581.61 438.517 1584.21 432.223 1586.81 425.927 cv
1584.24 429.955 1581.45 433.543 1577.19 436.929 cv
1569.7 442.891 1561.86 445.056 1557.22 445.942 cv
1559.7 439.913 1562.19 433.884 1564.68 427.857 cv
1561.39 431.914 1558.02 435.38 1553 438.432 cv
1544.81 443.401 1536.76 444.561 1532.04 444.853 cv
1535.47 438.828 1538.91 432.801 1542.34 426.776 cv
1540.04 428.718 1537.52 430.528 1534.53 432.204 cv
1524.03 438.097 1513.85 439.207 1507.91 439.37 cv
1513.79 429.829 1519.67 420.287 1525.55 410.747 cv
1520.64 415.813 1515.84 420.028 1508.75 423.431 cv
1499.17 428.038 1490.07 428.937 1483.98 428.937 cv
1483.18 428.937 1482.43 428.92 1481.73 428.896 cv
1487.3 421.027 1492.86 413.158 1498.43 405.289 cv
1495.05 408.044 1491.37 410.444 1486.77 412.487 cv
1477.99 416.383 1469.71 417.27 1463.7 417.27 cv
1462.18 417.27 1460.8 417.212 1459.6 417.133 cv
1465.89 408.78 1472.19 400.427 1478.48 392.073 cv
1476.16 393.337 1473.68 394.479 1470.86 395.448 cv
1464.15 397.76 1457.86 398.458 1452.61 398.458 cv
1448.95 398.458 1445.8 398.117 1443.39 397.748 cv
1449.45 390.994 1455.52 384.24 1461.58 377.487 cv
1459.14 378.576 1456.58 379.524 1453.58 380.154 cv
1450.39 380.826 1447.36 381.086 1444.58 381.086 cv
1439.18 381.086 1434.68 380.11 1431.68 379.259 cv
1436.14 375.389 1440.6 371.52 1445.06 367.649 cv
1443.29 367.854 1441.59 367.941 1439.97 367.941 cv
1434.59 367.941 1430.1 366.977 1427.11 366.128 cv
1432.11 361.786 1437.12 357.443 1442.12 353.1 cv
1440.21 353.339 1438.38 353.44 1436.64 353.44 cv
1431.25 353.44 1426.75 352.466 1423.76 351.616 cv
1428.24 347.729 1432.71 343.842 1437.19 339.954 cv
1436.7 340.022 1436.25 340.132 1435.72 340.174 cv
1434.96 340.234 1434.21 340.262 1433.48 340.262 cv
1428.23 340.262 1424 338.814 1421.49 337.736 cv
1425.8 334.872 1430.12 332.008 1434.43 329.144 cv
1433.86 329.227 1433.34 329.35 1432.73 329.397 cv
1431.97 329.458 1431.22 329.486 1430.49 329.486 cv
1425.24 329.486 1421.01 328.038 1418.5 326.959 cv
1421.48 324.977 1424.47 322.994 1427.46 321.011 cv
1427.08 321.057 1426.75 321.145 1426.36 321.175 cv
1425.59 321.236 1424.85 321.264 1424.12 321.264 cv
1418.86 321.264 1414.64 319.817 1412.12 318.738 cv
1414.79 316.966 1417.46 315.195 1420.13 313.422 cv
1418.89 313.715 1417.59 313.941 1416.17 314.054 cv
1415.41 314.114 1414.66 314.142 1413.93 314.142 cv
1408.68 314.142 1404.45 312.695 1401.94 311.615 cv
1406.9 308.322 1411.86 305.029 1416.82 301.735 cv
1420.9 302.614 1425.11 302.821 1429.23 302.246 cv
1433.36 301.708 1437.18 300.27 1440.82 298.783 cv
1444.46 297.203 1448.04 295.425 1451.53 293.644 cv
1440.23 296.947 li
1436.41 297.858 1432.64 298.711 1428.92 298.852 cv
1423.12 299.051 1417.41 297.687 1412.24 295.226 cv
1415.12 293.92 1418.01 292.628 1420.87 291.277 cv
1436.16 284.056 li
1437.95 284.384 1439.75 284.583 1441.57 284.475 cv
1447.06 284.042 1451.72 281.831 1456.43 279.792 cv
1451.4 280.56 1446.32 281.867 1441.55 281.567 cv
1438.15 281.37 1434.86 280.334 1431.9 278.725 cv
1436.89 276.888 li
1451.28 271.587 li
1435.93 272.815 li
1431.63 273.16 1427.13 273.625 1423.24 272.723 cv
1419.81 271.948 1416.56 270.294 1413.69 268.041 cv
1415.85 267.44 1418.02 266.858 1420.17 266.185 cv
1420.88 265.962 li
1420.18 265.877 li
1419 265.734 li
1419.47 265.922 li
1416.71 266.073 1413.98 266.321 1411.23 266.522 cv
1409.3 266.664 li
1410.64 268.317 li
1413.57 271.947 1417.62 274.859 1422.28 276.28 cv
1423.21 276.558 1424.16 276.728 1425.12 276.888 cv
1423.03 277.687 li
1426.13 279.877 li
1428.59 281.622 1431.39 282.884 1434.31 283.661 cv
1419.17 286.056 li
1415.89 286.575 1412.46 287.067 1409.13 287.377 cv
1405.82 287.72 1402.65 287.727 1399.52 287.185 cv
1394.62 286.336 1389.9 284.379 1385.69 281.566 cv
1394.35 278.875 li
1402.09 276.468 li
1394.19 275.468 li
1390.18 274.961 1386.12 274.492 1382.19 273.717 cv
1378.25 272.915 1374.43 271.576 1370.74 269.767 cv
1375.27 273.363 1380.75 275.507 1386.34 277.086 cv
1380.08 278.48 li
1375.94 279.4 li
1379.13 282.43 li
1384.42 287.452 1391.17 291.22 1398.54 292.587 cv
1400.54 292.968 1402.57 293.125 1404.59 293.164 cv
1401.25 294.864 li
1405.22 297.201 li
1408.4 299.07 1411.88 300.41 1415.45 301.321 cv
1413.08 302.258 1410.84 303.078 1408.91 303.703 cv
1402.43 305.803 1397.05 307.492 1390.36 307.492 cv
1389.51 307.492 1388.64 307.465 1387.75 307.408 cv
1378.2 306.803 1370.93 303.149 1366.89 300.69 cv
1372.14 298.19 1377.4 295.692 1382.65 293.192 cv
1380.44 293.605 1378.4 293.917 1376.59 294.153 cv
1372.46 294.689 1368.77 295.15 1365.02 295.15 cv
1361.85 295.15 1358.65 294.821 1355.1 293.927 cv
1345.82 291.585 1339.34 286.664 1335.82 283.507 cv
1341.12 282.099 1346.41 280.689 1351.7 279.28 cv
1350.98 279.157 1350.22 279.037 1349.54 278.913 cv
1340.04 277.164 1332.41 275.685 1323.9 270.37 cv
1313.68 263.992 1307.82 255.605 1304.82 250.47 cv
1310 250.733 1315.19 250.997 1320.38 251.261 cv
1314.1 248.851 1308.55 246.127 1302.84 241.181 cv
1293.74 233.292 1289.25 224.095 1287.09 218.555 cv
1293.28 219.856 1299.48 221.157 1305.68 222.458 cv
1301.82 220.587 1298.14 218.303 1294.4 215.059 cv
1285.3 207.168 1280.81 197.973 1278.64 192.433 cv
1286.02 193.981 1293.4 195.53 1300.77 197.079 cv
1297.1 195.254 1293.58 193.042 1290 189.94 cv
1280.9 182.051 1276.41 172.856 1274.24 167.315 cv
1299.43 172.604 1324.62 177.892 1349.81 183.18 cv
1349.81 183.204 1349.81 183.226 1349.82 183.248 cv
1403.37 194.279 1473.91 208.352 1523.58 217.811 cv
1540.66 221.063 1554.39 233.775 1558.74 250.608 cv
1566.78 281.72 1587.37 331.5 1639.15 357.826 cv
1663.98 370.449 1688.37 373.808 1707.53 373.808 cv
1721.62 373.808 1732.89 371.991 1739.43 370.707 cv
1731.29 380.521 1719.64 392.462 1703.73 403.502 cv
cp
1738.34 365.145 mo
1728.22 367.132 1717.85 368.14 1707.53 368.14 cv
1683.92 368.14 1661.78 362.969 1641.72 352.773 cv
1590.9 326.935 1571.35 276.785 1564.23 249.19 cv
1559.37 230.401 1543.84 215.897 1524.64 212.242 cv
1478.25 203.409 1410.13 189.866 1354.07 178.336 cv
1350.97 177.633 li
1275.41 161.768 li
1265.15 159.613 li
1268.97 169.38 li
1271.48 175.823 1274.84 181.624 1279 186.715 cv
1269.54 184.73 li
1273.36 194.498 li
1275.92 201.02 1279.33 206.883 1283.55 212.02 cv
1277.99 210.853 li
1281.81 220.62 li
1285.47 229.988 1290.91 237.997 1297.98 244.446 cv
1294.63 244.275 li
1299.92 253.33 li
1305.27 262.477 1312.33 269.828 1320.89 275.178 cv
1323.7 276.93 1326.44 278.308 1329.13 279.423 cv
1324.23 280.729 li
1332.04 287.729 li
1338.45 293.478 1345.75 297.412 1353.72 299.423 cv
1354.31 299.572 1354.9 299.709 1355.49 299.834 cv
1354.98 300.077 li
1363.94 305.531 li
1371.3 310.01 1379.19 312.545 1387.39 313.065 cv
1388.41 313.129 1389.39 313.16 1390.36 313.16 cv
1390.62 313.16 1390.88 313.158 1391.14 313.153 cv
1399.7 316.825 li
1400.77 317.282 1401.84 317.688 1402.93 318.04 cv
1400.25 319.814 li
1409.89 323.947 li
1410.49 324.205 1411.09 324.445 1411.7 324.67 cv
1406.62 328.037 li
1416.26 332.169 li
1416.96 332.47 1417.67 332.746 1418.37 333.001 cv
1418.35 333.014 li
1409.62 338.813 li
1419.25 342.946 li
1420.61 343.529 1421.99 344.027 1423.38 344.441 cv
1420.04 347.335 li
1412.12 354.208 li
1422.21 357.07 li
1423.96 357.566 1425.72 357.973 1427.49 358.29 cv
1426.47 359.175 li
1423.39 361.847 li
1415.47 368.721 li
1425.56 371.582 li
1427.21 372.05 1428.87 372.438 1430.54 372.744 cv
1429.42 373.72 li
1427.97 374.978 li
1420.05 381.852 li
1430.14 384.713 li
1434.92 386.068 1439.77 386.755 1444.58 386.755 cv
1444.94 386.755 1445.29 386.751 1445.65 386.743 cv
1439.17 393.96 li
1432.16 401.764 li
1442.53 403.35 li
1445.89 403.866 1449.28 404.127 1452.61 404.127 cv
1456.11 404.127 1459.56 403.843 1462.94 403.281 cv
1457.02 411.128 li
1455.07 413.721 li
1448.76 422.097 li
1459.22 422.79 li
1460.53 422.875 1462.04 422.938 1463.7 422.938 cv
1469.53 422.938 1475.18 422.187 1480.59 420.698 cv
1477.1 425.623 li
1471.05 434.184 li
1481.53 434.561 li
1482.29 434.588 1483.11 434.605 1483.98 434.605 cv
1491.97 434.605 1499.6 433.218 1506.73 430.474 cv
1503.08 436.396 li
1497.58 445.325 li
1508.06 445.036 li
1514.83 444.85 1521.29 443.699 1527.37 441.604 cv
1527.12 442.046 li
1521.93 451.159 li
1532.39 450.51 li
1539.08 450.096 1545.36 448.532 1551.12 445.85 cv
1547.98 453.472 li
1558.28 451.51 li
1563.17 450.576 1567.77 449.04 1572.01 446.918 cv
1569.77 452.343 li
1580.08 450.38 li
1584.87 449.466 1589.37 447.974 1593.55 445.92 cv
1591.59 450.667 li
1601.89 448.704 li
1608.8 447.388 1615.1 444.871 1620.68 441.206 cv
1619.34 446.535 li
1629.25 443.101 li
1630.99 442.498 1632.66 441.785 1634.24 440.965 cv
1634.01 441.888 li
1643.92 438.453 li
1645.66 437.852 1647.32 437.141 1648.9 436.325 cv
1648.82 436.653 li
1658.73 433.219 li
1662.34 431.963 1665.64 430.237 1668.57 428.063 cv
1668.36 428.943 li
1678.81 424.2 li
1688.64 419.697 1698.11 414.301 1706.96 408.159 cv
1720.67 398.648 1733.06 387.265 1743.79 374.324 cv
1753.95 362.078 li
1738.34 365.145 li
cp
f
1597.18 387.149 mo
1585.43 400.91 li
1582.74 404.063 1579.8 406.448 1576.27 408.203 cv
1574.35 409.138 1572.31 409.826 1570.21 410.35 cv
1571.53 407.855 1572.88 405.372 1574.18 402.864 cv
1579.14 393.283 li
1570.67 399.951 li
1566 403.634 li
1564.34 404.768 1562.57 405.754 1560.71 406.593 cv
1557.03 408.412 1552.98 409.477 1548.78 410.271 cv
1553.04 410.825 1557.42 410.397 1561.7 409.357 cv
1563.01 408.992 1564.31 408.537 1565.6 408.031 cv
1564.66 409.565 1563.68 411.075 1562.78 412.633 cv
1560.28 416.982 li
1565.34 416.739 li
1569.98 416.516 1574.65 415.368 1578.8 413.139 cv
1579.79 412.652 1580.73 412.076 1581.65 411.453 cv
1581.35 412.338 1581.02 413.208 1580.74 414.1 cv
1579.78 417.118 li
1582.58 416.363 li
1587.66 414.993 1592.37 412.313 1595.83 408.613 cv
1592.43 410.593 1588.81 411.893 1585.14 412.613 cv
1586.66 409.551 1588.16 406.48 1589.6 403.388 cv
1597.18 387.149 li
cp
f
1806.41 370.707 mo
1812.95 371.991 1824.21 373.808 1838.31 373.808 cv
1857.47 373.808 1881.85 370.449 1906.68 357.826 cv
1958.46 331.5 1979.06 281.72 1987.1 250.608 cv
1991.44 233.775 2005.18 221.063 2022.25 217.811 cv
2071.93 208.352 2142.47 194.279 2196.02 183.248 cv
2196.02 183.226 2196.03 183.204 2196.03 183.18 cv
2221.22 177.892 2246.4 172.604 2271.59 167.315 cv
2269.42 172.856 2264.94 182.051 2255.84 189.94 cv
2252.26 193.042 2248.74 195.254 2245.06 197.079 cv
2252.44 195.53 2259.82 193.981 2267.19 192.433 cv
2265.03 197.973 2260.54 207.168 2251.44 215.059 cv
2247.7 218.303 2244.02 220.587 2240.16 222.458 cv
2246.36 221.157 2252.55 219.856 2258.75 218.555 cv
2256.58 224.095 2252.09 233.292 2242.99 241.181 cv
2237.29 246.127 2231.74 248.851 2225.46 251.261 cv
2230.64 250.997 2235.83 250.733 2241.02 250.47 cv
2238.02 255.605 2232.15 263.992 2221.94 270.37 cv
2213.43 275.685 2205.8 277.164 2196.29 278.913 cv
2195.62 279.037 2194.86 279.157 2194.13 279.28 cv
2199.43 280.689 2204.72 282.099 2210.01 283.507 cv
2206.49 286.664 2200.02 291.585 2190.73 293.927 cv
2187.19 294.821 2183.98 295.15 2180.81 295.15 cv
2177.07 295.15 2173.38 294.689 2169.25 294.153 cv
2167.43 293.917 2165.4 293.605 2163.19 293.192 cv
2168.44 295.692 2173.69 298.19 2178.95 300.69 cv
2174.91 303.149 2167.64 306.803 2158.09 307.408 cv
2157.19 307.465 2156.32 307.492 2155.48 307.492 cv
2148.78 307.492 2143.41 305.803 2136.92 303.703 cv
2134.99 303.078 2132.76 302.258 2130.39 301.321 cv
2133.96 300.41 2137.44 299.07 2140.61 297.201 cv
2144.58 294.864 li
2141.25 293.164 li
2143.27 293.125 2145.3 292.968 2147.29 292.587 cv
2154.67 291.22 2161.41 287.452 2166.7 282.43 cv
2169.9 279.4 li
2165.76 278.48 li
2159.49 277.086 li
2165.08 275.507 2170.57 273.363 2175.1 269.767 cv
2171.41 271.576 2167.58 272.915 2163.65 273.717 cv
2159.72 274.492 2155.66 274.961 2151.65 275.468 cv
2143.75 276.468 li
2151.49 278.875 li
2160.15 281.566 li
2155.93 284.379 2151.22 286.336 2146.32 287.185 cv
2143.19 287.727 2140.02 287.72 2136.71 287.377 cv
2133.37 287.067 2129.94 286.575 2126.67 286.056 cv
2111.53 283.661 li
2114.45 282.884 2117.24 281.622 2119.71 279.877 cv
2122.8 277.687 li
2120.72 276.888 li
2121.67 276.728 2122.63 276.558 2123.55 276.28 cv
2128.21 274.859 2132.26 271.947 2135.2 268.317 cv
2136.54 266.664 li
2134.61 266.522 li
2131.86 266.321 2129.12 266.073 2126.37 265.922 cv
2126.83 265.734 li
2125.65 265.877 li
2124.95 265.962 li
2125.66 266.185 li
2127.81 266.858 2129.98 267.44 2132.14 268.041 cv
2129.27 270.294 2126.02 271.948 2122.6 272.723 cv
2118.71 273.625 2114.21 273.16 2109.9 272.815 cv
2094.55 271.587 li
2108.95 276.888 li
2113.94 278.725 li
2110.97 280.334 2107.69 281.37 2104.29 281.567 cv
2099.51 281.867 2094.44 280.56 2089.4 279.792 cv
2094.11 281.831 2098.78 284.042 2104.26 284.475 cv
2106.08 284.583 2107.89 284.384 2109.68 284.056 cv
2124.97 291.277 li
2127.83 292.628 2130.72 293.92 2133.6 295.226 cv
2128.43 297.687 2122.72 299.051 2116.92 298.852 cv
2113.2 298.711 2109.43 297.858 2105.6 296.947 cv
2094.3 293.644 li
2097.79 295.425 2101.37 297.203 2105.01 298.783 cv
2108.66 300.27 2112.48 301.708 2116.61 302.246 cv
2120.73 302.821 2124.94 302.614 2129.01 301.735 cv
2133.98 305.029 2138.94 308.322 2143.9 311.615 cv
2141.38 312.695 2137.16 314.142 2131.9 314.142 cv
2131.18 314.142 2130.43 314.114 2129.67 314.054 cv
2128.24 313.941 2126.94 313.715 2125.7 313.422 cv
2128.37 315.195 2131.04 316.966 2133.71 318.738 cv
2131.2 319.817 2126.97 321.264 2121.72 321.264 cv
2120.99 321.264 2120.24 321.236 2119.48 321.175 cv
2119.09 321.145 2118.75 321.057 2118.38 321.011 cv
2121.36 322.994 2124.35 324.977 2127.34 326.959 cv
2124.82 328.038 2120.6 329.486 2115.34 329.486 cv
2114.62 329.486 2113.87 329.458 2113.1 329.397 cv
2112.5 329.35 2111.97 329.227 2111.4 329.144 cv
2115.72 332.008 2120.03 334.872 2124.35 337.736 cv
2121.83 338.814 2117.61 340.262 2112.36 340.262 cv
2111.63 340.262 2110.88 340.234 2110.12 340.174 cv
2109.59 340.132 2109.14 340.022 2108.64 339.954 cv
2113.12 343.842 2117.6 347.729 2122.08 351.616 cv
2119.08 352.466 2114.59 353.44 2109.19 353.44 cv
2107.45 353.44 2105.62 353.339 2103.71 353.1 cv
2108.72 357.443 2113.72 361.786 2118.73 366.128 cv
2115.73 366.977 2111.25 367.941 2105.86 367.941 cv
2104.24 367.941 2102.54 367.854 2100.77 367.649 cv
2105.23 371.52 2109.69 375.389 2114.15 379.259 cv
2111.15 380.11 2106.66 381.086 2101.26 381.086 cv
2098.47 381.086 2095.44 380.826 2092.25 380.154 cv
2089.26 379.524 2086.7 378.576 2084.26 377.487 cv
2090.32 384.24 2096.38 390.994 2102.45 397.748 cv
2100.03 398.117 2096.88 398.458 2093.22 398.458 cv
2087.98 398.458 2081.68 397.76 2074.98 395.448 cv
2072.16 394.479 2069.68 393.337 2067.35 392.073 cv
2073.65 400.427 2079.94 408.78 2086.24 417.133 cv
2085.04 417.212 2083.66 417.27 2082.14 417.27 cv
2076.13 417.27 2067.84 416.383 2059.06 412.487 cv
2054.46 410.444 2050.78 408.044 2047.41 405.289 cv
2052.97 413.158 2058.54 421.027 2064.1 428.896 cv
2063.41 428.92 2062.66 428.937 2061.85 428.937 cv
2055.76 428.937 2046.67 428.038 2037.08 423.431 cv
2030 420.028 2025.19 415.813 2020.29 410.747 cv
2026.17 420.287 2032.05 429.829 2037.93 439.37 cv
2031.98 439.207 2021.81 438.097 2011.31 432.204 cv
2008.32 430.528 2005.79 428.718 2003.5 426.776 cv
2006.93 432.801 2010.36 438.828 2013.79 444.853 cv
2009.07 444.561 2001.03 443.401 1992.84 438.432 cv
1987.81 435.38 1984.44 431.914 1981.16 427.857 cv
1983.64 433.884 1986.13 439.913 1988.62 445.942 cv
1983.98 445.056 1976.14 442.891 1968.64 436.929 cv
1964.39 433.543 1961.6 429.955 1959.03 425.927 cv
1961.63 432.223 1964.22 438.517 1966.82 444.812 cv
1962.18 443.927 1954.34 441.762 1946.84 435.801 cv
1942.88 432.649 1940.21 429.31 1937.78 425.624 cv
1940.19 431.461 1942.6 437.299 1945.01 443.136 cv
1940.36 442.251 1932.52 440.085 1925.03 434.125 cv
1920.2 430.28 1917.23 426.204 1914.36 421.481 cv
1915.72 426.902 1917.08 432.324 1918.44 437.745 cv
1915.5 436.725 1910.59 434.564 1906.28 429.962 cv
1903.69 427.205 1902.18 424.469 1900.83 421.405 cv
1901.81 425.303 1902.79 429.2 1903.77 433.097 cv
1900.83 432.077 1895.92 429.917 1891.61 425.315 cv
1889.04 422.573 1887.53 419.851 1886.19 416.81 cv
1887.12 420.494 1888.04 424.179 1888.97 427.863 cv
1886.02 426.843 1881.12 424.683 1876.8 420.081 cv
1873.41 416.466 1871.85 412.883 1870.12 408.545 cv
1871.14 412.575 1872.15 416.604 1873.16 420.634 cv
1872.12 420.273 1870.79 419.697 1869.37 418.996 cv
1869.38 419.013 1869.38 419.03 1869.38 419.047 cv
1861.16 415.276 1851.83 410.245 1842.11 403.502 cv
1826.19 392.462 1814.54 380.521 1806.41 370.707 cv
cp
1791.88 362.078 mo
1802.04 374.324 li
1812.77 387.265 1825.16 398.648 1838.88 408.159 cv
1847.73 414.301 1857.2 419.697 1867.02 424.2 cv
1877.47 428.943 li
1877.27 428.063 li
1880.2 430.237 1883.49 431.963 1887.11 433.219 cv
1897.02 436.653 li
1896.94 436.325 li
1898.52 437.141 1900.18 437.852 1901.92 438.453 cv
1911.82 441.888 li
1911.59 440.965 li
1913.18 441.785 1914.84 442.498 1916.58 443.101 cv
1926.49 446.535 li
1925.15 441.206 li
1930.74 444.871 1937.04 447.388 1943.95 448.704 cv
1954.25 450.667 li
1952.29 445.92 li
1956.46 447.974 1960.96 449.466 1965.76 450.38 cv
1976.06 452.343 li
1973.82 446.918 li
1978.07 449.04 1982.66 450.576 1987.56 451.51 cv
1997.86 453.472 li
1994.71 445.85 li
2000.48 448.532 2006.76 450.096 2013.44 450.51 cv
2023.91 451.159 li
2018.72 442.046 li
2018.47 441.604 li
2024.55 443.699 2031 444.85 2037.77 445.036 cv
2048.25 445.325 li
2042.75 436.396 li
2039.1 430.474 li
2046.23 433.218 2053.86 434.605 2061.85 434.605 cv
2062.73 434.605 2063.55 434.588 2064.31 434.561 cv
2074.79 434.184 li
2068.73 425.623 li
2065.25 420.698 li
2070.66 422.187 2076.31 422.938 2082.14 422.938 cv
2083.8 422.938 2085.3 422.875 2086.61 422.79 cv
2097.08 422.097 li
2090.77 413.721 li
2088.81 411.128 li
2082.9 403.281 li
2086.28 403.843 2089.73 404.127 2093.22 404.127 cv
2096.55 404.127 2099.95 403.866 2103.31 403.35 cv
2113.68 401.764 li
2106.67 393.96 li
2100.19 386.743 li
2100.54 386.751 2100.9 386.755 2101.26 386.755 cv
2106.06 386.755 2110.92 386.068 2115.7 384.713 cv
2125.79 381.852 li
2117.87 374.978 li
2116.42 373.72 li
2115.29 372.744 li
2116.96 372.438 2118.63 372.05 2120.27 371.582 cv
2130.36 368.721 li
2122.44 361.847 li
2119.36 359.175 li
2118.34 358.29 li
2120.11 357.973 2121.87 357.566 2123.63 357.07 cv
2133.71 354.208 li
2125.79 347.335 li
2122.46 344.441 li
2123.85 344.027 2125.22 343.529 2126.58 342.946 cv
2136.22 338.813 li
2127.48 333.014 li
2127.46 333.001 li
2128.17 332.746 2128.87 332.47 2129.57 332.169 cv
2139.21 328.037 li
2134.14 324.67 li
2134.74 324.445 2135.35 324.205 2135.95 323.947 cv
2145.58 319.814 li
2142.91 318.04 li
2143.99 317.688 2145.07 317.282 2146.13 316.825 cv
2154.7 313.153 li
2154.95 313.158 2155.22 313.16 2155.48 313.16 cv
2156.44 313.16 2157.43 313.129 2158.45 313.065 cv
2166.65 312.545 2174.54 310.01 2181.89 305.531 cv
2190.85 300.077 li
2190.34 299.834 li
2190.94 299.709 2191.53 299.572 2192.12 299.423 cv
2200.09 297.412 2207.38 293.478 2213.8 287.729 cv
2221.61 280.729 li
2216.7 279.423 li
2219.4 278.308 2222.13 276.93 2224.94 275.178 cv
2233.51 269.828 2240.57 262.477 2245.91 253.33 cv
2251.2 244.275 li
2247.85 244.446 li
2254.92 237.997 2260.36 229.988 2264.03 220.62 cv
2267.85 210.853 li
2262.29 212.02 li
2266.51 206.883 2269.92 201.02 2272.47 194.498 cv
2276.29 184.73 li
2266.84 186.715 li
2270.99 181.624 2274.35 175.823 2276.87 169.38 cv
2280.69 159.613 li
2270.43 161.768 li
2194.86 177.633 li
2191.77 178.336 li
2135.71 189.866 2067.58 203.409 2021.2 212.242 cv
2002 215.897 1986.46 230.401 1981.61 249.19 cv
1974.48 276.785 1954.93 326.935 1904.11 352.773 cv
1884.06 362.969 1861.92 368.14 1838.31 368.14 cv
1827.98 368.14 1817.62 367.132 1807.5 365.145 cv
1791.88 362.078 li
cp
f
1948.65 387.149 mo
1960.4 400.91 li
1963.1 404.063 1966.04 406.448 1969.56 408.203 cv
1971.49 409.138 1973.53 409.826 1975.62 410.35 cv
1974.3 407.855 1972.96 405.372 1971.66 402.864 cv
1966.7 393.283 li
1975.16 399.951 li
1979.84 403.634 li
1981.49 404.768 1983.27 405.754 1985.13 406.593 cv
1988.81 408.412 1992.85 409.477 1997.05 410.271 cv
1992.8 410.825 1988.42 410.397 1984.14 409.357 cv
1982.82 408.992 1981.52 408.537 1980.24 408.031 cv
1981.17 409.565 1982.15 411.075 1983.05 412.633 cv
1985.56 416.982 li
1980.49 416.739 li
1975.86 416.516 1971.19 415.368 1967.04 413.139 cv
1966.05 412.652 1965.1 412.076 1964.19 411.453 cv
1964.48 412.338 1964.82 413.208 1965.1 414.1 cv
1966.05 417.118 li
1963.26 416.363 li
1958.18 414.993 1953.46 412.313 1950 408.613 cv
1953.41 410.593 1957.02 411.893 1960.7 412.613 cv
1959.18 409.551 1957.68 406.48 1956.23 403.388 cv
1948.65 387.149 li
cp
f
2903.5 1811.14 mo
2897.41 1840.39 li
2754.79 1810.67 li
2733.93 1806.32 2719.51 1788.26 2718.95 1767.88 cv
2730.12 1770.15 2741.35 1772.37 2752.54 1774.53 cv
2797.54 1783.1 li
2812.56 1785.76 2827.6 1788.61 2842.65 1791.11 cv
2827.85 1787.39 2812.93 1783.99 2798.1 1780.38 cv
2753.43 1770.25 li
2736.27 1766.45 2719.04 1762.74 2701.86 1759.05 cv
2686.1 1752.11 2675.67 1736.62 2675.08 1719.42 cv
2690.92 1722.6 2706.76 1725.79 2722.57 1728.85 cv
2767.62 1737.43 li
2782.64 1740.1 2797.68 1742.94 2812.74 1745.44 cv
2797.95 1741.67 2783.01 1738.32 2768.19 1734.71 cv
2723.46 1724.58 li
2701.83 1719.72 2680.14 1715.15 2658.41 1710.5 cv
2658.41 1710.5 2658.41 1710.5 2658.36 1710.49 cv
2642.42 1703.64 2631.87 1688.12 2631.19 1670.84 cv
2651.62 1675.04 2672.12 1679.2 2692.65 1683.19 cv
2737.71 1691.76 li
2752.73 1694.43 2767.71 1697.27 2782.82 1699.78 cv
2767.98 1695.99 2753.11 1692.6 2738.27 1689.05 cv
2693.54 1678.91 li
2667.27 1673.03 2640.96 1667.55 2614.69 1661.9 cv
2598.67 1655.15 2588.01 1639.61 2587.32 1622.38 cv
2612.44 1627.44 2637.57 1632.68 2662.74 1637.52 cv
2707.74 1646.09 li
2722.81 1648.77 2737.8 1651.6 2752.92 1654.06 cv
2738.06 1650.32 2723.2 1646.93 2708.3 1643.37 cv
2663.63 1633.25 li
2633.81 1626.57 2603.9 1620.34 2574.04 1613.88 cv
2570.93 1613.23 li
2551.38 1605.05 2539.74 1583.98 2544.22 1562.45 cv
2785.61 1612.75 li
2801.89 1616.61 2835.55 1627.1 2864.23 1656.99 cv
2888.73 1682.53 2899.93 1712.14 2904.76 1737.58 cv
2909.37 1761.87 2908.56 1786.89 2903.5 1811.14 cv
cp
f
2956.82 1811.14 mo
2962.92 1840.39 li
3105.53 1810.67 li
3126.4 1806.32 3140.81 1788.26 3141.37 1767.88 cv
3130.21 1770.15 3118.97 1772.37 3107.79 1774.53 cv
3062.79 1783.1 li
3047.77 1785.76 3032.72 1788.61 3017.67 1791.11 cv
3032.47 1787.39 3047.4 1783.99 3062.22 1780.38 cv
3106.89 1770.25 li
3124.05 1766.45 3141.29 1762.74 3158.47 1759.05 cv
3174.22 1752.11 3184.65 1736.62 3185.24 1719.42 cv
3169.4 1722.6 3153.56 1725.79 3137.76 1728.85 cv
3092.7 1737.43 li
3077.68 1740.1 3062.64 1742.94 3047.58 1745.44 cv
3062.37 1741.67 3077.31 1738.32 3092.13 1734.71 cv
3136.86 1724.58 li
3158.49 1719.72 3180.18 1715.15 3201.91 1710.5 cv
3201.91 1710.5 3201.91 1710.5 3201.96 1710.49 cv
3217.91 1703.64 3228.45 1688.12 3229.14 1670.84 cv
3208.7 1675.04 3188.21 1679.2 3167.67 1683.19 cv
3122.62 1691.76 li
3107.6 1694.43 3092.61 1697.27 3077.5 1699.78 cv
3092.34 1695.99 3107.21 1692.6 3122.05 1689.05 cv
3166.78 1678.91 li
3193.06 1673.03 3219.36 1667.55 3245.63 1661.9 cv
3261.65 1655.15 3272.31 1639.61 3273 1622.38 cv
3247.89 1627.44 3222.75 1632.68 3197.58 1637.52 cv
3152.58 1646.09 li
3137.51 1648.77 3122.53 1651.6 3107.4 1654.06 cv
3122.26 1650.32 3137.13 1646.93 3152.02 1643.37 cv
3196.7 1633.25 li
3226.51 1626.57 3256.42 1620.34 3286.29 1613.88 cv
3289.39 1613.23 li
3308.94 1605.05 3320.59 1583.98 3316.1 1562.45 cv
3074.71 1612.75 li
3058.43 1616.61 3024.78 1627.1 2996.09 1656.99 cv
2971.59 1682.53 2960.39 1712.14 2955.56 1737.58 cv
2950.96 1761.87 2951.77 1786.89 2956.82 1811.14 cv
cp
f
2893.55 783.246 mo
2893.62 783.106 2893.73 782.911 2893.8 782.777 cv
2887.88 787.075 2872.38 797.054 2851.91 795.847 cv
2834.77 794.836 2822.46 786.482 2815.25 781.455 cv
2792.27 765.431 2794.53 751.359 2777.34 744.308 cv
2761.42 737.784 2753.06 747.203 2732.75 746.018 cv
2720.46 745.302 2703.68 740.569 2684.02 723.378 cv
2648.5 689.923 2620.01 656.924 2597.57 627.548 cv
2591.96 638.827 2585.35 656.536 2587.6 677.18 cv
2592.4 721.328 2634.73 751.357 2670.35 770.485 cv
2637.95 756.764 2609.47 742.161 2585.04 728.143 cv
2584.24 740.712 2584.99 759.6 2595.06 777.765 cv
2608.15 801.387 2632.04 814.756 2657.79 822.527 cv
2638.88 821.214 2621.13 819.341 2604.8 817.101 cv
2608.77 829.055 2616.56 846.28 2632.7 859.343 cv
2649.78 873.16 2670.94 878.043 2692.65 878.071 cv
2682.34 881.263 2672.36 884.14 2662.81 886.693 cv
2671.1 896.177 2684.95 909.044 2704.89 914.838 cv
2761.48 931.282 2820.32 877.149 2848.85 850.9 cv
2865.92 835.192 2890.06 809.471 2911.61 771.07 cv
2905.87 775.069 2899.8 779.143 2893.55 783.246 cv
cp
f
2966.78 783.246 mo
2966.71 783.106 2966.59 782.911 2966.53 782.777 cv
2972.45 787.075 2987.94 797.054 3008.42 795.847 cv
3025.55 794.836 3037.86 786.482 3045.07 781.455 cv
3068.06 765.431 3065.79 751.359 3082.99 744.308 cv
3098.9 737.784 3107.26 747.203 3127.58 746.018 cv
3139.86 745.302 3156.64 740.569 3176.3 723.378 cv
3211.82 689.923 3240.31 656.924 3262.76 627.548 cv
3268.36 638.827 3274.98 656.536 3272.73 677.18 cv
3267.92 721.328 3225.59 751.357 3189.98 770.485 cv
3222.37 756.764 3250.85 742.161 3275.29 728.143 cv
3276.09 740.712 3275.33 759.6 3265.26 777.765 cv
3252.17 801.387 3228.28 814.756 3202.54 822.527 cv
3221.44 821.214 3239.19 819.341 3255.52 817.101 cv
3251.55 829.055 3243.76 846.28 3227.62 859.343 cv
3210.54 873.16 3189.38 878.043 3167.67 878.071 cv
3177.98 881.263 3187.96 884.14 3197.52 886.693 cv
3189.23 896.177 3175.38 909.044 3155.44 914.838 cv
3098.84 931.282 3040.01 877.149 3011.48 850.9 cv
2994.41 835.192 2970.26 809.471 2948.71 771.07 cv
2954.45 775.069 2960.52 779.143 2966.78 783.246 cv
cp
f
2908.3 385.998 mo
2861.55 324.141 2799.15 273.899 2724.11 245.686 cv
2672.08 226.226 2614.08 218.139 2560.71 220.521 cv
2539.37 221.571 2518.7 224.022 2497 228.374 cv
2487.59 230.276 2479.05 232.328 2471.55 234.339 cv
2521.41 225.952 2616.29 217.39 2716.15 257.372 cv
2745.09 268.958 2791.2 287.988 2834.51 333.195 cv
2856.79 356.446 2871.93 379.953 2882.15 399.15 cv
2891.21 396.01 2900.59 392.583 2910.34 388.808 cv
2909.69 387.898 2909 386.957 2908.3 385.998 cv
cp
f
2619.8 242.919 mo
2593.56 239.185 2573.47 239.085 2565.06 239.223 cv
2543.21 239.462 2523.96 241.733 2507.92 244.566 cv
2517.68 248.129 2528.03 252.67 2538.61 258.4 cv
2538.64 258.405 li
2551.01 258.41 2563.36 257.324 2575.53 255.252 cv
2590.68 252.686 2605.49 248.55 2619.8 242.919 cv
cp
f
2618.52 282.504 mo
2642.26 278.637 2665.57 270.178 2686.42 257.924 cv
2667.23 251.84 2650.92 248.518 2639.67 246.294 cv
2637.07 245.784 2634.53 245.284 2632.04 244.858 cv
2614.33 252.805 2595.69 258.47 2576.61 261.722 cv
2567.63 263.264 2558.53 264.227 2549.43 264.696 cv
2554.04 267.578 2558.68 270.696 2563.32 274.078 cv
2568.13 277.617 2572.6 281.208 2576.73 284.816 cv
2590.68 285.546 2604.64 284.758 2618.52 282.504 cv
cp
f
2661.53 309.726 mo
2689.06 305.217 2715.74 294.933 2739.27 279.894 cv
2723.61 271.642 2708.47 265.417 2694.58 260.661 cv
2671.86 274.891 2645.99 284.631 2619.61 288.943 cv
2607.79 290.868 2595.93 291.761 2584.08 291.6 cv
2590.61 297.9 2596.23 304.269 2601.26 310.65 cv
2618.68 312.941 2639.14 313.425 2661.53 309.726 cv
cp
f
2704.46 336.97 mo
2731.42 332.048 2757.74 321.545 2781.08 306.479 cv
2775.68 302.392 2770.02 298.365 2764.07 294.495 cv
2757.94 290.465 2751.86 286.809 2745.83 283.423 cv
2745.8 283.419 li
2720.78 300.059 2692.17 311.321 2662.61 316.196 cv
2644.15 319.241 2625.26 319.778 2606.66 317.877 cv
2610.73 323.559 2614.37 329.21 2617.77 334.76 cv
2641.56 340.322 2671.24 343.068 2704.46 336.97 cv
cp
f
2747.42 364.218 mo
2771.65 359.462 2794.84 350.689 2816.5 338.09 cv
2807.62 328.837 2797.69 319.596 2786.57 310.779 cv
2786.54 310.774 li
2761.98 326.953 2734.17 338.165 2705.64 343.421 cv
2679.73 348.165 2655.89 347.721 2635.17 344.719 cv
2630.73 344.076 2626.48 343.327 2622.34 342.463 cv
2625.01 347.049 2627.53 351.547 2630.07 355.948 cv
2660.35 366.219 2701.07 373.34 2747.42 364.218 cv
cp
f
2742.85 396.251 mo
2762.05 396.32 2781.22 394.007 2800.05 389.99 cv
2815.96 386.311 2831.59 381.302 2846.83 374.946 cv
2839.56 364.638 2831.05 353.817 2821.11 342.989 cv
2798.45 356.336 2774.13 365.639 2748.67 370.646 cv
2720.46 376.214 2694.26 375.89 2671.14 372.542 cv
2658.06 370.646 2645.95 367.768 2634.99 364.43 cv
2637.94 369.386 2640.95 374.186 2644.22 378.791 cv
2657.79 383.467 2671.57 387.349 2685.53 390.263 cv
2704.41 394.121 2723.62 396.407 2742.85 396.251 cv
cp
f
2801.29 394.93 mo
2780.68 400.553 2762.93 402.567 2742.83 402.793 cv
2723.56 402.846 2701 399.832 2684.38 395.221 cv
2671.28 391.869 2658.55 387.314 2646.33 381.742 cv
2651.36 388.586 2656.96 394.885 2663.71 400.557 cv
2693.2 425.424 2749.16 441.894 2865.5 404.693 cv
2860.61 395.952 2854.66 386.164 2847.46 375.864 cv
2832.99 384.016 2817.44 390.492 2801.29 394.93 cv
cp
f
2952.03 385.998 mo
2998.77 324.141 3061.17 273.899 3136.21 245.686 cv
3188.25 226.226 3246.24 218.139 3299.62 220.521 cv
3320.95 221.571 3341.62 224.022 3363.32 228.374 cv
3372.73 230.276 3381.27 232.328 3388.78 234.339 cv
3338.91 225.952 3244.03 217.39 3144.17 257.372 cv
3115.23 268.958 3069.12 287.988 3025.81 333.195 cv
3003.53 356.446 2988.39 379.953 2978.17 399.15 cv
2969.11 396.01 2959.74 392.583 2949.98 388.808 cv
2950.63 387.898 2951.32 386.957 2952.03 385.998 cv
cp
f
3240.53 242.919 mo
3266.76 239.185 3286.85 239.085 3295.27 239.223 cv
3317.12 239.462 3336.36 241.733 3352.4 244.566 cv
3342.64 248.129 3332.29 252.67 3321.71 258.4 cv
3321.68 258.405 li
3309.32 258.41 3296.96 257.324 3284.79 255.252 cv
3269.64 252.686 3254.83 248.55 3240.53 242.919 cv
cp
f
3241.8 282.504 mo
3218.06 278.637 3194.75 270.178 3173.9 257.924 cv
3193.09 251.84 3209.4 248.518 3220.65 246.294 cv
3223.25 245.784 3225.79 245.284 3228.28 244.858 cv
3245.99 252.805 3264.63 258.47 3283.71 261.722 cv
3292.7 263.264 3301.8 264.227 3310.89 264.696 cv
3306.28 267.578 3301.64 270.696 3297.01 274.078 cv
3292.2 277.617 3287.73 281.208 3283.59 284.816 cv
3269.64 285.546 3255.68 284.758 3241.8 282.504 cv
cp
f
3198.8 309.726 mo
3171.27 305.217 3144.58 294.933 3121.05 279.894 cv
3136.72 271.642 3151.85 265.417 3165.74 260.661 cv
3188.46 274.891 3214.33 284.631 3240.71 288.943 cv
3252.53 290.868 3264.39 291.761 3276.24 291.6 cv
3269.71 297.9 3264.09 304.269 3259.06 310.65 cv
3241.64 312.941 3221.18 313.425 3198.8 309.726 cv
cp
f
3155.87 336.97 mo
3128.9 332.048 3102.59 321.545 3079.25 306.479 cv
3084.64 302.392 3090.3 298.365 3096.26 294.495 cv
3102.38 290.465 3108.47 286.809 3114.49 283.423 cv
3114.52 283.419 li
3139.54 300.059 3168.15 311.321 3197.72 316.196 cv
3216.17 319.241 3235.06 319.778 3253.66 317.877 cv
3249.6 323.559 3245.95 329.21 3242.56 334.76 cv
3218.76 340.322 3189.08 343.068 3155.87 336.97 cv
cp
f
3112.9 364.218 mo
3088.67 359.462 3065.49 350.689 3043.83 338.09 cv
3052.7 328.837 3062.63 319.596 3073.75 310.779 cv
3073.79 310.774 li
3098.35 326.953 3126.15 338.165 3154.68 343.421 cv
3180.59 348.165 3204.43 347.721 3225.15 344.719 cv
3229.59 344.076 3233.85 343.327 3237.99 342.463 cv
3235.31 347.049 3232.79 351.547 3230.25 355.948 cv
3199.97 366.219 3159.25 373.34 3112.9 364.218 cv
cp
f
3117.47 396.251 mo
3098.28 396.32 3079.1 394.007 3060.27 389.99 cv
3044.36 386.311 3028.73 381.302 3013.49 374.946 cv
3020.76 364.638 3029.28 353.817 3039.21 342.989 cv
3061.87 356.336 3086.2 365.639 3111.65 370.646 cv
3139.86 376.214 3166.06 375.89 3189.18 372.542 cv
3202.26 370.646 3214.38 367.768 3225.33 364.43 cv
3222.38 369.386 3219.37 374.186 3216.11 378.791 cv
3202.53 383.467 3188.75 387.349 3174.79 390.263 cv
3155.91 394.121 3136.7 396.407 3117.47 396.251 cv
cp
f
3059.03 394.93 mo
3079.64 400.553 3097.4 402.567 3117.5 402.793 cv
3136.76 402.846 3159.32 399.832 3175.94 395.221 cv
3189.04 391.869 3201.77 387.314 3213.99 381.742 cv
3208.96 388.586 3203.36 394.885 3196.61 400.557 cv
3167.12 425.424 3111.16 441.894 2994.83 404.693 cv
2999.71 395.952 3005.66 386.164 3012.87 375.864 cv
3027.34 384.016 3042.89 390.492 3059.03 394.93 cv
cp
f
2835.43 1228.71 mo
2538.75 1168.72 li
2522 1132.16 li
2779.25 1184.24 li
2804.02 1189.2 2824.91 1205.74 2835.43 1228.71 cv
2835.43 1228.71 li
cp
f
2859.67 1281.83 mo
2562.99 1221.85 li
2545.18 1182.88 li
2841.86 1242.87 li
2859.67 1281.83 li
cp
f
2883.97 1334.97 mo
2587.29 1274.99 li
2569.48 1236.02 li
2866.16 1296 li
2883.97 1334.97 li
cp
f
2908.18 1387.9 mo
2653.29 1336.29 li
2627.04 1331.03 2604.91 1313.5 2593.78 1289.16 cv
2593.78 1289.16 li
2890.46 1349.14 li
2908.18 1387.9 li
cp
f
3024.89 1228.71 mo
3321.58 1168.72 li
3338.32 1132.16 li
3081.07 1184.24 li
3056.3 1189.2 3035.41 1205.74 3024.89 1228.71 cv
3024.89 1228.71 li
cp
f
3000.66 1281.83 mo
3297.34 1221.85 li
3315.15 1182.88 li
3018.46 1242.87 li
3000.66 1281.83 li
cp
f
2976.35 1334.97 mo
3273.04 1274.99 li
3290.85 1236.02 li
2994.16 1296 li
2976.35 1334.97 li
cp
f
2952.14 1387.9 mo
3207.04 1336.29 li
3233.28 1331.03 3255.41 1313.5 3266.54 1289.16 cv
3266.54 1289.16 li
2969.86 1349.14 li
2952.14 1387.9 li
cp
f
538.602 424.231 mo
525.43 423.501 511.935 421.128 499.547 414.865 cv
496.618 413.041 493.344 411.655 490.651 409.422 cv
487.948 407.238 484.981 405.101 482.681 402.695 cv
480.525 400.573 478.417 398.46 476.379 396.261 cv
443.559 394.891 410.777 391.851 378.272 386.477 cv
355.634 382.83 333.237 377.759 311.041 371.712 cv
291.529 365.964 272.113 359.015 253.933 349.271 cv
309.396 394.51 368.485 410.292 396.517 417.388 cv
457.503 432.849 511.716 430.337 550.86 424.214 cv
546.806 424.396 542.694 424.363 538.602 424.231 cv
cp
f
380.691 371.77 mo
402.821 375.668 425.213 378.298 447.636 380.527 cv
453.063 381.085 458.491 381.644 463.899 382.046 cv
457.254 374.067 451.013 365.612 445.281 356.905 cv
444.119 355.141 442.967 353.327 441.815 351.514 cv
412.55 350.163 383.274 347.388 354.174 342.766 cv
337.529 339.642 li
329.216 338.032 li
320.974 336.08 li
304.5 332.127 li
299.02 330.591 293.607 328.968 288.157 327.286 cv
266.551 320.598 245.209 312.133 225.567 300.358 cv
209.476 290.84 194.208 279.052 182.22 264.429 cv
189.24 276.757 197.617 289.415 207.575 302.042 cv
220.546 315.596 235.896 326.487 252.432 335.08 cv
272.076 345.127 293.179 352.524 314.822 358.05 cv
336.473 363.527 358.452 368.41 380.691 371.77 cv
cp
f
231.271 290.194 mo
250.572 300.17 271.067 308.053 292.27 313.743 cv
308.086 318.17 li
324.162 321.837 li
332.229 323.651 li
340.367 325.125 li
356.593 328.061 li
378.393 331.584 400.324 334.475 422.368 336.321 cv
425.999 336.713 429.64 337.057 433.292 337.351 cv
430.651 332.891 428.036 329.047 424.784 325.581 cv
416.813 317.125 406.74 310.728 395.463 306.728 cv
389.839 304.653 384.025 303.253 377.879 301.986 cv
358.895 298.127 li
283.066 281.897 li
245.295 273.456 li
232.101 269.874 219.67 264.058 208.501 256.571 cv
186.92 242.108 169.949 222.544 156.073 201.533 cv
161.362 219.301 169.569 235.992 180.779 250.199 cv
194.091 267.281 212.166 280.004 231.271 290.194 cv
cp
f
521.807 370.737 mo
497.115 336.819 502.02 311.032 480.317 282.104 cv
467.551 265.083 444.127 245.003 397.324 234.499 cv
152.696 184.107 li
155.235 187.834 157.841 191.473 160.565 195.034 cv
168.065 205.274 176.411 214.875 185.435 223.649 cv
194.468 232.375 204.149 240.42 214.75 246.722 cv
225.341 253.073 236.722 257.808 248.513 260.796 cv
286.359 268.134 li
361.958 283.503 li
380.854 287.548 li
387.292 288.875 394.002 290.612 400.475 293.014 cv
413.428 297.766 425.817 305.505 435.221 316.137 cv
440.064 321.508 443.738 327.858 446.754 333.463 cv
449.818 339.077 452.971 344.505 456.291 349.868 cv
462.988 360.553 470.205 370.938 478.078 380.849 cv
481.997 385.774 486.14 390.593 490.381 395.179 cv
494.556 399.599 499.068 403.121 504.207 406.315 cv
514.496 412.401 526.834 415.451 539.24 416.938 cv
552.095 418.468 565.184 418.367 578.268 417.3 cv
561.253 408.813 539.212 394.61 521.807 370.737 cv
cp
f
659.434 424.231 mo
672.606 423.501 686.101 421.128 698.489 414.865 cv
701.418 413.041 704.692 411.655 707.384 409.422 cv
710.088 407.238 713.054 405.101 715.355 402.695 cv
717.511 400.573 719.619 398.46 721.657 396.261 cv
754.477 394.891 787.258 391.851 819.763 386.477 cv
842.403 382.83 864.799 377.759 886.995 371.712 cv
906.506 365.964 925.923 359.015 944.103 349.271 cv
888.64 394.51 829.551 410.292 801.52 417.388 cv
740.533 432.849 686.319 430.337 647.176 424.214 cv
651.23 424.396 655.341 424.363 659.434 424.231 cv
cp
f
817.345 371.77 mo
795.214 375.668 772.823 378.298 750.4 380.527 cv
744.972 381.085 739.545 381.644 734.136 382.046 cv
740.781 374.067 747.022 365.612 752.754 356.905 cv
753.917 355.141 755.068 353.327 756.221 351.514 cv
785.486 350.163 814.762 347.388 843.861 342.766 cv
860.507 339.642 li
868.82 338.032 li
877.062 336.08 li
893.536 332.127 li
899.016 330.591 904.428 328.968 909.878 327.286 cv
931.484 320.598 952.827 312.133 972.469 300.358 cv
988.56 290.84 1003.83 279.052 1015.82 264.429 cv
1008.79 276.757 1000.42 289.415 990.46 302.042 cv
977.489 315.596 962.139 326.487 945.604 335.08 cv
925.961 345.127 904.857 352.524 883.214 358.05 cv
861.563 363.527 839.584 368.41 817.345 371.77 cv
cp
f
966.765 290.194 mo
947.464 300.17 926.968 308.053 905.767 313.743 cv
889.949 318.17 li
873.874 321.837 li
865.807 323.651 li
857.669 325.125 li
841.442 328.061 li
819.643 331.584 797.712 334.475 775.667 336.321 cv
772.037 336.713 768.396 337.057 764.744 337.351 cv
767.385 332.891 770 329.047 773.252 325.581 cv
781.223 317.125 791.295 310.728 802.573 306.728 cv
808.197 304.653 814.01 303.253 820.156 301.986 cv
839.142 298.127 li
914.97 281.897 li
952.741 273.456 li
965.936 269.874 978.366 264.058 989.535 256.571 cv
1011.12 242.108 1028.09 222.544 1041.96 201.533 cv
1036.67 219.301 1028.47 235.992 1017.26 250.199 cv
1003.94 267.281 985.87 280.004 966.765 290.194 cv
cp
f
676.229 370.737 mo
700.921 336.819 696.017 311.032 717.719 282.104 cv
730.484 265.083 753.909 245.003 800.712 234.499 cv
1045.34 184.107 li
1042.8 187.834 1040.2 191.473 1037.47 195.034 cv
1029.97 205.274 1021.63 214.875 1012.6 223.649 cv
1003.57 232.375 993.887 240.42 983.286 246.722 cv
972.695 253.073 961.315 257.808 949.522 260.796 cv
911.677 268.134 li
836.078 283.503 li
817.182 287.548 li
810.743 288.875 804.033 290.612 797.562 293.014 cv
784.608 297.766 772.219 305.505 762.815 316.137 cv
757.972 321.508 754.297 327.858 751.281 333.463 cv
748.218 339.077 745.064 344.505 741.746 349.868 cv
735.048 360.553 727.831 370.938 719.958 380.849 cv
716.039 385.774 711.896 390.593 707.654 395.179 cv
703.479 399.599 698.968 403.121 693.829 406.315 cv
683.54 412.401 671.202 415.451 658.796 416.938 cv
645.941 418.468 632.852 418.367 619.768 417.3 cv
636.782 408.813 658.824 394.61 676.229 370.737 cv
cp
f
1757.64 1363.94 mo
1751.36 1352.75 1732.64 1322.93 1697.36 1312.44 cv
1675.12 1305.82 1656.1 1309.78 1638.38 1313.7 cv
1578.25 1327 1571.03 1356.71 1537.9 1357.67 cv
1497.55 1358.77 1485.2 1315.15 1433.7 1283.58 cv
1416.24 1272.89 1393.15 1262.85 1362.43 1258.04 cv
1365.19 1256.13 li
1369.86 1252.97 1374.78 1250.21 1379.55 1247.24 cv
1389.13 1241.37 1399.12 1235.9 1409.11 1230.83 cv
1429.03 1220.59 1450.02 1212.51 1471.8 1207.49 cv
1482.69 1204.98 1493.73 1203.23 1504.87 1202.17 cv
1510.45 1201.67 1516.02 1201.32 1521.64 1201.27 cv
1527.21 1200.92 1532.83 1201.17 1538.45 1201.27 cv
1583.22 1203.18 1627.64 1216.63 1667.19 1239.26 cv
1629.75 1213.31 1585.08 1196.75 1538.85 1193.44 cv
1515.82 1191.78 1492.48 1193.44 1469.74 1198.21 cv
1447.05 1203.13 1425.17 1211.46 1404.54 1221.9 cv
1394.25 1227.17 1384.31 1232.79 1374.53 1238.81 cv
1369.61 1241.92 1364.64 1244.79 1359.87 1248.05 cv
1348.23 1256.23 li
1327 1254.17 1302.5 1254.52 1274.24 1258.49 cv
1296.63 1237.05 1334.93 1206.14 1389.79 1186.91 cv
1477.27 1156.25 1612.64 1153.49 1696.1 1240.87 cv
1713.02 1258.59 1744.34 1297.29 1757.64 1363.94 cv
cp
f
1788.2 1363.94 mo
1794.47 1352.75 1813.19 1322.93 1848.48 1312.44 cv
1870.71 1305.82 1889.73 1309.78 1907.45 1313.7 cv
1967.58 1327 1974.81 1356.71 2007.93 1357.67 cv
2048.29 1358.77 2060.64 1315.15 2112.13 1283.58 cv
2129.6 1272.89 2152.69 1262.85 2183.4 1258.04 cv
2180.64 1256.13 li
2175.97 1252.97 2171.06 1250.21 2166.29 1247.24 cv
2156.7 1241.37 2146.71 1235.9 2136.73 1230.83 cv
2116.8 1220.59 2095.82 1212.51 2074.04 1207.49 cv
2063.15 1204.98 2052.1 1203.23 2040.96 1202.17 cv
2035.39 1201.67 2029.82 1201.32 2024.2 1201.27 cv
2018.63 1200.92 2013 1201.17 2007.38 1201.27 cv
1962.61 1203.18 1918.19 1216.63 1878.64 1239.26 cv
1916.08 1213.31 1960.76 1196.75 2006.98 1193.44 cv
2030.02 1191.78 2053.36 1193.44 2076.1 1198.21 cv
2098.78 1203.13 2120.67 1211.46 2141.29 1221.9 cv
2151.58 1227.17 2161.52 1232.79 2171.31 1238.81 cv
2176.23 1241.92 2181.2 1244.79 2185.96 1248.05 cv
2197.61 1256.23 li
2218.84 1254.17 2243.33 1254.52 2271.59 1258.49 cv
2249.21 1237.05 2210.91 1206.14 2156.05 1186.91 cv
2068.57 1156.25 1933.2 1153.49 1849.73 1240.87 cv
1832.82 1258.59 1801.5 1297.29 1788.2 1363.94 cv
cp
f
531.034 1346.8 mo
518.555 1333.17 510.673 1316.46 507.215 1299.01 cv
505.431 1290.3 504.835 1281.38 505.047 1272.54 cv
505.245 1268.11 505.641 1263.7 506.23 1259.32 cv
507.332 1252.3 li
507.862 1249.04 508.064 1245.72 508.136 1242.39 cv
508.115 1229.06 503.775 1215.63 495.72 1204.59 cv
487.764 1193.59 475.165 1185.36 462.652 1181.79 cv
424.105 1170.39 385.234 1160.09 345.984 1151.07 cv
306.695 1142.18 267.117 1134.26 226.579 1129.59 cv
263.122 1147.75 300.625 1162.67 338.417 1176.61 cv
376.25 1190.42 414.461 1202.95 452.996 1214.39 cv
456.686 1215.51 459.181 1216.61 461.952 1218.4 cv
463.386 1219.34 464.721 1220.44 465.977 1221.63 cv
111.224 1188.22 li
460.849 1263.29 li
207.521 1282.14 li
478.376 1305.27 li
287.103 1345.3 li
487.574 1341.02 li
359.539 1390.47 li
519.492 1358.96 li
519.698 1359.11 519.887 1359.28 520.095 1359.42 cv
538.105 1372.13 559.682 1377.96 580.061 1376.81 cv
560.677 1370.44 543.341 1360.73 531.034 1346.8 cv
cp
f
667.002 1346.8 mo
679.481 1333.17 687.363 1316.46 690.82 1299.01 cv
692.605 1290.3 693.2 1281.38 692.988 1272.54 cv
692.791 1268.11 692.395 1263.7 691.805 1259.32 cv
690.704 1252.3 li
690.173 1249.04 689.972 1245.72 689.9 1242.39 cv
689.921 1229.06 694.261 1215.63 702.316 1204.59 cv
710.271 1193.59 722.871 1185.36 735.384 1181.79 cv
773.932 1170.39 812.802 1160.09 852.051 1151.07 cv
891.341 1142.18 930.918 1134.26 971.457 1129.59 cv
934.914 1147.75 897.41 1162.67 859.618 1176.61 cv
821.786 1190.42 783.575 1202.95 745.04 1214.39 cv
741.35 1215.51 738.855 1216.61 736.084 1218.4 cv
734.65 1219.34 733.314 1220.44 732.059 1221.63 cv
1086.81 1188.22 li
737.187 1263.29 li
990.514 1282.14 li
719.66 1305.27 li
910.933 1345.3 li
710.462 1341.02 li
838.497 1390.47 li
678.544 1358.96 li
678.337 1359.11 678.148 1359.28 677.941 1359.42 cv
659.931 1372.13 638.354 1377.96 617.975 1376.81 cv
637.36 1370.44 654.694 1360.73 667.002 1346.8 cv
cp
f
440.764 880.914 mo
414.281 875.3 392.707 857.697 381.837 833.636 cv
489.526 856.455 li
494.312 870.196 501.215 883.504 509.723 895.524 cv
440.764 880.914 li
cp
286.684 761.302 mo
481.447 802.571 li
480.841 814.322 481.805 826.162 484.323 837.968 cv
345.609 808.577 li
319.127 802.966 297.552 785.364 286.684 761.302 cv
cp
197.436 690.218 mo
493.872 753.03 li
489.272 762.612 485.889 772.781 483.777 783.388 cv
483.772 783.423 li
483.628 784.163 483.493 784.884 483.365 785.593 cv
433.659 775.062 li
261.961 738.679 li
261.961 738.682 li
256.384 737.5 li
229.852 731.876 208.272 714.27 197.436 690.218 cv
cp
538.071 902.948 mo
522.693 887.495 510.661 867.495 504.192 846.631 cv
504.16 846.523 li
498.961 830.091 497.208 813.521 498.929 797.27 cv
498.992 796.565 li
499.255 793.647 499.734 790.418 500.459 786.689 cv
502.967 774.11 507.527 762.25 514.021 751.441 cv
520.163 741.217 li
172.761 667.605 li
176.201 680.902 li
185.827 718.092 215.202 746.155 252.858 754.134 cv
266.957 757.122 li
277.923 791.75 306.247 817.621 342.083 825.211 cv
362.11 829.456 li
373.076 864.079 401.399 889.954 437.237 897.548 cv
558.203 923.181 li
538.071 902.948 li
cp
f
688.313 895.524 mo
696.82 883.504 703.724 870.196 708.51 856.455 cv
816.198 833.636 li
805.329 857.697 783.754 875.3 757.272 880.914 cv
688.313 895.524 li
cp
852.426 808.577 mo
713.712 837.968 li
716.231 826.162 717.195 814.322 716.588 802.571 cv
911.353 761.302 li
900.483 785.364 878.908 802.966 852.426 808.577 cv
cp
941.652 737.5 mo
936.074 738.682 li
936.074 738.679 li
764.377 775.062 li
714.67 785.593 li
714.543 784.884 714.407 784.163 714.263 783.423 cv
714.258 783.388 li
712.146 772.781 708.764 762.612 704.164 753.03 cv
1000.6 690.218 li
989.764 714.27 968.184 731.876 941.652 737.5 cv
cp
639.833 923.181 mo
760.799 897.548 li
796.636 889.954 824.96 864.079 835.926 829.456 cv
855.953 825.211 li
891.789 817.621 920.112 791.75 931.079 757.122 cv
945.178 754.134 li
982.833 746.155 1012.21 718.092 1021.83 680.902 cv
1025.27 667.605 li
677.873 741.217 li
684.014 751.441 li
690.508 762.25 695.069 774.11 697.576 786.689 cv
698.302 790.418 698.78 793.647 699.043 796.565 cv
699.107 797.27 li
700.828 813.521 699.075 830.091 693.876 846.523 cv
693.843 846.631 li
687.375 867.495 675.343 887.495 659.965 902.948 cv
639.833 923.181 li
cp
f
551.998 1768.59 mo
549.312 1765.47 546.51 1761.94 543.721 1758.01 cv
531.04 1740.13 529.891 1731.48 515.967 1702.05 cv
509.443 1688.25 501.873 1674.99 491.437 1663.76 cv
476.908 1648.13 458.289 1644.08 452.043 1642.34 cv
440.871 1639.22 436.28 1640.08 417.179 1637.94 cv
399.314 1635.93 384.924 1633.11 375.496 1631.03 cv
301.749 1615.84 228 1600.65 154.253 1585.47 cv
156.665 1590.58 159.317 1596.62 162.483 1602.98 cv
162.578 1603.22 162.633 1603.31 162.743 1603.48 cv
165.722 1607.98 169.339 1611.89 173.723 1614.94 cv
178.355 1618.19 183.909 1620.54 189.547 1621.81 cv
195.339 1623.05 201.438 1623.18 207.897 1622.67 cv
202.369 1626.01 195.672 1627.64 188.805 1627.35 cv
183.546 1627.03 178.441 1625.65 173.785 1623.2 cv
176.022 1627.76 li
177.035 1629.51 178.104 1631.34 179.256 1633.12 cv
179.296 1633.27 179.352 1633.36 179.476 1633.46 cv
182.36 1637.72 185.867 1641.46 190.001 1644.31 cv
194.634 1647.56 200.188 1649.91 205.826 1651.19 cv
211.548 1652.41 217.718 1652.56 224.176 1652.04 cv
218.647 1655.38 211.881 1657 205.083 1656.72 cv
201.979 1656.57 198.963 1656 196.037 1655.01 cv
199.032 1660.46 202.64 1665.1 207.357 1668.29 cv
210.783 1670.7 214.916 1672.53 219.059 1673.64 cv
223.355 1674.7 227.97 1674.95 233.008 1674.93 cv
228.885 1677.85 223.689 1679.29 218.386 1679.18 cv
217.365 1679.18 216.303 1679.03 215.241 1678.88 cv
217.762 1683.14 220.601 1686.59 224.236 1689.04 cv
226.76 1690.89 229.89 1692.29 232.971 1693.24 cv
236.206 1694.15 239.755 1694.61 243.797 1694.82 cv
240.685 1697.44 236.54 1698.74 232.299 1698.79 cv
231.053 1698.81 229.698 1698.67 228.511 1698.42 cv
229.16 1699.14 229.878 1699.88 230.611 1700.54 cv
230.791 1700.72 230.9 1700.9 231.025 1700.99 cv
234.057 1703.54 237.139 1705.51 240.539 1706.67 cv
243.52 1707.75 246.846 1708.23 250.119 1708.28 cv
253.463 1708.33 257.011 1707.78 260.912 1706.93 cv
258.673 1710.25 255.017 1712.68 250.986 1713.79 cv
249.666 1714.16 248.306 1714.38 246.905 1714.45 cv
250.058 1717.46 253.29 1719.75 256.87 1721.1 cv
259.751 1722.3 263.115 1722.94 266.36 1723.12 cv
269.688 1723.25 273.276 1722.85 277.218 1722.15 cv
274.783 1725.36 271.158 1727.65 267.003 1728.66 cv
265.543 1729 264.128 1729.14 262.657 1729.19 cv
267.534 1731.98 272.155 1733.92 276.88 1734.34 cv
280.011 1734.72 283.359 1734.41 286.573 1733.71 cv
289.802 1732.94 293.149 1731.61 296.741 1729.82 cv
295.279 1733.6 292.412 1736.78 288.676 1738.9 cv
285.378 1740.68 281.771 1741.51 278.049 1741.52 cv
282.363 1744.56 286.505 1746.68 290.932 1747.48 cv
294.002 1748.13 297.431 1748.13 300.655 1747.73 cv
303.979 1747.2 307.336 1746.16 311.147 1744.71 cv
309.352 1748.34 306.165 1751.31 302.294 1753.04 cv
300.999 1753.64 299.679 1754.01 298.374 1754.32 cv
303.653 1756.25 308.399 1757.26 313.092 1756.8 cv
316.202 1756.59 319.46 1755.68 322.429 1754.42 cv
325.498 1753.03 328.546 1751.05 331.752 1748.67 cv
331.044 1752.68 328.73 1756.34 325.449 1759.07 cv
322.153 1761.87 318.102 1763.42 313.687 1763.93 cv
313.1 1763.95 312.581 1763.99 312.008 1763.94 cv
317.244 1767.1 322.169 1769.32 327.257 1769.75 cv
330.402 1770.05 333.766 1769.67 336.979 1768.97 cv
340.209 1768.2 343.501 1766.79 347.093 1765 cv
345.701 1768.79 342.818 1772.04 339.098 1774.09 cv
337.857 1774.78 336.633 1775.39 335.312 1775.77 cv
339.092 1777.89 342.796 1779.33 346.639 1779.79 cv
349.684 1780.22 353.087 1780 356.341 1779.45 cv
359.625 1778.76 362.957 1777.51 366.604 1775.8 cv
365.073 1779.56 362.065 1782.71 358.235 1784.6 cv
356.925 1785.27 355.575 1785.78 354.185 1786.14 cv
359.593 1787.8 364.468 1788.55 369.222 1787.81 cv
372.306 1787.38 375.54 1786.24 378.468 1784.83 cv
381.427 1783.27 384.365 1781.12 387.393 1778.56 cv
386.978 1782.56 384.843 1786.41 381.742 1789.32 cv
378.993 1791.94 375.641 1793.63 371.894 1794.44 cv
376.895 1796.31 381.47 1797.43 386.065 1797.1 cv
389.16 1796.96 392.473 1796.13 395.567 1794.97 cv
398.621 1793.65 401.708 1791.83 404.971 1789.53 cv
404.122 1793.51 401.752 1797.09 398.417 1799.73 cv
397.018 1800.82 395.509 1801.74 393.919 1802.35 cv
395.215 1802.77 396.596 1803.14 398.117 1803.54 cv
400.703 1803.72 403.14 1803.59 405.511 1803.07 cv
408.556 1802.48 411.68 1801.18 414.498 1799.59 cv
417.418 1797.88 420.176 1795.55 423.093 1792.81 cv
422.818 1796.84 420.963 1800.75 418.041 1803.85 cv
417.09 1804.88 416.03 1805.75 414.914 1806.54 cv
419.17 1807.44 423.112 1807.77 426.914 1807.05 cv
430 1806.62 433.177 1805.4 436.052 1803.89 cv
439.025 1802.27 441.824 1800.09 444.866 1797.46 cv
444.521 1801.47 442.526 1805.35 439.479 1808.35 cv
438.458 1809.37 437.258 1810.21 436.072 1810.98 cv
441.7 1810.94 446.593 1810.23 450.916 1808.09 cv
453.746 1806.79 456.5 1804.83 458.879 1802.56 cv
461.274 1800.23 463.355 1797.31 465.595 1794 cv
466.286 1797.94 465.447 1802.21 463.273 1805.91 cv
461.413 1809.16 458.734 1811.8 455.477 1813.73 cv
460.734 1814.05 465.469 1813.74 469.688 1812.09 cv
472.612 1811.04 475.531 1809.32 478.161 1807.26 cv
480.72 1805.18 483.12 1802.48 485.608 1799.36 cv
485.921 1803.37 484.68 1807.48 482.256 1810.98 cv
480.673 1813.27 478.661 1815.17 476.39 1816.58 cv
483.108 1816.56 488.814 1815.8 493.745 1813.21 cv
496.52 1811.83 499.219 1809.78 501.544 1807.43 cv
503.884 1805.01 505.894 1802.08 508.008 1798.67 cv
508.349 1800.89 508.757 1805.79 506.106 1810.67 cv
505.337 1812.08 504.454 1813.23 503.613 1814.15 cv
509.001 1813.61 516.216 1812.62 524.588 1810.64 cv
538.456 1807.37 551.909 1802.28 563.798 1794.33 cv
566.489 1792.53 569.078 1790.6 571.616 1788.59 cv
572.886 1787.58 574.158 1786.58 575.429 1785.57 cv
576.087 1785.05 578.635 1782.37 579.396 1782.43 cv
568.778 1781.62 558.947 1776.65 551.998 1768.59 cv
cp
f
646.038 1768.59 mo
648.724 1765.47 651.526 1761.94 654.315 1758.01 cv
666.996 1740.13 668.145 1731.48 682.068 1702.05 cv
688.592 1688.25 696.163 1674.99 706.6 1663.76 cv
721.128 1648.13 739.747 1644.08 745.993 1642.34 cv
757.165 1639.22 761.757 1640.08 780.856 1637.94 cv
798.721 1635.93 813.112 1633.11 822.54 1631.03 cv
896.287 1615.84 970.035 1600.65 1043.78 1585.47 cv
1041.37 1590.58 1038.72 1596.62 1035.55 1602.98 cv
1035.46 1603.22 1035.4 1603.31 1035.29 1603.48 cv
1032.31 1607.98 1028.7 1611.89 1024.31 1614.94 cv
1019.68 1618.19 1014.13 1620.54 1008.49 1621.81 cv
1002.7 1623.05 996.597 1623.18 990.139 1622.67 cv
995.667 1626.01 1002.36 1627.64 1009.23 1627.35 cv
1014.49 1627.03 1019.59 1625.65 1024.25 1623.2 cv
1022.01 1627.76 li
1021 1629.51 1019.93 1631.34 1018.78 1633.12 cv
1018.74 1633.27 1018.68 1633.36 1018.56 1633.46 cv
1015.67 1637.72 1012.17 1641.46 1008.03 1644.31 cv
1003.4 1647.56 997.847 1649.91 992.209 1651.19 cv
986.488 1652.41 980.317 1652.56 973.859 1652.04 cv
979.389 1655.38 986.155 1657 992.952 1656.72 cv
996.057 1656.57 999.073 1656 1002 1655.01 cv
999.004 1660.46 995.396 1665.1 990.678 1668.29 cv
987.253 1670.7 983.12 1672.53 978.977 1673.64 cv
974.68 1674.7 970.065 1674.95 965.027 1674.93 cv
969.151 1677.85 974.347 1679.29 979.649 1679.18 cv
980.671 1679.18 981.732 1679.03 982.794 1678.88 cv
980.274 1683.14 977.435 1686.59 973.799 1689.04 cv
971.275 1690.89 968.146 1692.29 965.064 1693.24 cv
961.829 1694.15 958.281 1694.61 954.239 1694.82 cv
957.351 1697.44 961.495 1698.74 965.737 1698.79 cv
966.983 1698.81 968.338 1698.67 969.525 1698.42 cv
968.876 1699.14 968.158 1699.88 967.424 1700.54 cv
967.245 1700.72 967.136 1700.9 967.011 1700.99 cv
963.979 1703.54 960.896 1705.51 957.497 1706.67 cv
954.516 1707.75 951.191 1708.23 947.917 1708.28 cv
944.572 1708.33 941.025 1707.78 937.124 1706.93 cv
939.362 1710.25 943.019 1712.68 947.049 1713.79 cv
948.37 1714.16 949.73 1714.38 951.13 1714.45 cv
947.978 1717.46 944.747 1719.75 941.166 1721.1 cv
938.285 1722.3 934.92 1722.94 931.676 1723.12 cv
928.348 1723.25 924.759 1722.85 920.818 1722.15 cv
923.252 1725.36 926.878 1727.65 931.033 1728.66 cv
932.493 1729 933.908 1729.14 935.378 1729.19 cv
930.502 1731.98 925.88 1733.92 921.155 1734.34 cv
918.025 1734.72 914.676 1734.41 911.463 1733.71 cv
908.234 1732.94 904.886 1731.61 901.294 1729.82 cv
902.757 1733.6 905.624 1736.78 909.359 1738.9 cv
912.657 1740.68 916.265 1741.51 919.987 1741.52 cv
915.673 1744.56 911.53 1746.68 907.104 1747.48 cv
904.034 1748.13 900.605 1748.13 897.381 1747.73 cv
894.057 1747.2 890.7 1746.16 886.888 1744.71 cv
888.684 1748.34 891.871 1751.31 895.741 1753.04 cv
897.037 1753.64 898.357 1754.01 899.662 1754.32 cv
894.382 1756.25 889.638 1757.26 884.943 1756.8 cv
881.834 1756.59 878.575 1755.68 875.606 1754.42 cv
872.538 1753.03 869.49 1751.05 866.283 1748.67 cv
866.991 1752.68 869.306 1756.34 872.587 1759.07 cv
875.884 1761.87 879.934 1763.42 884.349 1763.93 cv
884.937 1763.95 885.455 1763.99 886.028 1763.94 cv
880.792 1767.1 875.867 1769.32 870.778 1769.75 cv
867.633 1770.05 864.27 1769.67 861.056 1768.97 cv
857.827 1768.2 854.534 1766.79 850.942 1765 cv
852.335 1768.79 855.217 1772.04 858.938 1774.09 cv
860.178 1774.78 861.403 1775.39 862.724 1775.77 cv
858.944 1777.89 855.24 1779.33 851.397 1779.79 cv
848.352 1780.22 844.948 1780 841.695 1779.45 cv
838.411 1778.76 835.079 1777.51 831.432 1775.8 cv
832.964 1779.56 835.971 1782.71 839.8 1784.6 cv
841.111 1785.27 842.461 1785.78 843.851 1786.14 cv
838.442 1787.8 833.567 1788.55 828.814 1787.81 cv
825.729 1787.38 822.496 1786.24 819.567 1784.83 cv
816.609 1783.27 813.67 1781.12 810.644 1778.56 cv
811.058 1782.56 813.192 1786.41 816.294 1789.32 cv
819.042 1791.94 822.395 1793.63 826.142 1794.44 cv
821.141 1796.31 816.565 1797.43 811.971 1797.1 cv
808.876 1796.96 805.563 1796.13 802.469 1794.97 cv
799.415 1793.65 796.327 1791.83 793.065 1789.53 cv
793.914 1793.51 796.283 1797.09 799.619 1799.73 cv
801.019 1800.82 802.528 1801.74 804.116 1802.35 cv
802.82 1802.77 801.44 1803.14 799.919 1803.54 cv
797.333 1803.72 794.896 1803.59 792.524 1803.07 cv
789.479 1802.48 786.356 1801.18 783.537 1799.59 cv
780.618 1797.88 777.86 1795.55 774.942 1792.81 cv
775.217 1796.84 777.073 1800.75 779.995 1803.85 cv
780.946 1804.88 782.006 1805.75 783.122 1806.54 cv
778.865 1807.44 774.923 1807.77 771.121 1807.05 cv
768.037 1806.62 764.859 1805.4 761.984 1803.89 cv
759.011 1802.27 756.212 1800.09 753.169 1797.46 cv
753.515 1801.47 755.509 1805.35 758.556 1808.35 cv
759.577 1809.37 760.777 1810.21 761.963 1810.98 cv
756.336 1810.94 751.443 1810.23 747.12 1808.09 cv
744.29 1806.79 741.536 1804.83 739.156 1802.56 cv
736.762 1800.23 734.681 1797.31 732.441 1794 cv
731.75 1797.94 732.588 1802.21 734.763 1805.91 cv
736.623 1809.16 739.302 1811.8 742.559 1813.73 cv
737.301 1814.05 732.567 1813.74 728.348 1812.09 cv
725.423 1811.04 722.504 1809.32 719.875 1807.26 cv
717.315 1805.18 714.917 1802.48 712.428 1799.36 cv
712.114 1803.37 713.356 1807.48 715.78 1810.98 cv
717.362 1813.27 719.375 1815.17 721.646 1816.58 cv
714.927 1816.56 709.222 1815.8 704.291 1813.21 cv
701.516 1811.83 698.817 1809.78 696.492 1807.43 cv
694.152 1805.01 692.142 1802.08 690.027 1798.67 cv
689.687 1800.89 689.279 1805.79 691.929 1810.67 cv
692.699 1812.08 693.582 1813.23 694.423 1814.15 cv
689.034 1813.61 681.819 1812.62 673.448 1810.64 cv
659.58 1807.37 646.127 1802.28 634.237 1794.33 cv
631.546 1792.53 628.957 1790.6 626.42 1788.59 cv
625.149 1787.58 623.877 1786.58 622.606 1785.57 cv
621.949 1785.05 619.401 1782.37 618.64 1782.43 cv
629.257 1781.62 639.089 1776.65 646.038 1768.59 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (DPR162.eps)
%%CreationDate: 8/9/2020 7:56 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3QlZZ7\,/ch$dYO9'nD&s_Pd.h;[^!XWdV5p1s,mb[iYr:Yt+Z:ZV*qjd(9IIBku?>H66<gq)`DjW'k(Xr=SYL2c$V>L9p
%&&a1)l[cQSf`>)-XFSYtm;N$4\@C-SD2pgPe.Mu^>4`?u2X)=KY9jZ?OmUaJh.CS1)YWLAd4!K4oS9475j$C-05t$AU2R&_X(J9Y
%s*GmEWRbG@R8h"IaL=7UI"0eNNWWl[iC<3c+$LXk;`"K'k'$'ad&!U[F$-<gdFdZsGe0C<:J%\dht#$oV2AL#0Q/OKV13Xaf=84>
%+oaFh8&<Mq;%/X<Qu^o$F&3lXa6e>:-<^ocqJVe9$tPj0lD-5%lNtd]d?!=$!(4[+`ri]-paMCB+o":@rD.kTp9_[50.ubo=gsGV
%iFb$@"`ub#WKb@AWpF+C!M'^RrY$@pRglaKMZe/Qc0h6'*B3dr28opL)1)=/?0G8C;cep2AN4iuBNi80'fBA*>IIX#,W*cNh.L=.
%d/9Zpr;1eJY?>^!L[I1#L?!=O002nR:__n17<-(%STL=<ZX.uPA2Cd@OU#mYD_sP_c.N*m:6gmr[nH_Tm89hmT:09LgO<deF'&t*
%doh\Xh.$''-9+o5P8k+%]h8<pQV,J=JuaU!g'LJ.l0o<Hd8P7RJ>8LgTc&/AW8>I?[-mE#$R9q<=?*2k1$eA6rRC8;`sp9"`)U)a
%)0pGYDTqn.;?OB*MoSTF^-@YPa'CRM?p&?#]PRrI+`lk2#UOIm`n\+2,Lc,@3(E\1DUL"*9KN,"pY4@+rf2`#%,B*H_o#?D*bb:%
%nDF628:G29PWBKSEd-0.$js[Ks)7qFS8.\3c+nV254/sGJ/a("g'`=b#*s0b<P?pVj]9jpO"'-36]l42Ql6:.AuPJg+MZ8TpBr^&
%:rd4$g'u`UZ=rUhI#2Tb&H-$W7'g;X+MXacq'5jm_S<j2Sj]2-e80Y>9i:"uYV&S:Xj%F0M!f/4r\ZS0RJp<75`V,qrR(!(#FOEG
%0i76p!Z0DGi&>F#FfN.?0Yh&n&!mp'LPa<BjrTQOYUh:I%g*pC&0K3iZpHTjZ2Fp0VFhj!X(@Js%-Yq1+mq/B_N,^b?i=`>lM-c@
%9XE=frQbcq/GUD%#6,TJs!\E<<52R=q9Nr\heA._]Ir0G`D:heJj/4=;g!daRBB[&76e)V"FP56jO3f@"(-l"9]UFt<VF3TFgoUl
%BJItirK=nTk-0'bPCsuP7aHWX^YejZ'3j"!)M"gG18%,@k"9TcU!1SinO\gbO:1pb`X\l:s.ub4Y3*,kQNL6u5T]Fp?bO)J9XW>`
%57OZGkB?f2])gH[D`sYlq(/K4Y2.Pu_UHQ_DXNGUr^pVL=]4,F;Ks2Ldp2h(OunCeOZW7NNpc-^QR&a$[licJ8h*(@I@0U*W.hg_
%-]i,N$,:jr$GYt,rd/cmIh!1I[:+41DZ4$g^soK0O)T?:4DBkG&seB"ZKRm"G=a!\L[O1fQO>B^\pY!WpC05hL@IOudLRG[nQu8h
%M,8Kr&jT2`-4,&jYigii4!)h7d@\,]Hn244o_4#Pq!m[XBHZ7d#T.i)3WFi9IAKQ7_cJA,GOQ5EE^e'3_B8]R9!@Gc^O/P##PW*5
%B;\>X`7dM\s7[Ra$EV]kaO)=pZ[bIq@MJOCiH:=kZUiFoii]8iD4,Uq^tMYngC1138EDaTU<Vq!9&LP9q7Yn5.U#U30Ch+<pg+9U
%E_K]t*u'u&=7V=b@I!8jQRP&T\\OP]imU*ioKmDE-ZTA#"#kErT^au;P(r'Y)RL2JZ@S"MrE!Bdi')VJbnIp@>Q:+GV.tdUZ)6;G
%WV643s"j0PVU":1P4lX$Eg5k]-U$5'FKPQ_$P_?jnUKTO58$p*o\\_&Tu\l5FN%)VQe+ub]l3ja#'XihkTX4O'>H+_XEb958pkI,
%&Q#D9s)]24%uWsV7e;PA2Zh2&k]V:%+\o%bfWIrg:%C_R\T;LFXSsjnk$Ks'Y@%7=h.[:e4h$ar==Xr^VI/AenXjc?q<R-5DtNNh
%FZA(td4`rW]r1\?IoJLnBkMfJqP%J\oS2,H?-R'^j8\hKlLfMKhb^<$YJ2t7^ESlnFnIt.K=*U-Pf7Q!8N]phNfSED^Y#L"qnJ:C
%roZZ]h\5*qUhEhFS`[+$j#8@as#MD&o1EHiO5HuAo_m*DGjMb#)3+OLrrD`dDe7>h;&*aS2O*:lpRM)p6>ebQo:NF^s0G+=eGB&l
%!.Y#eTZK]pG5_F\29s=V[F8`qo?EU$hJS:EIs'mkci49qN>1K8>C17rT:UP/>,GU*,<"^3nUK9LT>0+5TDp@0E[qiQg=8E:Vgn\5
%G"!l.h=#j&T3?_<n=nQONFfQo=53WId!lIe?kli4:PSNh=.oJ(5RF`8rt4S\2TO>P@B=sp@\!Jg@_rR5;"?-.oC\\fm8QB-5\\jj
%22?Z<"-r"5`Z4oZf%Q\gfMaH?e83B8EN7qcBJS,p+4Urq9AFE^@;*ZfRhM_1a0gA=fEg!;E(:&&L<V.NIdB1e]$<N`Xj-'=W4H_n
%h,j7YqdW_-Ee!HB>D)^Vh`JN(%c_!*2]>YP2<o\>N9s)B1o%!)4!l=/W",7`qR/KME;@u'5'3%G3="954t;P*>tt%i^[M-TldoM@
%P;01iEuh<RC0]S#2snT=MWO6%0k_rkcVa):8+.=52!C"XpZkjMY9'c"4X2_\2B"@U:)*i0ag`EPXcCEGi>dPV;UT`cYsY[n#o'GR
%Vb-Q\)(>._dnS)_jg.J4)BY\0bJZBu$Yi?i#nH""3I78L7TQ;/b+CkEi-7!u&:K%WA9p@MTJ^"L[5Vt.Ln*#C-QNq/7lnO_]@RIM
%8Wl5:+j>V&:jdTK2-%^n3ZW/-kKVrk7<deN0*`SYL],i(EAHnF7XaqRW3^e0"n9\5@m![PhfOTASEh]>=N8-T=8b@P_Z@WsUQ=3g
%Ipg>cO8m%]97^9S;si+"&[AlZlCIX!KGK%05=fKNTt9_D\KLmA`j+d/[G3tNrS\UMAnj_-1cf=Lq:25^)O?YADE,5(RYId[r_o;#
%0']2[Q7_<Ir6O!8YHk*nAsg/IB\_"ebGVCSl.XP4;9CA\?D^ILc+5ktZ;-BWasVMK?@U2s3[u,7`UjO!`d3-eBJr'->%$`r5G%o3
%;\VY]N0L@X$e\<N_3bO?WVqliL\R[aASo2N`aaS-)2MH8N"U4@387b\oU].@FmKARHI\K[S%0a37smdcA^dR854/&]<m18Kg4'MD
%o1[94Ib&?qI'58XnO;'-%pcs6=RYuTNlF8B+hm=lV>l=R,X(&2$B<%4D9b%ff!@T>pODH_H>a<XoOpo\Z+,p1Gd"7Y2'H;bLePR1
%<F+1WPGQK)6?4\t.SoL[lcn+A&'GhKL8+n11K"aCT=VEW^%rEITC/QYKj;V3NbQM`K_T![okn4mm'k]>k'*mULNh;)B_9PhdWf%!
%PTT8TLXBY:p#gd(.$SXnc5Vip^-@'a%_lA?f<sK6dfU3Ik<6p`1u#_4Aq'!r'".GC>9/)<4J0^h;ti.8kLaVC>HNR#lo`YkAcHXj
%pcA8us0LP+%mLph8MR+4ETH.k0s*ppAq`u.@e)#,VU`<@=$0-#Y1$p`l@V0j/SI!/,T<s,TC)(=Cd&pWh;*NDRJ<ZJTE.gRoR=Q4
%60$!_-!SZ@I]E/J_g1tSoJie540OEO*$_/+HI10l+&]FfOg)Uc3#A3m'@u?J6QOpkKTYI0:7?>ap$Xu'qjnieCbqdbd!Ot`Lo)K:
%%ni>Ni+6$sBNXl;Q.;bo;kO'S0.t=eorTBJ/X0?//$$P$?s0S)pB`aMA*`len9(qF,PYk)P/C/gkC1bGqgDF6kf1?o&*g+@*4;Db
%IY[AJm=q2`Bf.hcoBhq#dr-DDm8tB#Q2%JSU%](@YML/n%EV[W4Hr-\ick8bf.$^&iEDF8*p_;C_a^@bCu[.t%u:KS>6J<)qnp02
%dJ9NkTKd2kA0U*Q:PnOcd-]oU:;uCp'AZ.NC8X'4mDk6:r34XIIF+tnq2NgdSa*o9\(jZJ`pM%kPl"pVFC^s-i"tHn4+=X>[Z<Wt
%.IK)\h:&habh]',n;5.DI>R.-mI<l+&utJud3lO,fD1sqqSqOpe>YXuItt8=c[^+Z]@Zlh4``it[tO$rOpj?(i`NVRE:hrec3"lT
%_>6UhZ%$+FFnQcU?Q^uY8q,07[ZY!>p93O53GS6,M+6Y5r?jZ9L9:HqR)]#PUIf;PPM0ZI7D<U0O(RQ:5VjUk$W$VGQakXpWZk(,
%I4r+TKUPCqn.7XDn`fiN&8hmp<M1eEB)liK04"R\/Wpou,s2"rPH=omY)\"s2'e=p8'O5a4+H.1o\(@J@HtOTErn-BgZa*dE4@,B
%XaN;,Bg?V2UJFIphli_Oh+q_C%la7ZZhR^sh;_TSm+o]12[u0*Plo(qUN)Ui^5Ir!Y/r2IJb5:[3-RVHgfTu&9RP6e4;X4ZfIql%
%?H.ufS^,4GrXBHjl*NYXP^UASoM-RRS!oCqpund`;MFS]bWUDJANAQ?7%W`923#0$2^G!P.Y@Jgm.B1V%_T1;Ne&Eg?D(VJh]5`:
%^l!M(</18,`rg^?61:csBTsFXV`9t8iMlX`,`DTLPKCjo0q0M3h9R%H\>kJu"anG([<1/%Yc2Z?:p>p1.G4p_(0CtLK=Qh;g.sp9
%YI:pJm+V!$Z]VFD%_'mJemZ(eD&`_3_[@b-dJ$D"lc7,Pe'9&lrad0Y9qLs=h;[@r^]"QEUQ=)9E+LI4$nh"(BNX";k)TJ1rK!f^
%Wla3k6-p,M6[Yu2XLkA?rNLN5Itd7FFL&G-<topL#:"MCpD0SIQBq;Um]g*Na2\YgR+CV`*IKu8SL`=bFaU:^a-;"H%HrT/&-h#c
%fqk#Nr=n))`sPPI]9GjgdYAS0$D$T;^)h"\e*7MdcXkh*ar3J7;N5MP1d7WUie"qiB:?^sHp#<eGj]SKD&GQ;kqC(JX3\0sJ!@Qb
%BPjWoSTW"d>'F2#RFgTZ3EN70U&8MGP"KE,SJ<`i(,)L6Dkk:!0"mtl]pJ2.[>":CChma'0mbV%m[7f`:Y^<['8WL%_.PW0cjnUm
%_Tf[_GV2bkqC=='(a_su^\q\Di`F`H/f7Bf4a4AFhO2aNpkK@u7sNU*O)X4R=uQ5k>o42s_BI8ep:uZ4SD*^OX%N]leGe1q3eu:+
%7)oi1:#U3&@#LF"I8\q,[G.I0fM,^YT;G@&4-=W&/ZeQ$Q4m&4pTa)YlW,Xd^KfGdhjTVjfCd-uo'NHJp2SSufOOCi7eVt;&UAdt
%Fo+sur+<Z^CmkV%o1XLHD`sCJ/;iNC:>LfhMYSJq>F<q?qJ5J@ru`05*Y0ih9"k2r<-^@SbI!l[\5$ITDmpD5k%MfX?+9ChjSI9I
%le4WTVH_jqEV=95LDtrphJo]qXA2Xu=5apck=[?HG><%]KgoL-L.c`R*A-)%(2K5D2JQs*@D*dmYKe-k-$6FgEu4_Qng*uM9BXgU
%DFt>tZ".IGQEoP-:pq+Re["GW_sR1'l^m<IbfkP?_bh!VL=b_H@&U@)&e&A*FCO*8-5bOk+(M,jpV<LRGG/F:kjg=8ZL4eJZcggo
%0!=h!hr.Kn^YH;`^W_U\-^G`@T58li#EoB;_,0314W%MM*X*A0==q$rOVC<oNq"<Wi6o3B)dM7ag]XC_E^.'SY`T42:."4'lM:C(
%0RfL<#psEWBQ3@<]bOMXV3@Ph=j<TT*\RZ(adF#',+JHqF#A=e[)Bj9BI==uTTe"%K'R'cqqsr7Ddrs[+r=:!H[GcP\9#CW'MS3g
%/=9aNaTaO[iJ1en10b+I95hr1hW!HO=?%@TK*Up<.Tic)4p6pi@aSR4@MXPC[8]4i/fa/m1Ze0YGWpBZ"Y]bR\`!.ueha26]f`WQ
%pEuNdi+'`.%G&g#bJD3[?m40;C_q`MrTZB;)H$3[h=[hX@/i3k)gn\n]EQ?Vl<Yl@W(o\<62E8L8V\Oajlagn:b8rJK]8cGa,k=D
%h$@`SYY3GuN0j59OF=LC*84N`h1iA)Wgf^CnEMTiGs3g8o(NB8W,Pi%KSm6ca._P5TcQ8^SFf-\j7>n,8tgfR;k6bKTcAFce[dS[
%CSRPWg1N6-2a"SX%8(dEdu9X=b]'LC>R3jlS`at!?+UB_bN<,5BNKB0LhO&th5u^SRu\MjE:WY_3h/@e57[.IQ$g)dn[]Gfh4Eih
%b0*gJHkhYoL$tNt-sS?(LZ.Ao\Joup%piq<E:5XT*$.OH:CElVS^t[+C?B4RG/*peTPPU\//Z40mXfNWn@#QL0F0:AZ=7NV:J8YC
%%V$<p_Wg?!CZ-JB^:S?rG$\@NY(pp2>)*@/$a5VdahhGuRog):9X\W'`Q7.<EA9@S\m6"?e_[#\:;mu-O!<>:Br+g9gjMA3?9C@&
%MCt3s6uqfI1qm5-n%?@d2I>,"ilf5LBlVM"G9apn<KA]E2GPHQ89YWmXjBOJ]d.J>a`_EeVMXZ.k6I-ebL^'r&m=%J>bCB6,#tJA
%8"Q0h9r+,h844fpkf$G1F:hl;2qK[Ko^f]5d`0DKm8EeRY:gWNbDi@HmIniR7=0<aF?b%7>\][.Z))?Cn?=`u:$t7c/o>M1QP1t6
%EnPQYp#W:lHb>llDd4n:P)`eMoZE<XgY6Ik\Zn@I/pGa$\NEV/KVD-(Aj*_kM3Xf9Z+(h1\K<,l]5QA"[$5fP6ne9j(X^9Pn0$HA
%Y$d^^>K8X&(:.qaPsj[[]OK`/hc=poo[f?kD5"L\''WJ!Y56E?'lnV<='jX*2_3qf_bD[#ICb?9G5i_oYnsFZZB%U.G-m_*`%DNQ
%LTtT-Zl"-MZkK]akS,[g=^?I^VcVDriFm?ihS34<NUlJej8(1:H?E<;<pPfMDRE\q]nhGiQ.L8.EB=rFf&N`SlKIUZIaDg%j6$OK
%j,^YcL[j!7l#V7CFKHftl'oSD)6%`kal`]%8K=6R?R3pTRgY)<_:`.hZet)ML%_q![J9!#D9ZsONO?u@msaYKIB9PVTC(O>&N^nH
%Dl*?"ZFl^]<4'"$X0Q57o?.'B'NWMOZ56.#KKs43-5MMnjW[DD`)1VNCmCdAU/4i"`ED(r787=hU:42b<u9cJ.952-MQ,A/>Xpru
%gg@%I.u@Q>d4AMe>;<dd7C2*IB'Rc6/Rpo7BdG:CYMD2H8aWALAF#qIA%W+<?Q3WeqUVMYdJ'hR+oQFm@B;Dk(.S-k>8S6_f9NW"
%>Z`.Z2j7B$cIS#N7QpaH(iQH*QFX;ahD&m;\7asQCLshm>(//@S`Pn-k$1?VQ!<(OS7j,X$b(J4E+tk]X05Q6fO(mQ%2bSPisU3T
%Df9#*ACA&;]tJDr[h"WT:A?fJ3bn8ZjJ4$`"6Us(]]hO:(J+,ac.2KPp=7:]H9N#gosM-<IarfeXLB]a=dir4iLnZWcni<0NGNcP
%Zr+s%'fR$Iqb%mgWcGAD/;K50AEK`%=aI4e2QQOgFRuVWrO<U"\]S`*Y;DtX8(Hf!f#.=#_:E#Od'd#"%u/hCg"P9UdD8F`qr.A_
%/?h9N%jF+*Gij-]qe15`F$(k:G,kAgm*9QHFcpO\]5,NQV(F":bDX2IU\d)C"n1nd;d/jkS]WgmSl-A#(Tl31;Y<&`[/'Q]G"sC?
%oYEd1VXN!GiUgM[O3oeP`6jI.8ZB\r9R/bWca7H!kLkR48L&!k+-!T'a,*4Xmc$6l*BYC/F)-p*FtRX87!!"M_,RSNd_3dV?+c-e
%)f*bpri#X=QEM<i8%ZV1kglmK\*nMKd3D>kHad*AgjP)LLO4o"OP.gCL9GrjcaiGVmRlZAYZa'>/u55hQbqEM4]?TFG),tBM0cPD
%h$h?tbE_8&rTEe7p;-=ic0/R$qYpDCr!eFGB7!lg[YIr'XToS"=Gu:;e4T9,r9!)p.Y?i=g[0+FY]A;q%q!a(_5!CjoR)lYF#QT*
%7el2G]6Tl/:)rCTNjJJ;H@-BpX<,.<?C+:LF#@2Pm+b?.&**QW8arl?3O/2Sd)iQ!]L^MAZsmY>FEt!aSF1&Df'0`Y[WC.c3nl<k
%2'Zbqh6k^8q>N?7W!#JsZ&2i?frUFhQ]EXmj&YP`V1'IL9A^_jT3[eI-YL?>`p:0T^Eq/9T=5?W>ER^a75S;i)ndk%:T^s]CO7dX
%0l1^i0$V)AQcnFAo#Be?lXB`Ap:+L9AadoZ=*HU'I3#Dt>M&2e`LZ>;l?`KARu8&#6u0/MF.b\Ph_ab:gUGS4HLNi!fY5)5XUV`-
%Jp3%W9lmd`ZsL@+4"2!7qN[(`Y?0!<rGh><Fl0W.c5mU2B=Wf7ZEPD8Qd;qWW*YiRApWJ0nc!-*Y:^N(\(.&1q*js;=XmK#L!iP0
%j0VdcSN"he[GaaFZu-tFcY8hoGpI:mrI[GE@BMf-1f!>YYgGVKM)P$T`FtRGY1(WjB&g7pmCh%S`tt)+enZe84_^osGWIHI*hH\.
%rSY#*dbB"!X`_s^40QP1>JH/8ZqnuuDq_n",(Sp9=fN9Eb."YDbM]A(p$+q+NS!c<b'G)A%'#lCgkjjtRYYQ7FP5L<-9'-(m_,(H
%mk$+Q9>0,D\F%huPcaqbPo08ipU#kXF)?8FTIS"@6)jeO39\D7q_ZQerO?^W>nj<4@8KTRLWRKjq=%h3g)WTu>L*8^4UYtPin7qS
%:A7iK6Ol1koC$5Z^O\_cgETPYF=%tQmgnU<!VGj,]#3V_Ab-G&qBrcPop`alf,&?j/'N_H56e@T`iXWX:@PjWX/#2RZ\B:!rM'%#
%oB?hVnR!s/e/(Ms?Qp]O^Z<('acu7FR\l%'q;@>#W6b%VnpO1"c;%HSQYa2#$8Q_\]7LIc%2PcgY9KGHb[0ZlI6e1S5K4.#iFhoH
%:Zs%\#@mO8^#j\?M'8booM>!R+s>cHp"^f#Sh'*SNWWn)mMj7IMNOO_[i4bLl:,hrbV*MSI#"Em?7Vq#0BuGJ:Kk?]fdBVocFLIu
%!QA:9oZ]\j?<-0ZNZ<!*J@u'Xl43S$hn+6&YZutAB7j4Y<2Wsl?8"4-STc7/(%;f@T5Dm2Po%I;dG.+feY5_h0OOH+*Huf8hGI"&
%;LGO<*edq/.@5lX!BrEuO/L+hYNbSpqZHN_PQ+>POMBh%s1uoc&,<^-q;cXDd/8V[oc5WP6PEh*9B^XLMJR?5+1;FRT^"Hc.-"p9
%;T!EOOE4SRrDR!f\!6Hng1sZChrSUdJLeW]pRfog`EBA7M`']l%_!_Mq_b<m%Fr:&g@ID+9lg`XfGVFY1d+J;In)1q"A`CJ\(/>n
%_tKAlSbBDriR8.eJ"iV5o@d>c[>4]e^]$@^GFR:bhg=qNoZ&BYGD=X"2tZ>I>aQ[Xbu=r=g.]-S""ebjh-p!&fbt@S^$3@\]7KOK
%2JS9DrSI;`q>0Ojkh@Tj.]KE9Q\Te4Q9X66p_4RdGq-P_/AL,aZVcpMOVNB5aL=RT<iY1lja#:Vor@D>\!`ksP*omZIAHkBAE1AQ
%?MM^]^/n*n`A@I!_d=>SUIla8Wr<J8^40TeGeR75,cI>Uh"Rj2Q.7%-qNghh4iC<FE:$l$A;lc@htt=CT/E#t?!i>e^II\dV12\1
%mMG0A`qWQaWET>VJq]UPF*T5F\`16sBmcVHIs:GGhcsXi:?LbeRFI`kT^V^7F*[Q?G^aokk4>VZTBj*"2#HH<lL_hAO+de+Sp%15
%D,pC5PWG43ICCD#oa=Fca`]o<V#Dk`ohV.,S9[`WL](D!/Dl?`Ws-7:%j+jMcQ1BVSc$b&Hp@hL:`"$<6Ea.=pm6<rkK@[+=mRfP
%iL_@@4N..uDVgr-GI7J?Fk,sK*.GBYcestI'>K;6]^g7`ij2675?=[>c<WU4JhfPqH/&ZVdst=HAu9"&hc)Z#43*JQf]L0(dRNnM
%F^L%Ha4&/hDYJGTW>F@9#?R7Y1@8gcZs]Kmjim4?nn`OI:u>D/hC]fqLQf<7c`)]nU<rS;U5ZB2fr%h]+h;Tb=@mD5%S"RfJ\">"
%,WCUsU"=(0S:90R.4."HAi\>sg9,'%M5@*\EtoWq1ng2Z0<SO2]Ar8$?!>"'YGSo0i[@eTO.Tq:ApBKbl3eEmQd4"_9p9ECqmB3i
%>HjW`Fae@PS#U!3k?lR#n$db4gjIB(-.bYDDCiE236<iB2HhpHdjtGh_OPK!?!'X&?`pldcf<6UFY2`(nefL"7I_t?\[-B$#GOYJ
%1A=T=IJPD`L?*P4*OfAk;WW/5-Ppc*D+nU]k@HYScde#=jik(1Yd'U"e0;0idHVs^hIlXXF0`*"^)qg\W7S)Rpo,:W[>N:NC8%_/
%X^QS8EP6e8hahr,GF%7+f^0qa/4\R$JS9(6ru'?"k/R4&1=`EYF^nX2)f&LKG,mcmJR95B+m[h[d5b(L>&%4WRaP;VB@a))aPq/S
%3PO3@GH=\Dmbt1UR*67&_\]j`a$AWH>IZE*gK(2$+58nrgoRQan/[S%h-6[,D4<%a*6X=e@@m*VWpTFoe;V!JHJU&"i\#VG?)qj4
%o"iuO&C[$Aigr[!/i8Pc$Pdd_&DPKK\j(%<j:5`#b\HQCNi$-^"leH5-+:LX>?/!k:L!6P(L*@JNL-De50`>LBtWK5iCu\QdehK>
%gs)--QFBW:X/U00&PQgZR+s*Sd*6@tV4O\t?Xh^>g;.!r>$Y<&S$fSdc+WJ]G,k+<+/_^=ots`te\D58lg?5r%lLM2Q]F4l.?u1M
%c>i1KlYJDiP8N_5LN_4o[`Z,bPEa(h7Ut33N=1#((n%8C4c%a9>//k=-\oV&1O]5k@Y[b$2VLN^:2jc%QL6j/n#8=^F[,+R;TZhq
%:rm^s[O02nCe(:dI:JiIg/ZjITP_$d:Ms.OTi>TQ4S_OmGGj[M]m'=>_][Z0`2(-og8XhBR[cF`r,Q<ZbrhJnf=@?U\WUe>LT=%R
%['_VoM584W*6$a`_nKNMgPeAZ+gM?0CuN@5\lq@jWa1)>*i+hbdtd`mCYr126*69q1qHbi8O#4jh/p]m\sNqENf.,nl+K]6leNa]
%(8G4pO0cI%MbTZ+A<X')Ph,\"s5SF_pT)b=X5i#%W9-(E%K5K29f<?RIOikg[7s\mnXG[[%2\_Mqq>_d8%KtpVbo/$@;K`ZHJb4b
%l'?F[7c,g6=*DUpNGbco\=[&BD_:/6!3N(\1K?I%5:+W+Kk`eaT3Tf$RkZ454/L"@\(X&Eo+?'BOq)s#jQ`pe&T7jhPYP5Yl,_+I
%O`]^9;X1VF=Rl,IWU>lu>gfb'kESI#i2YR"%W\Go]abRpMA8.s']1BLc@i8eZE;X)rL?G=c0$1C_.VU1.H"Nr7*DOBqpo6XFEj@_
%4MJj;aK4h'F/tT&((p,uJjfNW+h#'qCAb2<:XqXC?unVUWFQMLp>YnmS.Xk$GrJML4k[SjQs<=/p6>d+lXhKB)gg`/VOfoRX]_L6
%X&Jq=7U3X7X[RgL.K$QJ1i)n-bD;K7C38D\bMVktB('I.Pbp`fL-O$P8q-K0W81P(EjX>nZYS:3.+(QDi3*T)Ms&?*;(^b1',osr
%,Bbl^'KpW*(9>Ur9YHH`c;I35QhCn>B\qYjVa&:;G_'m<jl5ujr*jgE3/MXaGs[Iuc(e^G1=%ZQG*BP2&qN+15csL"FAR-,$&CJS
%9N/r#:3[]MiFXN7MnYGIA&8p@-S`O/N(R#8-FjNN%DLlMQo;t=lg"#)EnfGUfd"$>RN]W`cK<0s\_.D(:4?[KfHs>abN5Y+LqPfp
%D/IUZO(Z78r+p)u`FFICqtkDT39_W:.sVF/iur&>k5hM5H8*Znpn^:S6#LDZKfkI+E]IZN3fSNW=34rk5E>uWG,>@PAp^@gYhg":
%S]s%d\7D_pDEd$$\bm>3DU1_ogC<b6:RlAJnlVb?qbP>T9L*3#G$,qP:ZNPQo9<hJ2W((>O'g["\\t%g65%+EBLtiNe<C?U-G`d\
%5K+*kVp(6mWgt/s"lp:[j/T)_D9loO-1BRj:>^E8V(`Zh@N%"Ujk1?3r13\'4im23B%+s`BZ^qA]H#?=U[3qo?ST*%9<$AcOXi4O
%QQ/-LTV!Mi2p[tBI/kk[M<B*:fR8R:O6OXD^6:&Gk\5V3JRtE#>%CoF1q(Sp7Q@ARlEp5+5S3]unBRc).d%%")F_=,0((n77i9FH
%%mWia(,tgqj2su76R`1K\b"!-cd]rNArm7XLC_#0GO565fo;+2Ma0VQk=Z/;r2YIW\O6udHLmR!8(6t5XGuOT5,GqFm'GS)^SMc/
%1j4@UZ#]BbQC^7lH.2`@U`Z&)dpDi$<?;sf\QEigH2cP.9p8@6MZ_953fVE)7QEipVXg$6cD4*3&D3PK%=-1uMt;;g!?u<SIWijT
%_<q59G(7$mpt6K5A+-R^3k./[G1UoGpprOJD@Ts.=u=]]/8c,":FG\#VZUHc7I\(bF>0.pS_Z.6ZE9<fH*(A`+YM$QAYa7;WM,f*
%c5Qka3WJJJcC;kQEcWugE1&c4B4!841@5m!D55WeHm0iM,)@T#Nt>+Q[*cnqj"hh@@d\:"mc/!\*C#@Wq5l1>5OjC$CjtOSH%(jc
%16#d[B:n22*BD#o[f&aAnouVT*4s@p[C<Wrh=DgO_'tn:C<h*N,lpQtBE%cJj[slI">m.p7aRnY);f"%hb'[PKK?gX?;P0:Er8TF
%8pd-#RC=s?Wq_V(H#4U5BM4=erpaFOamNJ<Xn6BcLYjtgW4Vobqf,D`dG*![.W<nYPAKP9``ek55pIaGOhGO46Utmqqp!2456:<P
%-t66Vrba$Pch/WGlCub8R0>KM(Y3J?X'XRWT9PMGS#bt>)jcps/Z):'b3/S:[,HEfj8"-,orls4UfLBN#IVCl[soJP;6O?ERHN>_
%H>Is&iPFQX]*+[5iZS2G(aD8@e=$^43eBcokuW!XaBs0#4UkgJl]#dPJZ1X2c*+mBeGM+$]5H-qftX*3PMead,dqc#IIh'L=NQPT
%Wt9Qhcb]F*_0W!$]8[UfS#rBQ4:=3VF4aZfW(esP97F/;4IYb24"$h2Bc8b:S]/`"pFm/djMokN_AD62ND=/^2(?57.VI9^(kU#f
%H:Q*7-8euS?@8cRhZmMY:;5W^8hZ*:^Sr(ILP!GC4%\"8<q-DL<m=Sh>LT)'R2E99q,EN*Mh*-<h;k?-c:1!5>cY-sX1OXX6[f]=
%5ciFo:\_p]qBS(,I!G?U\j+:`:)e2eDD\b('f2*CA_c2jZ!_tKeo,3Q/iSq78XJr4B@`ZDpQ)!4aBd_AG0<m`(L%*&^RFR3D]<b"
%j@E&g:UFo3p$!k@>;9?rpu@>1^eNrXp^P!62S";,f%t*-eXhriQha)-B[S0ITS$0Q'>D#'Aa]*H5%F$S;jMKI@pGof]\^^f#KK7;
%(hU;!Ee@s]HVc^2c'Db.GD[+jIQIqJ#GlX2D,mmDghQk.Otr3"Rp<YVM7u>SDK,8_nWgJ^'=()C8*?jD0aV91pm9T[=T7H'EYs!I
%WRC%bh0StTDUH:-XS<s"1eq7j`&,FJ_CW0/q1jsm[J.#-gM^@Yk,0>Xp9mn<cG%2Y9i?.On<=K2kGrJ>S[;[*G`1aOqbHe>(SXq]
%W3ZN%p(f/BMPiOAV8[(goQk@lY9.*t2[5<;\2h#KpTs4MrlXt@ef0V&gUf(9DQ`#&`OT<tB:@suWfjKAFN4mGMRrZ8:9G\2FBf;r
%Q-BP?iag55rUP\r-[V4AXX)f\0o2>H4Nb%?%S+Y6r*n430e[`,8"&t>.<9O`@^B@TaVO0>V6k]FN^''5I5jc`6oi@Bn*^s]^"`J;
%7E<krpJumumD.L:=@fj*:Z4Ck=s#"FKTk+?+%C$'qd@(+c03%(".4Hl='N9XbU6WU_X'm*Tq$T<8)Qtf-=aNqqj2;n"0!@K^H9`k
%dOWN,LGA0C<N/B<F8W=BR#YBm@r*c9'W(AfmcM0%qZWb]L%C_^*Pod,iA.$2XVfNcVd-FsR`\W.Q?2o`k`=s\D)8;AeqKeYon$nV
%_O$/"H`ND\CtmCZNS8YPDJft;d[csBq.,FrqK6MbT@U24B7!jlqU0#'Fa#XN>o3Oc%CDY89m9nO8*$0#qL/H%PC;*(ID/?I@]Y:*
%ICOH4"0;klGQb>g]df"?#?RYY,P'F%;'XiZ3id=;>:-1rr;&8!`_n,W+.j"7aA,Yg;YS1kqCer!SGc3k[aJK(MN>["I&bX'EE)ZQ
%hf+$br@#!qRlra`>a#._4XnGC3RM$UYGY,_hN;+qP9Hm+R9TL:G1p1@(n?ScFr!;UUJ<71"M-[K@SLAD$DG[*1"om'PcjRKAc+du
%hlGjk/$":"gbV(OW$F[_,73Cj4[V-oqlD>=V#tI4XEuTDQX'GV@;b.m$f.'=I!ZRQB1n$Ar8Ksh4`f"u8o!U+I3t121m/81K3k(:
%9NgIr-:NFXP+1u0oTO"9-*iGrpFUO0BceWQr0l'#dq?5Q;=+i#7Ef=_jh?u,l8>19$$#n.MeU>QZl3d]G`3/j@VNRXa8-q/Im.1I
%f4rITo2>H\AA8`M3UWN:&T0S%Jb)dGeai,[*08(p4.H$-FlM^O0';VY"d06%;;C65R68\?Nh87Ybe%_pp@Bf^<Kj)<^.=hbZGS-@
%NM]W=GLMH3rn4q_3#AaM;=ba-TheqlO*5otB]YQkFrgT;1V]O:L@I]f_/4&9P!5^WL7ZiLOT"/@:s$D%.uH-0_p_k(RoO7ajLCF(
%:X7IN#fIQl$f1N4N*%"MDeYIW1]M^0k^8?sNn63c1P^s!q"$<9J;3I`fBTnMIkUf(hc+K*>q;%q]3P$6&5%.VO\]fe'ThZ$?.*`%
%I:W`RL71[UVYRH%(mrkVS`S_N)^4dhO\_1T%$rU<Oia8aegG0P7`ZbI\aJ7L]53Zl:#nA"Q^:T*>A0Pb#'P0>Gr^ooDaEO&;OqQh
%&Q<Qe.0R>`5K1%LcbQZ@E/3BV\8O6IZLUhIL<e;\_QTL(-Y&ulZb-%$A.WRV=4WH#CQn\V^"NXfC"#t2CHjap2:JnPBH!1]8W6+"
%onL]0j`7dE)2-9)_0@L1cq1>7VJ4qk51,4G<ikuk=;_FJf_`#&U-4K$JmM1991s\'>TCQL8D1VM0e+CRlP6Fda\h[cPWd[6Hcn<+
%mmD/Op8F2"D@K.#god(2[H#>HT9TEAd3/a2D_M,E^5M0<9?kV,Nc>9N4K"l@eiF[u[V<V/h;)kYEgs+0;A\"6,LW/tZC(oD#<AZ]
%956'Q=E8d5S6=*!he^$g;l/P_rGXUXc\E--o1_3Bfm9OlRU'X2eZDOtf?@O0$9>>@(XhANAWm"4*p0Kf]d)KJ=":IlZZL%a*r"7V
%fh%(-XX=6=QK$SF06Kf$[1Z3KDJ[<ubVD*ua#]h`hj#RS`iM:6DVUFPg5+nCEfKbYP>?>4hc@THR9fBSV,$p,7s"PZqE!XGNnJs2
%l(uX6DY5V&UrV$R/@3Ol,(k9tVC,I=ZaJ!=.>cmShX8q3i/nc:</eO6]j!8/<lPS$DNRDLkJQHOA8d5Wd1.VlK=A5Fh`k6bK<$oT
%ZVk:m7.tFS^F5Di]085\c0bg@b/_d0=ASPdXd*??O^BYClX()ba[`M+HJ)@!0#iI>:BTLWk"j_;.9C[?M8=W*i&YW!YlKY$Q?)Xi
%kh\M[djgBd]"aAW=?U#`RrCDb-.i0)a8MbqAtGUc91\==1nTd_0R$Io\'Z+O=H9_3mAmJ[]V_]:ID:)W38=J'Z[G0Upb9Ii]9qK.
%]p\^kj?['&,dR<PYi24c1LA/QCT@nh2*5\[2\a*m56/Z>c3;;XXQ7BLI$1L?X9\;i)ru^VnI'&/rDYR;>G)s,>>B#\2t"u><j,=3
%ft4.D2-'&if=]L%Dj2.cM![pjn/Oj@nJc.RPuifM`'GuqLDS;/)V##Sl!d3Lh-3WuRV@mu#B,oKZ'G/i<`t7Qf]4!fb_dNmTc51g
%i2jAFE9j7Fk-'I+pM5=i^*Y]-hZfXc[Hd^o+"6l\Y;ip0AbIW8h@8SIATWEo[s&9tm[)(_Z?a))Z7hhrs$eL<J=jRfXBb_!GrY&I
%gOi6Wp$Ot\dk+tL(XMJDo<A6"%K8%r52d.@fDW"mlJLbW>'rNZTK7Q$HB<0\3rc'QDp><Qm@4!l&%bJW3oq\\24Lr0qsj3bY4't0
%^\cj'Mtl\WpamP:oDJl'/qB8&Cg+?`Ri6c\:-bb$5W&uH@%ao0qqHUG^S"m(/jfh21f3OYd3pU<ZX3`W<lbKr"!8S3TEcbf.M)14
%g%6($@/1?.*S()2Z7l6<V54CRquZ:ns#t:"1!G:_E.>V>kmHmGEk*d@=c:X,<OTCJI;#!2e,!hRmS5,,Imn6!@4Ad"i>6="\gI22
%D4?u+aksdKW0V/G&&P\Jeb\>3CfkiPK]]3W&D&IqcqHmK<`JqK;Q3;o'2HD@<!Pp[TK14]>d\:FWhfkuNIJ*S>.n[L1nUoS1A%Y_
%-6-H8X-(a3M(!46=@U/)*#_[3m=`i>9ai0XVJ>F11(pJEVu]Oc&?!HHh5"t&;1pEA4$bBlojKb4HE0M%eIATIeIn2,fE"-$o/dku
%.+C]5*BY,S1knU"()IJJ=BF\mbt(s6:-T"W_63#M>.C9[2Ds`"_KKUB["Z#m->5Ch3YH]P&43c;\uFp2c;*$#6Hc/0<*Na:,*Hf4
%(?Q>U@9A8A9o&qCJ0)M-\q(k=2UREuCoRfl&YK]_=m34`HI0)`ZJ!/PR\g:B+A)qF:XU"lVe,q0e8<Z(PF<%@D#n]]oRnMPC'i]>
%N@,^$:/J4VZ_jH7!EIY`Q7t1?#"Q#5j0Eg`P38jD3`0"UV-'bp/C@YJ;:@iHiQf5coq#.lmRZ,!A>!ScKW[;e^I)A.\f+D!Q#LOI
%o/cZ'\?c[b[hCS1m8m6%GdMcn<bMsQ9$n9i)70jIMD,2m&WbQSP=h4.HTmnXd'4./JhRCiL',d3kSr698_h?\\k:_rUC+8[K>hL*
%^Rq)=[EXA^ca4f8M_iV20MG-B69"Zo@QI#uR:H,k$:<+4NofaRJe'a8&r37?8X6ed-Uq`<</H>JT7fp:!_+HdZn12=?A"scb8[et
%*SdKjL4#0*92)?F3#PG5Lm8Z!@#K[>cA9qV#n=g!/td9>phDiaDQ@fA6p;8_Otn.4Tq@"bBl6;HfTnkR`h!U&RiISB4r$?k[kqEI
%:<QZH/Kfj>%F+#aLjq8q#6c/&/9b-XAu6.gU-Y_7NS'M^U=-U^#CMAFWH=L.LpgaH%e`Y\XU@^,Q?$:Q.0YlHP&c77An!H'>9Ph$
%2^GF*g5_Um`RmMDNtP=cr.mde;Bh*;nL=sX(\"51$=3(!ZRs;33*k`0g8[a-XFT&]DN9Rm)8n9W*J5J;[@&(j/enssM5[UkfY7Gu
%-NkqUh9oEI=:$0,0q^l0=k!1L3`JBYd'RoC_D*l-"`90pYbc0blA.AV(!=UKaFZl@,=u48-0R<BVliZ.1c/+02X!I'P6`B7&0OsT
%)2T^u8!DYXA:u;HE28-r!H'$O,^Y(X=%ELna%B;U9;DjBoJUH"6HE1H;[B+MK$3lY=W<6gVH7W#>A@VEVMtp\-^N'%C>fb_Zj<eP
%dTH:c#dB%bM,bP=_NIVk"1E&lLMH$*Gn&2m.dbd;G\9E&f$gXuPOa;$`VC*=8p2?-TX)#VFGIq)PZCMIeM-bt8ai(CP#X7o/C$4+
%'l($,NLiL8-sLiBTE-m3G0slb!V3:--DBAFA/WhL@"#&WfQ(WC\$S=3%A@Pi<?-ojQ:aKB8s2FA.i+&R+;7GKJQqBoU%"c&:&->.
%9qd+ARohjCd^:-i"I,;!6;2%<)?ID]b)TX>fN7Ek'Uh.6,*YE'7^Ea#*&:(K7f5kJM"m7\`1h83UqfRKBgqY2;&4gOP<s"]Wa?AB
%Jb,#+Zrrc?SS:STaCB"K.KS'o.M'JFjCX7UCg0H@&6I6SYpCOL6PH#@#q[<nOa'rfO!tc.&P3X)+lO[e8%cX]6hI`Z6-!IKB1o*H
%TiY3-CMY[B.hcYT8H,P0n[kdB(,?U*-tcQ$(-6PAB-[IMW@<4tF<i>2S*UbU91Ze*9N!`Y`b8;J-NJ7I4KAR$JpnsO3nOn-NjqZI
%Vo<rq#0aHZ"jiF>%El>[&8s?g+`f'b9nbmrL!YtgFjLmf6FY/tpi/<s5^cgnlLU%aku=3=rFpcLf/1^![T$i,Thp1t8<lfHLWnH9
%H#=[)T1KTBfcZ"V/4Tf/(G7g5rg09VNAsYa<IGpZC<ThH1_ulfN;sfNFZomR?rNW`a?25S73ijBYWcHpe%%PNIsf%r`142e.=AoF
%^W]+IWgL]$-:shIo!9r.V>WuA2aaK"456SlFD=,U/&DNd9fc"SQ%![EeqWl,_=`FZ$[Yl^O/Lpc"GCb3`HpI,1_@K1!!>GF2/+&\
%i8o7JP\__LS=;WcC(S]'addX(C60@!eFW1/5lsW.de;Wu"&%3^Eupt=,Tj$041b2dLE.(fP<F;n6X^>!PRjDWU#ChG51Ks?fM%V\
%51N6F8R(N$Vke((MOEF%;QBAA@JfPn:><!qbF6JL":/[D$m.W[8n`dcJShlO:N[$f&ffiMVn.Km<SN:)5o>lhL5/RHXHW?c]C3Y8
%L'0N&&"ac9ThNEZHk=gNigQ/jO&63E,c"N#@8rFkB+*OV;(_!@2F2eNC0HWS=u2+POpS!WXZ;J8b*Z>IO&?;/Oe$-um(lX\ZSm/)
%;k.TQ*sJDk+&Fgc&>cim"f_d#)\NM6LK"^PFGq)M8<n-&4;-+u<-;X]3^UlB<-=QgBf(3.<@8Z-'XifM;?]]*E70/*<>T0WFD(\>
%;Unq2)*58u'aDuq'G%2.lsr*EOK)'[?PWL;$WV>(i/S>JlL]^G]gJe\e<T,#W]JXb`8ht9eVTh37Ebj6K;LJ-!2`!rb"\)(f)r#W
%$,0'T3M>Y.:7*2)qFFRpr8p:F!Y"/G8B5M#<QW]\OIfO%@$RT74j,DBTiK!`ra:?Qi%!D^1*"`V\o?38EN4u74hOBZSogS]\MLmU
%r@3]eq!b;W0MJj%GZ?-e?kJpHX#fK+`K@%S`N)$O7<.CW?+^M56_9?&O&u-jj[jcSQ/N0.Sd/@TB8W4-J<^8[F,2ro$5f_ongn(^
%$Bo,.5ktC1)I8Tc!EMGpBtC0lQ-kBO=S%%Xb;5r=H[qCJ/9.elqZ&-43`<o5Sd2>..ah7]&$SC<e%`I)YSnbijA;99JCPdE,G6Ar
%JCPcZafIKiXJQ1-VOI+<PtV7%PR,XTX9NBQ_)Q=i=UccgfW7*WWl)INprtLn%W(<!JEgTE6DdWocXBip-d=j;'XPY;(q/RZXCNu@
%\7-MblHgL`Zb);6.sIf%G`\1%&Wp*Lm0p<V!upTQGaK4?jLH*`cjK'*Cbks^Q/tJFXm1I<Yd=Y2>gUVK-TTib=s9Eap<QPc3,&l/
%&u,fif&'n:\>(g6iF,ar7UBY[m"*_`&DaggQ.Bk6,[14[b^/tMeCF@RJ6O.BgSVl@c0(1c)gO;`#>,kWOFXA=MhA5@Z$Cpg&u8uY
%LX_M:?sG"`F2694JlhT37AiU]$K3!U5R9\#+7b!('/fp1F2VV[.178Wf\*Q\5R>@PjCAmY=l;IKP).q]kWtY;<=BbmJn1'u=_'L.
%W9q)[F97?B,$\hr$u?q%SZnbfj>"]/B$-ZJL`EE[m,WrdNWK&Nla$VIL]bbnd8ig(Z`_?56k)euU`!SfN5Gsu[5'kM2!?m>M%9:]
%$`IfV`Sr5O*s"`]GgWa'1/7%G3Wu/o)^(;[+HfC91MHZsOF)XJ%rr7E+UVV%dThH58?iaQD&&0MdZ,5B4M1bW3;K5M9!nn/jB+J/
%5:IGF8Vor2Q:o)MJBJFG_b)cr9E<M1$LL>09nEKL^cCnH8bA9V9<tiA_R1_0$5!D<BFQqS7[BJKkK7dS!r$ea,]2VL.QB.,+7qC;
%HluoIG-\k>RjO\3;NW;r)!H8Z0d0Y)iW7[O"7??Lhdmtl%BN,^?NrKhT*#0_.#=r.gCtQj5Sh`IdLNUV6R`XSTQ(:`>Gao#GnPl!
%\g9<BLUeK-&Em^>Tf/DMP`DIF)4sF3)eT\>VSL@u;6U?.1!\i%<0A\gendmA_m\,QU]E@R:Fqs%1n#SD/-(lo:/$OiMFn!qi5iur
%nJ@R^r@HCFdOY\IG2`oK$#Yuf?lsJCSVI52AD)]b&:o:i)3Qke&F`qU8lW>!`5Y-Z9G9R>;i'aNW"4H/KO&]:q&H.uMdd:sFBbJ7
%ISM%8+k'2n:h1hC[@sSI8!o)glgTVtPQUHL*=,[VoGFYc8+np6j,,>-5TGSf%U4'CBRJ_=JQ[P9%"LH7!]@oCD&i\O_,I$ni>XRs
%OnFi[M3PIX]c,<6PCX_.9aJN<JgEl3K7$Ld8$X:8nANCbP$Sc2+c_H,._pIGjS17<+3+DWBo(W-![EsQ&YMF7T2can8Gm&ZE(EG$
%i?JiEE2ircdO#$7$e[A-]iq^tCe-i&Ri04V`;h:3iU[/M1Q[UmTZ$/4cKIn=rUeS]l#p`C7hIO'$#*AS(K3b;+G't.qXlFe=QJ;`
%['F*`]0lIe.W2I20oA/mhT<@X0pq7M#XAd':7^)FE[RY!i3t$oHpb2X;k!kC^aahKQ8DdNUZ2o6)^iuUK.0aqBJ^?MY\,57-6SgB
%7qZRHa*MnI^fSJ.^(W<X;"WPZdV<Th6T3fsHa%_6,GpQaG`J%_#R!)t*2gVSAtA9D-"%Tq0gFj<-T'em9c9I,8]MAu+jfJ88/GKO
%Z3%,,,#g<4.37P:jVAUmLa]6<F\X\$ThD"m._qF+`5S,N3E2*;Ed2&j#rjaDE9ZTp1b^DNWYDGDE.C-sA*Br9.%Z%-\KQD[eR;;!
%lt-&OSY;75[F"+d7-I`r4f:p$?ipb)q/e-75`KWaVh,A$+L"jA9>e&tSMoYR3<NT,Uo3`7iaf#n4f_s65"HYJB07_Uhr*cqD2]c?
%QeOYbA3jY>%/A)48^<?)Zak:^RRr=Q<cjtq,G[SJ's=jg5f+HeLhP!@WC]4r5*ons9u98>^?V4O"oohuW6_QR8RfXN\#Ef&EB\Q6
%B'.tr\`[@X#80^78C)"-,6520K[-K7!tu;d2]96;\>4p=;Ef&QVW\0a891YW#`%2X=$-2-O@;"R=[@:W$$9cdDMkE4((;jEa:!dc
%l5gb6!A'D*[:^?%JoFrc8<9]=?3q=(#7)m](aO2dbQqLud<n0c[%N2q[*0)[7K0;TXtE9DTZj7Uo$99)o`(0_MGLO`k/*E%6817,
%iJd\OV!$tBWKm7t[#f&)^k>-WYYbK?.3aYDd\^VNDJFjMbOKd%`1U;>,<TJ3O;t(O;&l5O,mMBI*$;K;$D+)B'@CCV*60K26r5!4
%XF`#U1r4#CMMkCm>(ou^GS6Dp"k;W*4+^iGc9kHKelrk%5I(@Afio5^l#A[L7H9P9;A4ls#m`DN^i@JQ:_=BuV,YAR[q(+qD3@1f
%C1Gs'hdEDh.qtfs\=&QqH);DoR9\M49p?qkJkRRj>_:I\CfV-&^q(*>[ubFG^a<b"Zmj'OTVM]&&6-UkgIgJ!>LL2.g2QOO+<P"-
%I?:3R;@Nq3<Y15<h%dQ`1Xo)LDp)R'$ndNjI6f<50]5)RQ6`(TI0F.d%E7:dn/![#+qm#b@H%[U!SiNfI2+"rpm;K+Ke4^#6.h$U
%-2,3@/Pt,VQO$EIPKc3-l"unH\851H4(N1AK5d%jR"tf'0#:,d<5M4?->-4F?4Y.hU,Wp=FGqNmVRfWA!=%%Q)>,+BOuO-+KmA`l
%"->sEP!e945Tfn`=[n\hJTWAoKB-3i)hOr!;O('I]I;]\K!a#9`j;I^"jG8CD8PNIQ:`Oj\03VYnd*3(m"2a/j9RQH2^T+L>1pk-
%fSBrPg:#5`E0KD1.aZ+B+)^(Y,coG&4Z]V`DpikjK^"<;fXYs$3O^22c&Mk,PRU-Ie#uFT_Q8au(XkX6bgp?hN_2A+Y@n<(C<KWZ
%39Wm9PZ1/:NZnQ2JBfrq:&HPOmZ'K_;3gk0D*h?dRKs0[?B_43mMVQ=5AS@485VFf,aN<u>Ltj*&_TPnO[L'616*W`V7TI5l&DV+
%(+;Pi$7QVs8,@fN$8f(@_i\i;_A*PoAY9`m,uuS+M=`$j1]T8'#T^G$MI[d6TL^8)UFq`gm"&@rj@uam-fj><&<,sK9Wiq-`%SR=
%=`h\9#GMt7+,68,7j96sL#V&\gXNlIgGT1&Yr.p[k#kM5JF'ka]V/!SV*^6Z4]a2e?VZRe\#r),9ZEo5UiTM\lE`%rP*.<#71QfT
%1/'\;N2b&+!23f@Po6AV^r+ZZb!3jFS;p9*:b,[]NEpH8)3PljA>goKi@qq'a<jo3d3$P36R9k]rQ5ek6E(o-'j9M2Xe*ZZ2'c%l
%e>+q!`V'itA)#O[0\\oPEdB!k@OJ\MBOP6KnH%lF.nD;nE_+a#L7T;hO<`;P7&SOl6:]Sq+u-[F@ks4U?.GssaKSL6n8273+HNNg
%4"JB1C7M"'aC:$Oja[D9MtcVH^nO/?@4Qc^/=_ON5^"1'j*2#fbe_8@'Ks8,.0orfSiIH^EiBd#dH*786Du6\&,DeRRT/&faR#Bo
%UFj`oS&4+g8-!+Q]N+\^Q4"^Nla&Jh]YS63;,B\/TTAlhTUNt&EM*Aq-(%I39155G-n?YW%3c&YIoko"R5i1p$F5%/2pr#[1KM:W
%9nZ?u!`N5?LGk[4i!c:#T/j&D,iB6RZiR\YP[J7[L:i-B@uKSRa`:kJiWZha!tMBO0[N)mfjZj?&L5=eUt[c4fkAj%LM^c.gIa/m
%J^MO\j#/kI)G7\6B$c(@#`p#\ch'"TO!N2M$G@cep,"i[&?ZrrBi:X,*IogFLi/Uur)C^+?]CsQiKd2eV*b`m+:Z<R*[*b=RrhTh
%<?j&u\_TsM%0IA*gHgHD1HUESRli[QDcj80CE_&T-CsAG"!PEQdl8,L+eP9Ab?Pn<*#LJH"6tP2FtD5S';.0YYld+",6"B?15k?=
%iF,9*_?L'E.`ZWVTp^aFha($>?&g/;(/TPg>fG0l%'\Z?iE6OgJ,t\#+f"$>G@Cpt^4Y<OkrOkO$jdpd_WI(?QKnQAJ.9f7@Q4iP
%!kg9EFt?[O`'B'H7`QS&O3G[k91Be$)<//h]kn%M>b'nHB&Y!r(fdZ!^jn!E1P%L[Ul[JJ3*@3][G=0EN3'\S@K\gWR*lh8[g)bi
%jWUO?b:/PCEBjXf7>@cC.#/:f>:d]o:p32VcJg8i6":7dIg@40R8=N$frcHI"?tA@EEtK&ZFC[0X@6!@BqlH!m%_K3._u3n&i20X
%28aS-,Zgl0B'Z<.3`6)1Hrha(6I&5ecNVQ'<Ws4gqG/^`Kn-,_R8XJ:,P"+!7@39G;lFX_^a7&4,Mmsu1s?=:@7q[VD033kUHpq,
%Q*C\Hcok*Z>U"4g1m+jR+El>4!'oSKn:@qR=VT9e,+p-_^hsrf3`dJdPD[/\,:sSV_"PX-3ZX;=Q+AIDLekZTH&Y't?dhEc?Ku#O
%+-%[WC[=/3Lei(dRgss$oq!H;MW'7L#%J"Z21;,0[i3,#7FY[&fnS6lo>L\Dgp2B1O>`D`L`1;:R6;c6U0.Q3'q2Yh(H'+C@B"2P
%*m/,X^lX`s:kFEQ8U'6a*>s!!3=<jG78C^=C\T_T7Wu<eHW=>0Y-PH&]N@O,V[Bc6\qd9n8!]>?"UQ#1!(F,k8gY%EZ]8Ndm&DfF
%J3$($:Ql?W.m4op2Ir1PdHHm]nF-c/pDA_p7!VSp\%,;g$A1Nm>o`utQluqMAr:)Q.S#>O**<t(G-G#dP[P'+3@THF4<]p^&-_b`
%&-?6n&+Bm@b0ir\8",nBT'([g&neen,@&/3aWjY&6Z,au>Yt^,L5]MZ/k-"]<!SKr74EuO/kM7H1if'rG"C=U3$Th^cl=Li&kg*]
%3)H6'M@fEF'ub&.)7Cc8`-1b0R*e0q#'?4WnI^PU*:H207b2SF2!>ei@FJ3_aHJr7C:MI&(>LYR0/J4F*QJ@W^eQ#`N\YNd3YaCX
%R8[s$.T01\)T$-r1q*=h@Kd>[PAqO9LC/LK8[sM,nVJ]I$@!&o<0IhZYTJpQ!>%SfQd*;W'fmauK6$#k,<(9C]O=>gXWco'j)?!'
%NOFDV&RcR*d88W&(:H>Nc'FaB+`c$Q*I\Kq(niY%L>cBQjR_ptGoS_GMN"5!WTlGq6:m3_OFRHAOU`KZ39m.:#Gpah4_4n2!VFIk
%K<,)]!2=Of5XWK3Q<"VpP4N@aFFnKBjN>OK9nuNaQH0.3p`(Mi0n_d7%pC`l_R@77'c&LDJp@l(OoRSf%bhQU'eDk@b`b2&F,oGu
%:=m0UJTW`4K+"lp+A!J;#Fp>l?m03.PT20W3[g/2YVOtpEX2A>k7r$:V'9Ks!gl>)%']hga+I)4Nfg=E2Siq3A4&NiBj+Yu;)6:d
%+i+<U9WkY,\3Xd@03O0+JiR'u8;7GI24gNc[HRgM\r'J6KZ2(&b/^T_Q9o[1'a9E_l)pbf!'h]oRa1b$!JEri_*GY#)H]C6FI.L0
%\0=Z,iEZ+5@Y0WA5PLU'>F)5ZB8_9MLR*U@`cR,jVQg?H41i3t0Yr^S]&tc$!EW90=,*dqYlH"ZdV+AE9Cj]m85V.>8[G?<.Z_(A
%#Eojd5RL5.,F>tdm39r=XbeJ?9WZ97D<bh[T>=>PXd;M:S$3B-1m+Cjl<m6/at9(HRLrO$6+1DAJL:L,#_6;SoUTI=P%["3`>C`d
%e"TNh:^ol$.TbgVj!h5IH\`#n4"BG&L+Kh`A[j[=i.LW7\1NH@:4O.5rDXLk:7_33mUmLt&Q#crgST#.h!N%:IoN$JG%9U[L+5uM
%K:AMSciM/q]F_0=\_.hFI66eA)tFhJa3&3$2/9Ap)Tif9eo<V`jo-(u#sYmfdg]F^NLDk^AV`Od.tB^V9@mLcJsnm\ghWl^-X0Rg
%+aC,/Ualmt=YKs8JO*=AaCc*n;Ig?h@Nl^GW5(8LE>?b4ithhSD"*j7690kJg-3FB3alBJM$oEef,#+=J?#(@0FY[*J=&<ClWt50
%.H+d*rdFht%Nd`(Dn2_XJ-J3*^f=A)@SA_DMY^6fCK^f0/Gdp5r%&1($l#<>cMDNO#CsZ#oUn0IZ4'6X3UV^ODOq!VRYg#nP7&g>
%?P<Zp<I#J#f+A<N%YZ;Z:BFWc(lH!<DR+-(%?$E$R674?bM[:Y5fkq>?l>k[Ymj.MdoIb;`O!(rW3E</>E@\fEcl2udD?/BDK/pu
%CJmmWV(sO_%,&d0A_]QkNE#tI!!VA`66'?*h-I93N4FC4_NbB:"nG)`HBS(6?jI]nUM67?UK4mSQ6QnVZGoa5SM*NcL,Ngc#N^DP
%#),K9PDuT]9RtPJ9unX^&"?.'o!Zo@aG:/t67,IS$;ot"ZWWEb7;rp?*A)aS5AEh9lKa9$[k0\QFoq22Ki9LlNe2,laIjoM7?6"=
%191DYT+Np\/.a\Z*G+RS#o22fQ>eHT2X7:N:KdrM$"2rlN\HD3(\XL*TujkbDM/bd<p$JCLUD5J1f`R-h9r0';dIC\:&MG)?UkiV
%'VTe\CbB]C>QZ-gA!?NW)&`=Y'[F++;%_:!PSM:AOUt7Glaj7R_4c(O/,:ao:`6]c,>B;Z"6sh=B,D30k)oa_dbXd&*-66Jq$<;V
%rD"nH([eVG/`O:ha^Mbp':pL#A?5;B;6-m)D?b[AS'(8M6RHgV`7E1FTp?\[k5sR8aD27+C+5\G^jRp\8O2J>X$\SiFAi:O7k\p9
%I*Dh1(*#ILZAARPN!D/.o<SRijI3pVN,3`,#@V)*%q!E%N64b]8)W/5BAVsQrH&<PE97Q(FkC\E'A64RX^d:7#<n8&q[a2GF/g*P
%R9>6Ukp7o4UhMfTL#^Vo0*ZhMY@(h/<O^74S@O>@-Zp:if:`,Q<S)(\nqt<nO+7G4<l)I)K7sYAc10GFpf<S/jF@qH7<eOh3Nh":
%67O'0oG:'XZ2&IcREbh<\.B)(Yn'2K.>7=D\BkhV)jZjS"PhZs!7#0`F*Q2r7I]f#TE][$@Rli!6n^s_9e\EWFSOYnG>^"]-<%Do
%9%RX_O)R+rj0j;b3Z$jl4<m?B\;;jeF++LbFY?V5&34WLh2XQ#i!bhjVm&2'aH!5V'rJ#_FCQ6WZ5C;sMA)rq9t2Qd0Z9WeNi^QM
%j7;9LR'K`Seq>ISLk;t8\.8j?2<E)"7trkd1(@[/hre^0JYZ\8MdsihWdAXn!lkrk^p`ZV>I"<$^k\/?($Eie17Dae-.Igp.LBcR
%\6E"3WB\;FI(;6LNlc:AWN)h^[5)9VAX^JO;WJc+n@3%(PA$9L9uY2=Pmb4SBG-WD6Bcre_[7F-<>`=5<MRsmA:P@7D,VdL;?#RH
%JEhk_>_6Zf+d1*tA`d-%ET&S^pEDgj"jhFH94^hq"/ZE>F6).pY)KT\6-sF+#Tbd4gcPP5XiZO0)jl:=OVJ@Xn#WQr*Z\q>P3cme
%Cr]N^&a9f-<`!PP2J]`O+Z>5N?#<A`*#(f88_7c3Aa*gX28d,^Lse4r5;XYWf_"AKa(`Un8und32Sc>[oAgD=KTH@XDA0ee&@]pL
%PbY#A$TGl2[\h0c#ekYA!acEBYXVG(\(4_RO]#_8*9XLF#s)289NB(dis`7/<M#)"b8j%)=-JeVahk]b/1'FF+DtcCL7'lfWJDZY
%Y)UD?O[D[5[q0^j$]"VZ1Mq8)^-i%LPCk25b]#1rLM$_6;T<pg=;AUrANbhinB2,3<E?-kU)ep9Yn@Pd0TWHu^s?aD[F6F_\ER"X
%KU@XtE"p@;j!!B"g+J9picVZ2,O6EG'GMgb3$#1WLI#(dj$OCnK*b)#HNB.6E+6sJc?7/&0GIU[]<>[opRo.3kb*%deL7S4#+M<d
%Kk1e67Y^>67(7=?N285o^c8<RCY8IT!U(LlU*=bE`AE1a,-K"F37;9J[s_,/UIi)C7>g#33\O0"@V@d)NmrdTN4G$:<m@E7<+d-m
%%$qcBAIi*G?1O+f47aJ8H/hOUn\#hCfb:j2ECC,Ag&T@,<R-I0#o7FgH34X_giBSannr='<ZWAN`X\3j$8o>UVG-Oe_=(LbHOG_4
%F-Pj]=Api8i!qFC&Q:5KO[@*3*A:,@q=:.,S%).e/n\1+AiA.ci;seM-<[&DKS[b0?BOEPM-V1]fog&>)e<t2Q)G(A<(F6c)hc/)
%c:l2*P/6/!j9\roK):U:[5b)^/BcQa/4U-2;6DGN%q#4Ph#bW[2ji9_gQ:k`6HgG4KcI?]B>6s%/ha\KHpO)>+K=BYpB<dkAL8]-
%'i)4!JORg6+[S2e>baPQ0ul#*_/+QHJroHhE6U*>$gH5'nrAPlG)q:HEGX2P"_q.Z3=U=XD]#,]9iKh."\k1H8qEe1`A_r8-l'pB
%j(bq\jG\/Cgd^kpH9`nYk2a7(Z%UB9+r#[PNrsaeZ5mF%K?_%<:$K/F=^3]_:CHt`Q!_`8)p@^'&;^2K$C@q6mMd5NP'Y')mc"[N
%no,27lFti$<M".;eMNh*)D9"%9N3.@TQjcqJi'nU;b6l+F_[A]Qk55:R/He-<;?#(Q7U=Hm^;F_:Efa)Arga%<-_>F+Q;M6X6:1k
%$RCZ*X[.!hGh\BjaML(B26XY3/n,RnU+<r[acMaf!Vp'/E1_m5_/2AN[bQ(-@@;!7)J9+0MrQ*&r:V#(Y7/=60OCV#M]WZMfqW#<
%Zc1FKbIJV*TbB_@7,XmG_S#sul-"2_kip*`gfFSsh'=.:LKWGTGW!!K9ID:."KdP6><1cg9e\if!XD'#^j4od2jst-67hRrJoRnA
%'KMoG!f8LnY2CLm%-QUA]IWSE1bn1PQoVGS&'/2Y`:X@8@UA&.(04th*I7)b4AWE+OW&d*$f?<9KNk%eR1[:"3f\L4=dpg/jRaLf
%d$t=t&G*lq8@YVJZt/HeEu;W[>H`l>\UZL:,.!<<HhERiHA7#1R5fre[j\327Vk75DnrTpae;*-qGfs@Ss,Ds5a5Ba:YjS^X1ND,
%fV^'e$-jB'"tcQ"M\+OS6)?[%/dW0k+XPMiN\&/c/NegKF'PmN$Uq.0aa6^O\Wf\s)VWb&#WODXJseonN2,I^[fML*RP()>SgYiP
%,&s]E8*&#E,7@X+K]EMii_'r*!_8sk:.r.C#Y2'YrJHTm2)[Q=6JmMM0a:]U3i6,$6jG)t1fQnM:#`.^(`7R%0b&?Un4LMdct6rG
%jIM]t]^04N_rg5<?8!f$A@[jM93SlZdFMSYTHtgi[)D]V3IengNu3k)E@)-qJ!:0lM[3%sSEdCF`F,d$<jiLN"g7FW>W+-s`([%$
%;VcG1WDr>pQbkpAQQIGV0&20Mr?*_OjYs1_.q6-d"i5+$iufO49gUmQ$r(j"bs`3/F_PS;FN[B]8?Z6=h[[M'"7i"3i((GE8L@e<
%2t7--P>PFUXs8OUGHC;E+LgqA<-MrfScm/8In0'RkSHktWJ4SsX%0cV!mqVr(ga=A1GVKB)i\"=\#4]<6nWWZ1;h1MbOa<-rngnc
%+uA40O^,Y>%M63dQ&[[=WqR7?8sIO,C^1JN89a(B)$e@$^?B-AT2e9C+I-QM+Q#PZ$/db/R3WslMlt(%A5RN8Ln@2-=eL]HfC;JE
%aU#Y&L<4#aMKKPZ*!%&$*(&uD<J%=q*kM@EMQj"&-Z01*3JNFA@4W\(^RDAC3T_\Ti*2NoXNH/=4$\\b<-?PX0[n-51+1NRQ5Zer
%mBf5Z;V:OTrNHr:V!BtID\?<HXakiu-5._KdE*Y_4F;En`<NM8:u5d@_3KPgTZYW6WhVj<p2+71+MS`KCTr8lhCN3bK,hfY=DJEj
%jc`0P@%n&l#Y3cg\fm?^i$G4)!h\i7V3FiqQcX4+%&Grt?+Ed'iWRWScC30(j[nYESQqGuPWRVF?mYSYD4tZl%EBZMq^\?JSX7F(
%KDMF\paub<9\(#HaEGBDbL!VZBR2s&qeC0e-*\sP/ZYW$N_*VgOEh5WC%0pK;/M1I\8[j>.R;j`b]*tJ4%0Rb8ZkG:k(hQ&GT'7P
%#d2J'Ha8!f%Lb6;ShZs!&(2OI5RAZQ_*SZ#QRJE_+;/Fn(k3KP6Y)6UWXMXsglE"d&*>(6JF.T;cnHo/Lmu?T=h0VB1%,bD\iHn=
%\2bm5'n]VVEE5N@3k1L^Ylm?'L?<P\oLolHX@uCU>0d%sn]@Y`Ih-->Pg;L;pldr=]^;c`9/48i:t3Y.A=N^jZ@JJAEoKU8,-qBE
%%k9(SU+Qnl.i1i)6F;B!)(T!].BA(eqn1<)S.)9s7]Qt^-6j=@SPR^;]+W8kH!%Vj199Z@.K:q>N]s!Y>R8)?%%]jr/i\WSlAK[6
%kH&.$`+15+A`&Ee>hDa-0@$nQHhOkUF/+YNNB1bBV[KKTGqC8uI78Ju!8)cjVNl0d(2RiPLM^r[X.,TXSLLsE^rnOI<UF&EiZ'bQ
%"eAf!d3n$Hf-%6N%D^*Hi2@G0bNOHaQbCIR@F+6MEFUt/@QY:G_eVVPcu[m5TgB&d[QUq9Wu1H#b^>Fi+0f2A,_"7:`hbcQ?\:Lq
%+1_H"f_k`[G2S4u'Qt:PJZbp'EU4uA_#*=j`s:i1LQ(+C1'atqq:</'6DGjb\tP\QTN@*b#qS^'iu5N@K.DN_FEfO4U('7Eo1#Xl
%6^ML2C6sP9Vn4Ai;_s"t<4r(,/4#nCKg]"8khKfP.P>J$@La8W^*m2B>'-<@"Ja@T);%p3TQ0XQG=;rOIBU[@^!Xs.9qu#M*?N67
%"mVGRkgAT-H]n(R?2DH8o5/]&&@[jd6;1Gn!A-Ud[%_;KNli"^U*+;m'"H7/;#A`r+cqt)do8AJZuR%<%S7At3"DFo:ANBuO/>#C
%=`Wadb_hm)X=F8/\gk8)o=*m:Z5>g=IM(dQ=+O@*LXaZ)j^K"PFqL.pZh<U*`M#JB1,)pT9ploDJqbrI+!b]gWgL'c/q<c\heKb\
%F`K>KKjn-4<N3t+-m!Tc>m3I0Uhf8eC:VOgR4>pSpRkT1\K@//^)hmD.1N@<,["L+FbC[X2AVj@6iO`'<rbAr-<@cp7/U.5N0X2h
%HM%h2<[s?V4bkAiM.A.SUT5cW_X"8r5'ojQgRc%t:L,<Bh)0.$387:kC>=N7mG('X0I3?^LGH3MJlP%h.&+1k%&k[c4T&$EL*X0h
%#bE[>8@R=6(OiI^<mF!&iVoL(j_tFNL2^1g2-e=[`4"?cTe&gk-AA[pX08dhCbcL556uYI7WAZ?C>bNkF*(d;@:kspp)u6kjriiV
%luM.gMQ)bBf.>s'.,ToKZl'[2]]bu/#@"c/)OCh)hGu?gHXF+pL?]]+aE3i`'@L]B:`_&&='`_'Kr&$bVUujRZ(tLY(#er6"g`T=
%NaGUR*Oa!!Yn%DDFstb1NPi*-<gfeB%).1Z;1AE0AmWf]Qga6aRX'mq%A^+.0Z]&t<7$*]%+U0Z.(*>JUG<0sb:PB4]@7:Jk%M?;
%9RINU':U7GVj<46*'#QekbU_\5ZG1_"iq*mTM!I4WPg&L3Q*I_Ae`ud3I9Kp<t-[AfCJ-h]GWu(AQ4U+m\2/eCTTIL;r"E%X&0.p
%Z[1r2]U!e*7,;X\"lhQeg<2#c'=mPe+-B4>I/aCYef&XoB>1cS/loIQL]ZWcBt*+BnR*-I)d@,55=_!OM)X2?@X?KYlUq(+]CWL<
%!CqRP8[>$,fZX'.+n<T["b/-Y*_V7mRWO8XMBEJ+Q/0*WL*e=c-qAe#%2f=,[>A0g*&[p'0-CKq<-l$1L,:kq8Pc!h-B7<"OOk4Q
%BiHA4Z/RH"!P.Ag\>HQO\^U'QG,dObFbP@;]Z+KiM%m5;=n8n.9!reFpctJ:IG.5%JlF:KIKD$i<TV2e(Yjqtb,'BXA$u#FonoME
%dW!1uJ[e^&e#4cNa'>e$#-SRZUTtl2=J$?3+\;bJXSDd@Vm\jG(%t4h2_[^[QE99f87]]lk.!T_Q;nt]f8=H\)ri<m5u;_ncSpsB
%BPF<!V:BFuW\nqC@UQD4l5&e<86`9uDaVPU7I)E:nU6#903kD]J71?fpXS53+ip%V["7<GB<G5#K?H1CBH0qJE=Cd:69Pj[KL!!s
%//3"f(Dr[uVOW2b?I%MG*\pRbC*)1/L>V=E5Nm[HZPRe'K7W,;S)snHY:A[AlOV\5S%q*F"9n++4B>g""7h:jmr?T]-/]GY)D:F4
%"m(f](n;iVP*QedAoStR`>q&#+AA$3FtQU(<d_:[\0'3e_Vh=LKq!e1K1K-[adk9hZ%G7NE4jXa0^pe(^5taISJ7dPSP<!j`#`XS
%S1n*k4U'k@j:k;j8EJq8Oeo&hBUVr!]Mu*OLSdh,q.:;5Cl28TBWBdsGUTLKbSQ2O<_a,h]_ue1H)LA,>:92F!0U;F&:phiRXKI`
%:REpFoRg4u2cTh3+<Z)T)V>pcPH0?AdbROB$TbI_Y")6o3X=r>;`FN":9kR`?:c4dV2@[H*I:]npPQF"hdRsIiT1cI[o9i)?DeWo
%POZV&2*%rU_jIK.e0]U&,lZ.2GFBDUQ^YAIELi9dblt$"9Uj=5U[03!UrdSNm\.nu@)@?"$+Xjf=41?QiHP2D>>im/lFHERpuCCn
%T8BU=J\tKoQ.&gqZ=L[UOT,ZWZ!r`%:^$To-*E_B6@H%=B@/<D6[fu"APa(@i!<cG,Vi9U-teKpm7=W3N-.05nuF8fk&;m\8q)(s
%dn;(=P(HC@GdGgRp"Rnb7H'2g9<8_rl_ui1Q)$3&\aF+2QG9NFd3;TQYqf!57lX[q*bpg</q5"F;@O;Zg3KeoO=/s-?RGR`&$qq,
%FI'#nYXa1m$_t.,"&#1X2s8*82[c1TX5?CMO[82rlX?hElPCp+.n!Ea0ZDE;3.c/u*c^-gY5YmS)cQb/<d5o:o>BRLh9!hdk>!f?
%K!S3VqGs<]TN*c?DD(_4>d5^]K2g+U3X.B4jQj!((J7nggAS.#:Y$E>"]39;Y4KA1La7%h&]FM"8P>E9CV<(d44r\qWHqQLB^#\6
%l`MadSJV$OjNcR&VFkthHosT:]G\q=eY/2-Fd$60e[_*ag1g?.f?uTc$X]N)+6AlkIR;X,Upa\1F!$0k'8o8od3j^^T_L<,HM+9g
%%er5.0I<VR6*#A*hhHl:g1<$>].4n(2_<$R,nV]iX``eRBdX0M_9M6P$U3.K?QZ'\]O/L4lOT\F.u8@[#=B!cMZQ;_0qE:o8O\G)
%+jB>*&f$hJi\/FfrmhHK=/^']hU?ZdMi6.1@k;pB?*G\Lf>ZsTFmmHl&e[N[Cpt4K%55efUZI9-0/m1E6P,.L]uYQMK>eeOO9$e4
%8UNG'6E8el&-d8K&SEuOHq9<#D47U'\j2+A#\/TXai++>mJW83EB(?DR)19@MjCLV$7\N?0Je3g7o?ARZ1RF?TXO-o2!+0cSuC5!
%,ZX5d$B0N"GdaQi^fOLQSuOOeYr`X0m@!B,$%?&GC'$2o@;Am835&E(_&M"bluuIL0cHLin[mLlWk-DLk*O6S<]qM!/k6?/*YBOI
%(SU7q9Mf3'WW;_YX:"E:6!pmGfL:K_Ref)KM-YPnl#a!^7GaC,H:,oT/%O!uje[8+OH\#VqSTYgbIWLm2<-g%3*`AlE5Z^]kd!l/
%74;0JGZ.Pq:ue;@e@WDs<=[/]<^o&*UKiYVVQ7.)$Wq^(:1\l(ZmCC*niNsTe/#ZjPos?c<ue!rW?k9lgQ9Hr&'l$LK8u7ul_>W5
%'ppH@n;u`aGiYUVAI/s^AGorDI%+U'P'[)o,oTO(*&5CN!fs`Z*"$4!kA$?e7B$^<C[1@b1`+s?>WD,VkCT=H(2%EF7i1RY;N+4[
%#T=[Of+;.>T^e7W5J+F<U'lYB5@XfCc7Zn%gC6,\G5&!;Vq<CJii*[5T=3e$+Xf"<!NBV@#gWn#I^5t9"R8EIK70:W`@`^sUr5^h
%%R(tlgTHFsM0eCriV\6&(NDTkJ7>:eplXKoZtf6VOeZ$gCAD:%">ngis&f($;6Kct'^BNZfrtAU"mF1ZWP`gHV2%fS0W'0aSUrRZ
%$fFp]\hKW`(_P#dHQPog`q2d:U&-D(1e?QA"<@r<"jE1lqmAI>4A3?j4N"?'k",]Ln8u`&RX4O_o0]Ak<4ToN7h-,6^)-QEFV>'a
%"eT849WJJK-K=YOUnFe@l-6H6aJG=s\f+f2q5\FFfO&0SpX22F12m70(:!^LA>s9XSSfD;Kbj]d)fk!XY"FUf8&e+8(&DnC^cgE6
%)Vt;npZMuL^XXM2cB7<=_asuhm@2ZR_eb!49>tglHBRbR<DJ<l#lp)[Nl0]VlY@M^F[=ssm<@.+;R2rE*aq!,a`<`\b0+uT_olbj
%%X43I$'dAb(qAL(Y.f1^c\m6qQK\U;cS27<IPFuG6)[0"<@5oUJf2tLB:tHr9."lA:P1++^<kEM-E2%rjK.cm6W5K^feC?9lBSne
%0AE!BgM48B"^K<7`0;8H4BY]U\u=lB_]Q<2ru8TG,W[TLR\aHfP=4'XYEph;Wc?G(4U@Wc(c$f_&=qch>;M7pP4hdo0FGRhe6=jB
%:SUmaK">,-_$mtpZ)GM_.A6pTO7"WVZTH;c>Urj]-1F7;UVi9%d\8i6LMp+SXni9L-[t4Rh*%EEflu<9[#*epl:84m8L5<"*Rf'Z
%AJbI24aj;C0>MbrARC^#F=eC`=%Pit4*[M%,8-W+2[YIUQDpJ0(O'pPFfrT@V]0Sppf-<$1Ms]_>gQ<bbq&>+g/0=.^EB2\/@?CK
%,o'%[g$&uUM%[BuJF54Z&?UHS,>5^^4,qGY;k`^0hM`,$L!/J.VB6k'"ESGD38E3`:p=_V38#kVCE>$6VG3OL]VFn,DB@6g@W?fh
%8&VZH%nFeoD7HL#*;uRgSQr(%iG.D,F^;m2h-'*TPa6_!nUCG)3&6p/g4EI:\nWR*(oL,Z0?ln>Ndp47go7L\LGecP>r.U=R@BHp
%0?jWZl)Z!IRL,)SR)`Jg60*ban`?U8:c""-#YuXf/(s^\QRS?DcO>WsmNS&A%NBh$,nmYk-q.cO,SRQ7:qNotA:h53Fnd,JJ7r0)
%s!T-+[!,?\pX2a>>R:D!RL-*arYW4YJpn(f%GsHe-M4ou&,*Yl;66iGoS$mD]doVd/XhN4QoZ:q0Z/:WG'.OH\61nfXdTPJbg(7?
%AqIc4Kl:]Q3($e9/XhNt`gAW"qmpBko;GCJ9/FD"%eHJKRUCSH>r>"`]Y)UN/>A!V?eH,fjRWXoi=J_f,`@6J&kt%u>eI5.i,@Xq
%KkeIpgOmr.dn-)gV[od6^50jH(=`Ou#Vk>:C*F>>aq_JtW?u:lir/&7RaCNI/F9BnI"WhSW[>"c3dV['KPH+`MFeIK23Cm7ZNqdT
%'/7leAmJCMT7hcf8m,<9(VaU4LkGBM/L+8L5DrNIUWkl/=O0bu()k>q?i0HT,6l[/f1e0RE)19r3XNX\;WCL;36s(p0"%Ft]aN."
%?7;^NNHVK2)DS4oU\9pea,7[YgT6C34As1IQ"hi'Aj.Tr*C"\?<&EYs",Z6+L*"djm[j1$3Q(`iDk\?a2qnJ=dns>2h_ofS(do,7
%-[LUj?H[G6j]?2<g#A;MXfuId\L$A1ISOPN6XAd@<aVkBU0;3H**4#BQH7Gu&_l3A&fn?WO)qQuMiIsj7;1q/0c(SZj`kOd*!Fo"
%(^L(<%S#*`\c@3Q7h`"Y75uIj..0?**)(KJ5iR)`7rhU2:Dm"t;TDHlK;k;a$+nV&3_*V);YJ1kk^mN:c8=CK@$Tp$Dn?'k7%*nO
%Z`D?!3-TB::."^fp6t:;jh>Zor69EAH?bcm7W*AY(5isg9Bm$>ZVWBF[$B??[7^c[h'^)YF&Pd*&-I.VcVi)shO=:[E"^(2SmCX?
%X[3r_TOPF3pTZJ7SHqJ^e"111?KBGHc[*S4rtg[:',438i)]e:.ESaliA=CiAQ'924QYV?em3)!St<7Om8ObE*)B_]dHsnWc[(S;
%XMToW2ll,J%On^Y1U\6$f?*F%EL(a!b%pkEeL)E4V371k]#b$K;PF,nh04d?Pu^!14).R'5m<I*q5]stA:q%S.$:LX@g0AY-QA;`
%;eZA3Ws>F]mcr,t5g*sOJlM6tE4`4BAC5.3(:,O1o\*\X.?s.aTZu4\lP-6E^1>YPdZb3PQYl-_7aqngqNugc[<JB5cDHXXLXMEZ
%W[tMC.r0/:iK.sK%1DO5:(Bk^fl`o4e'TrG37VS+8!RO5/BFNcbJ\rn22*(1YEmi.&4,.5jP=:H%85Jl4=JjdMHM^h^9$E/Y+f+k
%G,Sm;@XdPgA-BcBK9N*@4*%:iA=l^aTL:7M'r@"hWN=+9rP-ee`2@`L\pVsDPLLhK'$956mnukl2g`q"+kFP^9J-pC2WW4R51t&)
%NUXqLN@&JG-k(X<h6gdVWaV5"p\#p2EF&LEfmt.WT@N9%=L3Kj#l>;4]H1m*r/JH,G4nn@>^EO<<8668IU1Sp'nB)d/F5f"OI>rd
%@2Em]#2RJ6%b:lP[Oga[!U^UVQZ\s5WH@%@\qFE3?C,e&B_FKWbBep=FJdZqNq,o(#2dV8HAB$]oiTcoB.EX]Q?DJcd[Ih7F_^oB
%bYDKf3ZsZU%5,i8=Acg1Z)gUu5V:p-X@#sFF,ab%<fM.p>aBNADr`@^f(CMf4`sdIlT4Fggjiq<l\4hmeLZ)Rf;[c1<:sSMBb`#Y
%b[k3a[FhV7a26.!O>Fpm?0CagT6t"s$a"%%OYW8G0Fqk:hTIsAZV"ftF^7f3<mVoRH=^B[W3iYl1pp"=H]$FdrlMCb:^Oheoh*j$
%>q>MKfP?D2Ls*YA>JPUSKtW(sWB9HOf^#kOM12`]llm<^MS9jL;2PiD.'>'^T8@eFbKA,B$WGZ^ZLd(!m=*W?SOY8>G?NRdc$!3[
%$bJ)^$LR;9?#7-]IpCYW]JafYAS%3_V<FAfapum&/W&=742MMTIa44lall$&O^hs@n-.@Ar3`h'T7VrA=kP<)&\ZPrYh'jNoX1i'
%OpR,Nb<"O:PErb\MdSq]ITb5*S5R+I0C,G=JUCVO7A,`:l<Mp!o!p:KCK[i$W[Y,_]qU5P?=thTnCR,J,ON[#"5IWU/F/:U+Gs=*
%A\C[b-h!\4XLB*30?^[#jM&pjhoiUl[JTo/eVaLMnQOJZHqp]ZbGq.\'=de:Sn/&)3BC2`$=upNKt44I@IL%JP-M$"=RcsBkGjPa
%r1rTTZDrD[.fPI&h\5>MeG_Y4qX9i7s0Ne3dXE0fP&qSf(\I#14fC5B0MEHt88//nma%f)49"sLrhFB?n<8<fh.>cB1osIcEOGIu
%8Tc&(6L)qn$o8AmO[TWF9&iu5C,B"/^hS(u7]Fg:\1jS]Hcfb&"$/("72?nFNZX&$*Q:cF`8cb5#(!(iR\@;Q=MJ_e@oB6Cfp1a'
%_c6l*h=NA]i!ILN[J3s`(j@l<k.'Ld,[^]_^E):;K;q=+([/)!*YDB]\GD"SC0*GEX/uI&6s%USGrE5:=^l(]:=gebi@=V!/1[\!
%WVUQ%P.GcXMa:phF]sHt^K"6bC@,mlKE<UZrKNQ15`ecV)B5"*3\P_-lPmKsH:`.ml#9CaB(rUgf\t>25cG*EY;nGr;Y%u/RNG/t
%_7igLeXu_%XNQ>BTKWjsAjfDR"i4#"FM@m(Knrg0B[tXd]bG&\GO7O/m\gd7p#icg:A@NhU!BAcik5UW;0mR2-\^5*Q2n'T&V+^$
%Ero$=[,'*6UdMj).Xl/.m)<c!^h9JQ8noOYqa('J-1)C=)*,<?%ZFu,/l,r9Knr@EAX4$(9f.pX25'H%N6F:hFnhd3rrb"^S.8mg
%1!P0VB0!UO&e.in+.iPYRHZne<:t(Um2)rM\eL3^-cFQuhVh&J'#NA?-4q'*MM'd7>4meGm*p25)Gq_MQn8p^-s4:C_47/hH4-p:
%/58,[1_rfY:P.*b9!e6SXki*29U[7PYieTlJuhGpnBE*!:c)nS5up?cr9Xcq/;.2@B9^q'9);5-PZ=>bW4Hc+Kf^HSmL6D3J#Y<G
%o#8](j:u4!YF'\tJo$"JH7pG-lVrW2$F0)ZY?N$BH\g57&g-'M@en>_>+b6pMdYJ[[p[5.._'%s@r.G+"s<^\A#i:AT!`qM>*Nn6
%&#:(VgMo=FGm2p![Ti[s#dd=5,W\/N5g._W[R./_bMPo65N6M@\H@c93/\,L[Bs#*7:4V,2pcO[@GaM$T5g/IOX0c<B9>)fX#f8l
%5A]Mr``^fEU3OH4/F#>2bsn3LV3(sn7bS37NqiU2[&>^UD4H`S?IdB0>t^u1lCbuc=X,N]h1:c%Ud^oS`-k*Y/k*1p=/;re-6PsS
%jXga!*e@?`'_UorTWQpL*bbqfA74OLNBjPg!'/gbcuP-R_E@uQMP!p0aU#8:FAZ(d"^6<[>j2[().ne'_@^IT+A!(:$FC[O,&$V-
%Zs8/hjbU9HeddLGek#*Zp<^`JUs3Y$$F=b@g)hQin(@H-j?iS_jNdK+NY\*mq3#rkNZG(IpF'IYOC2DY;XtQWc-I):)9#"e<Fr:r
%re;]Yolc>sBU.#PmM7TLIk)*'Yecq@nXpdgDl5[PYo=TdTgQ+Y#to8K[,t)+?VVnE:Cc[)erEQ&:rkl!&9B;9,s)Zra6iho=&Wt2
%`*m2.lo!"MFQmNX.W'"8/c!DO9B'O24UZ^H.\Eg^1,;^LG+n/FhbaCf7Z,PcHWt@WQ)_u6j[)2)/]?%P:cfY2>qp%\GRQild1rF2
%01"U1X;lB._3r4B/KoFnmB`i:f.KB`Q!7PYgi[`?Mc(8,f&#ap$>WS?^#9JIV8+Ibjh&58^&G8.^kmfK5/.j[Yo?q1kSP[-S2H7?
%1rNK'@E)_G3K:!Vj/I!A0bVUA)]N;A--)GV[[K@O8r=Z6@L8q2/lO_4cq`G0lEK/?fN%CMbKTn>Tb5h8ic/_cg/aQ)c;EbK,:!`Q
%fGLTEj^cSi.Ri<=G5Y^GWjOhZW7I:VdCV#XlQ$V]g<64_4O:508O'c`WT6O?H9%Shh)5#FG@YY\A'NA2if'i0#@O<uTK!k?NjA^K
%=ksLi>NB7mk:I^Sh)^@Q6DZYK+At#OPmFQF_E^*>W%jaUT,Lu\SZui@LuK<,'@,:6DRT*eQXS/PWam1B-#_)pl>>$Z\(;PE</@T^
%DEq,]&I"6EXUhX"[q6mib^&+cgd9dL>u,/+cr6JY;.d;r>cbJI%BoPg7gtgKH)>S!)lBBeZm=iDEhef0;`:pdq0De4!HP'/`/`LN
%5:,XT$6(57$]J6L&b=%*O7/*HW[bU%!N;0]0cMMiWnQSPgPhVmd4-.>.i2dgpQ,jl1[d_ahXd6*[n5ck_A6L\@Z"!%8dg(ga(Tdl
%k\i+X8N:o56(\/pa=jpUOm9u"LCuf&@jJW/><TRG?OT@RlLl?tP=oQ5/en0<;H+/`A7>Zr.I6P<Ck"8hq7;?MV;.p#8)ASS_Amu)
%jV=8-RI&k7(1U7NIJ21fqfjHbR;!4[RC.>]ZJ`@4PpFK&)\g,cW$$\8E4E,IXZ9qZU.P_2KY(XDEHPcHhf[?+rida=RJpr4"PSt)
%@jIhA?5.uo(!S0-YIK3Xg9VDA@P\!M&[!W2R2hbkd5\c)Qf3)j=KSV!*L9MtasH*5(:IX6<DRFooT7s^VL[(*33[Ud28DkpQQP&(
%*"PFtSK4OgY[ZM?V8s.GQHS(>j@rLiL9P.&3p_VN+GS0UO"XgO@l:V^Q>0;TYd=lf2-Jgbnh/rKK,*4?NTurq)L9LBe3>V0V6<p!
%h_(1bG9g[u^0ug6*Q4->b4M4O^04?$-!\^/bRcLD$jDh`)sBuW0KnKCmdZ__^*I[LY]\(Wf:MA-knZ_0+8t&="-T:22q)2b[OV=5
%DV\T'maPG*?fD@OG')/:Ba,^#(:d)OaH*:*ak]o!0=;_-j,)8G`TIPa316?[&X)W6dL0YS[_tjU.#$^4)qCV?Z6G2JZc^\'BbJ'l
%H:mFR^Kg+Yqnt!K0E$0ZArH'0O70B(b4k:F;u8$-kJ*#^)I8N&\KP)Eg"+WS':W3J5Hh53SfZSKIReAo_pZ8MK(!YT?%4&!aIWkE
%l;)6.U&gXO'\NcW*Rh/M3Y5=>jh.tQ'k0#`h?4XQWt`jb"an&25pEn85BYTn4I?&kKem7P9tTt3%j$S[^60%e'!J]&kk4=1QM1Z[
%N4ErJ.JgEK&n_!m3U"eM.%8ATH<%1DAkp5Jr!:7in"]b[\EoY8<Pr'8P6l,cG"_Tu=ZfJbYosa[Y@jbr#?g;5B0_'9VNB$Kgnk[u
%"f^)**P#6,Ds[sc:Ig#S6sX=-]JhF*VL#;<QO8^:9UQqV=DrS9f%q>2!YZsXHClVA\F*!R-)O;k@2Q3.SiK?\FcU^aV^rNsG`(4J
%7s!J>0[rB?gml#7fd._YdI$[M:TQ4DIM^hJTKcYKnk<6W92[R>4iPTfe\6d'*D+2OVO[:pNfNDKJO:q6C@.eRh\Gr12?MHBTG:Nm
%@cRSG%9>s?_NahZY`>onli8!BFW$dU0N^qbnN$%^:[?@&YZ6;%g`52Dh>C/c5IJ"L^6e9R_HWA3aCfGXqe,WY_TqN+pWB/8/-RRa
%mMU+tVf0VAO[7a'o8F]4c_(Go8,J=<5m%UDM4,<(_nG'.k<";#TCdmn1[$2^M</;\d.]8`SuaC59eGgse(mQgDj^`C].m4I)g7@U
%$EYb!6Ubp3Srl@_C.ebo1PJ;%mq(^J6H^:uBC@9+[G2s@a%W0Ui*Q-+>uTr<7.`Ol'KU#FmYK@kBM>I"F=UHkB_5G9h`#RhT[e"b
%+#u0Jkn%I03HQ$Jgq(n)6SmlMF!H\DABI<1O;"HLQ>7Cu*EmOj*,0MY,?Cp^)VpKffM-$RUDmNJRO'bLDYMi=-B0kY`gb5%)/C;L
%-ma3F4S%^e>">ed*o1?-E;%MckKs\[d7.cjUB/s%Lj/"//WV5B,EHa,pr*bX2#`VGD`6$W$ob#!>12V1T'+`)Ug(;S>LR76/\1M>
%Jki(\+]B+p8Y`?_VW^mZH*iAK/d[J!>"*K)R@/=WQ"$pVY<3_(7eN0=*aOP6nB@Y-Od9)A/!$!1WSJ=Z*_hpS/RN*2h,5&h^[gU.
%VT;4;,EZk[MJPa>''Ua>^ZNG&82p0XDWiu6C&\$,X,r`@2q@<,NRPtES%Kfu#I:8U/Z%n(0iD^<hP0sM._X&^O\/PdmnPDsQ2]jX
%pMV_J??01IC&G"/H-B7Ara'lpUd8QC7ThN]=ZX+c0f!H6/b.e[9No_GP/4e/BpJc==8#%nW`5/54IS8OTA>r+bG+Jn,)t?Y3%diJ
%/K\)me8$DUo8KH)9Nl&9G5!#FF;r*a=!l1%mN$Y$-=*H6]uld8J+Ct`lQFS'2NLs<C!9i;[:uMd1,_soF/IAST'!%=YGlW+YL*5?
%V.BY2?Zf)>_4k`on4KNs!=1LAO\.u#ZdIr0V.I!`g@ZVUQJmL6RFYU]B[<qoUsd%9`>oab.Lce"c9Q.p?#+BN1K3NcJa8kS7k3=?
%26nmZP"N3sKJ1hKV%lP6Mi:URLWVbA).$3T88Mbl/ZCS:O=U8cQ2]iU`bR3_.c['mA*=K[KLRR','UZN9[BOCp,q1KYIQLDJ&;FG
%QPM%A8o;hLEC5gGnsrEh\G_L^@o1Rdaa5WLnMg;Foit\7Ho@j-F(n;j,L>\dF=hk7rleWYW_nRq+DW`<0jE8-2j7sGXLgoK:Sr\\
%PFp6k9J[dGEHW\X<W+5T9o>-K:8@[7/!n6c1YIk6jO3f)\foTpV*B6jr?\f><@>jDQ0*?a&A=mfI'tBLc;_BJDCeD$el8)^+%H5m
%Qd3[o?*>*UZoWip=78c.F(r:\jn5n>d^b:FQWuRI5Pm=)0%&ol8Yq?PccRe./hNQ_U]pm9/o<.Hg!e$==TZG@A)u'c9$n]/c)%,o
%g73!AdTRL[gdWd<<,u.?PtDEe<sh#fBou7u3ub0+iekF"el:AM[gY5c.a<+-Gtk)#JmH/oo4WCt*o4BFH*gifY?)eDj*^))l,^b\
%A]^]UCj<@UGr.]9@]M/-[#XJ#gR:Xu&fek[*aQb!<`s,^d]b*8./uo8(%BY?7e;4"iL=O<n&KP0=!#WK0QQ<<8+VBY[iTh%.'L[:
%IE85C)p9@4,gp_kiH(NG1ei,((48]LBrc=CpR4T^k&FLb4S!1"TAJ+.aeNnb%cNR@B,O+%]&qD4]WiRMkhd'Prh"[NQK0X<D1"kA
%#UomgYnPGGI0LEA=j>5RGU$8MAVI_%S,W>nMQfBD4999*0;5Y:3WY`X6YF3DmrO!YoSS*uEco9BpY!IaPMp.;gN7Y1OXjo4"-mXS
%lcCR-)ZpORo[>.]+]]M8%MW*5]3YG]fKZU<P'6^\;J0Q&Xf"KN<7GMO3C4()c(T"@0^aT9V>F?h&6Ya;(#l^K%f6M)<+)K,0_I2V
%:p+H_,q2V7Fa,+R?`T-8g$%IP/VGPD?3>/?E8T#*YbWf':C'2[@FPgJ1,M]e/d#555.d>7po!rfGeu\10SpO<ZF)R.;,.]bn.jq$
%SJ2VC]jb6W,36Ii*'RACn=2cs'>#Z3cQMuBftW#_9ts&eIm'dmq=gUQrR=?;<pudC00tVUKUa/l6*AbU8uYmRF/QP6IL!D*O8F_*
%=C@-NkH1mQ:21u`V6*%dd7Qo#`u=$sjOqXc%<=ZQp(-J_^]]AkZc4u9).g,$29(bMM'+j2*48=?,0qC0:-Iml[Ka8a8+kfca:HiE
%pVZ\%K0RV16:Af[VL-oHB05h<9s8'=+^u-C&`bsQn+GX74S!%rX+%\0Yj^B/mGu:M2g(a9L?/c@lujWLZ',flBF/h?N>\Oo;dl":
%Zi&*Uj2dX*#"0'ae5)ihM0@V4p25*-_\&L$U@%Z^H\Oi'F,.a8r1:/5og!dh;Pnc[C8V5s$MB_T1>th-CQn.9G2:]_U80!TK4X,^
%nCl2=>-ClFC#7GThZ.+DOeL:.<BSE]X66?XfCO(e47B?KlNi_sDn,l:ZGBKBFj(/p-N>;As'!iZgDskRSUOmGRVkH5goI!8OK<P&
%JRX[HbGUmMP^2$g+U&t@=)u2p/R6mug\,mjcb-851Qr@3etdQHm5:bGS!,d)l#-0[7$9hHFm98k4DYe>IPU/X]C8d&6^?U#9GB3?
%G=/ar%Wfhllu@%1bn@:Ud#<Y<>,KEm'm#7qV@9D?JVmErRsa@2,`[u/2qnY])2N-?FpWQ6X&#:1Pf0V(_8]u0k&-*OKN+VURGg]+
%DqcjZ8qhgL"b'Y?DX+M&KQ1/F7ZD-2QW75WPp=XT]h`72EL4A1VS-fO\33XHYVk:nB$B]0V5noJI7D$"X%,,RX'Yd"j217`YOao(
%]bmY\@O/(TlWO8d'jRf?p0U.%=8T.k^!881L-luE<&[Y6?+sbCBW0I?ZcOH2#6Q5]q?6&D&=lO'lKJM#1hgOL*!gRjDrC0hJ*6lg
%31msCL)hStqJhB6fkPhs0O'Vu8]iK5/j#S04e7c<E,[qGh0h4ZrIT9=\Jaq7k&%T^MBbBa6'Dh0p=q4:]bp%h"QbDS'm8_-7hpAL
%N)&AcBV=l,Np$[BGu>i5D:E,PWB#!#`rR/`WXP\\]PD7%?jDfE_7,Qan"uh`\s94?,qSPL:TT%mVsVTXcZVIdo@F4NI@kDh!`!r$
%*f[TKd,6;]3H>;?X]AKql2`>;S>\i)7@VHErGH-\IL*<(H\Y>WiTS1-2_Pdb8*jYoD+l(Pqhf3YUbZMf\bL=AER<"E`14N%XLNh4
%YoqE,"l4.H@c:)MH],lYNol]>W9-hae*:Q@H"HT[ZIq%'eho=4?qdCgJ%F\D8IrFe=6ZT9/_MZ`;2S?O$>9$N4&4QG>0ID@Vdc**
%FsEJN.o)1h.AU%aGC$a.9?31Nb11u;^N=Z#TLtLIj,Ah5$A3h.G5S_i\Hdj6HQ1iE>taignJ<5g50bdXr?cgg`\8M&k]?8^k(k!6
%>h$XXp5j5;2US:ZEUuICg6_SU^,pc%55Ug7pi#p0@/Zh/gbXbGBQiRZgU*2>XO)'H]R_/0l*Kj^9"E`!/j-4`"A?BqGb_^UM7-J]
%%2*W(44?3gUtl;n\;tQK]=P-Z>[M?r5Q-o-1V6GN&-iZGZ75QkCmqLRc5*Pm%7?(9WR%AHZ=<F3CUr5d71W[pL:"m,oUe0bS7lm"
%AZ%oKl1Q&kV6fCI6#lPlFmjn2SQ?Zgpnc@RX[l""k.'XP3Oq?JEhc@oWRZf;.mH=8;2ZanRiU*s-$3+i=$0gY=n@u\gB2;uc&-,,
%I.IW/`\ZMiZUkUW*JeX'fSTDP$2u:2R5gb&q;;#`aQ2:in6QO-9c@46`;3hc-C`(;\(5Y9.<U^5?dI6e_]qZ!k(l&'4;tonjpfeK
%^5&s.#TGK)r]I@#E"1NIgbo/No6-!-05i*MU4Q]khSZ#%)Z`n'p_:-K4%'h0$!]VbMDeTV#)sHnZ^`b&AT-il*^I<GG1Z#EF[Yj9
%lX@]W[sHBL6B^NF%/gT6aG(ZZ#70!HT.O`Vp[-3?$7'J*CR@52A%;ihBJ4oaCc%c.LQc!FmF1t*AF:k[S(Zl)B/hs?3W<_Fh.k-4
%=F;,q".h5^qV!OL!:GfLpI:]kI1FFXNH^u!'M']FKRf8!X*`U5>Fp^el_m$<I^"$O7l<,Od\J6K]/b2Fb"u<sZO#I(-F4]k65qAT
%X^3a0d#P'H)r*'6i8`-Fg0jBZ*M.H8\+OlJK<15.j@V2AoU,oIXu0cJ56dHMfl^MaV70-^QaBOr(L#d[p/R^Q/YHsVI8qWopAA1D
%^'_oeSP.O(cf>l@W'0Ia0o%FI6e4cV^18SSaSNgY9&5!R=^Mm[4F]ouA3jbtfobn-iIoDC8G^i]06N<88G\51YE]<OUlPugV]3a<
%S?GK.j*pGib#`*q?!eJAg6ij.*sj%):u4@aQ[I*pWpUtVdlkX5<r1'W:H%/5MjI[%X22`&YGiRPc/9i@9FlH(S*[j%4h@ZLV6hPr
%j+U.$1D;nsc"c)*9(ZeDH.JDGdE>ESgmR='36Ao79[D*\h&3MDc6HK1Buh4OR4G;:7]kjB.Md/`dFN20'ko=jcT6Ac&C%4'YKG%7
%W`\@bX'i61MEK7!&O0/^5j>GQm&;0LJKhb0W?N!1]214[7<L\TgX=:[e]US4rKSeJU/?-),u:>972Q&d1_DjT$rt0c&tsaYU;&%3
%<+\eX5N[do)/qE<1IS%e<j&W/U9r=m)r@/3AeB9J[cWBKlf(c*Ukge]3Q)jS).GpK@=+0"+lX9P?Z)RF,`#%iHuXU)I[Kn.UQ]$1
%%qSSo/B(f@_fVa&\ZKM"33PjLfq'2C=1\tIeAr)]J*r(r3q^u6F+*Y=B4dP#;7ar+]MNU`p=h_^P[SXu4`d,._Tk$niKY*hfb\nq
%opeiQ4nOCt7ejl6oQ.cF\d$YWA=tf^U^9<mCIV>2-!6-eQ_Y8?l?ZTH\E&lpeM]("9e!D0)3t+CUNFOs7JJa6KU<BGN]!F[qlmY<
%dn+b4WG0U(eKDnjn44n"$FEI=NA[&UUo*Rl9.l&]79&PA.VTR"Ed^J)0s*F0ku5nReV3G*o9r4M#uYL[dR`^B:,?*E)HkS?cq.VU
%On>3lo(c$)@1QYU42pn5Z=ml#jDguW7@`hIIE3Q$ke#X$FNGYF)9JeW/i/(>]7*Z4lU1Z=TRiOA3RUDseEF6ilqsq5-!qb"a2H1X
%^MkHZktk7:=EDNiLVM1tF\Fm!N63Yl9PSlp]b8@2<mCFpDbMocc`a\f"hC,sbcL>u0BMAGMATMb?"M8DfssO]YE=1[QT;$%4L7h+
%9l@Y^j2aEh9A/.OH"<ONamS2SI]E:-\a=2+$,+/C[o`-gpjR(*20)LW[mYD2W@./SI,%fcRH1A#F/4qCU3r*gDl0(^ecVd$Y?<5k
%m(R:;d$)b.\g@i[HHrKj+GU*<CXT1/.!pF)S;HN`MRt\+9JerAHgR8AAsoZ4C97di2CVCZ?MPr,qh^a8LNJaJ:r0LZfr!PGMT:%K
%WFh`'qiGQMOF-9oN(fE8As2.I1pN!Zanh98W\pSq;)?HrJ*?h^CRSDU84NKQ29hq*jCnqN82Jqd3HLa*VHQ$=fDeH!@=jub4OZuK
%BBi&LdnDM"kO5T2ZYCEGY;?pH>r3?;BdV*;K=8@gRIhq00:aE6KPtaPb*cicBi$1VGFAh0m?ZkM9J^)c5#_8\o1V^jgi[MZ1Y$b7
%].;%F1MJ?^*nlci%V(*7Sk35+9b0acadJ%PV'F=a,`qrR8G2^"Z,s28bq5;+A]lI<?$eE2/@W0(%3sO6kfU$eiI"`r^dH-rj1-1>
%N:lmD@%Z[U;:"5H3;"J&5n@\d"hP#!(i.7"&iR(d=fT<&'$EJ19"4Z\55PKW.\fua5(Bq<HId0"j6[<PZ_4=s60i[h%bgNFQOR(q
%FB,1NPf+$L5SO0c74LSd0>C_*-/3bp9ke&*;i5YmDb@hTK+kQ?jmr4VJN_tcL/_b`^IB/"g!WLIbiDfJ.#STrNQS%o5#T_Lk^EcB
%^I7RGUcC+:Y39#g-*`Y>j0N<)ire9)`mruU9o7qp]=Zd+pl?.S@6MdrBt%V>#3osdH$FtZ&q6B/g,;-7J9.F65g32Aj:%`E_E[iK
%C9$T&DAWq>nN<b)6*3W+i=^+s=d:k["-T5,ZWeH"@_/;=@_(^%i@3V]o_h4QVn7OcWm)r$ZE&WrD1UuqXWQhANmf.ebfQSPF"lC=
%0(/"Jqjm3JI!;4Ko*TUm,q`$onKVmATP3?$n'03*ZM*5b`$6/B2;@RuSQ+Z/%O]u3S\6CJg>a>gbI[EqM2VgrUnO'h8bCCSE4E"@
%X<N$G'`P+aD@6e1/:;i@2L^^"+sON2mV(@G6PNOX"&3/5DX2DcGE'tJk1*o^bL6e#Flr-as"FbcN[%@/M?3;Fej__?/Od*S7F%(&
%`Wl*oMZW*@O'J7m7WQfpj@Z]dFj[KWImnu#%Zef=.Xjns:2dZ<:Ud%\PC_kR3HgT:/7"_G;LaL%?[Jd?+-M+pV<!'T)BZ6`JoM@l
%nWM*jrP9Hq'*cKcZTmHE3cMX3E<Jg'KOMn6!A_n0Y;8FU$?GbWF*qN1,KXY\O#RLS1me<,'Z0gU,=8.#[52t:O_=e'Mq\jgMrYnS
%eNH<$I:1Kl7Yn/4p!a@b$'D/YlkZp\8Fb2`Re766?9qVV,=E_7d"SVGOr^j=pcV#C;Nd$n#a$=S99V;%,l+":L`%D5Ph_TB=aE#\
%2+Sq60upFeaTBWl1jXhsX;2YV-ja1ah0YPuOsZV6[eh:EAp/RC1"JUXa^YWa4]IT"X4Gs6-,t7_e(7uqH\\=-/Em57RFd(&K'4ka
%it<p--\uGG6q]C2iaMRpWP4`j6J$1UNhFJ37_D.9Um-?+N,>oFrg/G?2YLs7HcVFOUn4_6VTebM0\2?-/l_N5Lm[l!?+M"1R6.R3
%0+kOJC/gLTa\9)>V+45-2*5q4&JGbG*NtfcM>Y;HN]gdE2f"lJ&MET8[n(b#QAo3W.XC\pabEUZocmM33DffhNKkp7<UoJ(P0T5j
%K9'\;^1N%.$(&.,>jh%,_e#uggc_Cna11g8-Z;!EktpqIo,rE+V5.-DI/$Cl_.XJ`F9N!C1dp9!2`Ilp:$rRZ`<F,\Y3)%[e.c0!
%@&QV_K:7^IWu=mj_a=U_o,`Bs*?TVjJ>!Fi!js5Hjs%7?L9/N03c4hjY3)t$B=DRDRmqJ/W)L9*lN;ke0W+\4M+T#\]Ih%&g2A6,
%")']?T#jg"$t@"nV:saCbkg8mLb/`O?@SH^lkGC\o4tu6,`%55o\su'QhqFf;%am>-XcGk'/XZ'dk9B9]^d>&&-\5cPc98585":4
%<W:7d\Va#\R#9Pj?&U0(ZkgB)R;tPbIBnidD6qteFE>!mZ3<_>B[Yf0q)@\Zd5+Y51r"qUPY"M*p=Fg#"D'tg<P'QI(=^3[81)f6
%_maH^g^i]6'Yn2R5>P>>d#Gc@lD1?)m)^@QSF_n[hJqCV%PEUc0N6e@M-JAMiHhf1nIV74eb5#j.?0k#),Dl1KMqIT2,2OhEmS*N
%HHW52:UmtkKR-T/H3GB4p=s_$i4UB6hk)`,0#,BE7]+.Q519Qb'(B#]qU?(K^Uq@ik$*4_;I1+(/j+<2.I\).KGZ/YWK@j:YXScn
%,.F]B0tZ7^W27fdcin?bp%C;k^NF<C?r,F=;DE@DTYRQ8@HacCEc<N4\ktXXjS`TXphb<Pn`=-Wl/2L-?[qn7J,UgFnSeEthu:[2
%r-*Y]kC<IYJ,/b%rJ1FNBE+p+n?$0A$k6[*Gu[Mc4[L39g">mbaK'-j-#d-W?H!S.GVgUN<AOZAP7d=%1)FAYG`57X3?oS''f:r=
%!KRi)5cb!ICU&`Z)Xn:T?7HtVJB(KPKB%c4%##M5'(PT]eR_7hUM;(0H:C$)lG9X^(%D:RAK3iX?DV;sH)DtL<IOIp?Ik3ni)mFO
%1ZYgaeET+?*h1+Ol0&lOkcH#>c&?k^G?E,7BZL+3p\0PfEc5A.0g]/pdL#;8Au(VQ'%?e\UdMt).DsG-LNgRoFnpu<WZ[UOS-,uq
%)ql1mlL#_#1X&iZG*[?:j3bu7@7If-ShE)W;%D!bS-N@t%MLX@mX>>M8d1L"<j*W9)sQP&g,m<2h2k$9?%O'5&FmTg+NI1.l%ueP
%3BXUtK4p6aHuHkfQ5GC=<]#==ittX+aq<ZEFe5.oN>RGQH"Pqg@iUb'HAhM/G@l&hJ&ODDXMQG/0b.ZDpu<U=r=CN/:@7T?(Cbkd
%h;Z17C&@"!rDXY)[emR\39N(gKqr]M)>1u7:3ULn8I7*!P5g8[;==1Oek('b?l3I00re2=9:dWd2[8Y^['P@p-jpnj9Wc>6'odgd
%#L9IZ8bO<?m(Un1hO-q-ksL$*TN!6*[;q[3Uldh-meWY)?KQ=r:;UFe>dnp^fe@UNQf2%S)Y1\!)SgIk)XFia&bt#%H,dIQ)W!(,
%;QY"r+Y,`La"p=VmVY>Q_[fKF!l@C[7GBnN]b7F?a]ClaLSmE1O7L4(mEE6I6k>=ds7<,b*^r3oW+D'`Am,VbOQMC0R,:,0<M_j0
%"p$Z>'`NrhV=SekLcd[K<qhf'$UmJ'()`@d9p79tU8>+5Em&WG;hnjs<%-)b2?hEu,E-/$5<A5b%K/!:/=P:\e8R=(iudN%pE"Td
%f^2F51:0<mjZOGe7/4m]>t;`+II?5*mD[kJmTERr<<^5(4cNr.\d$7bk$*eQWqaLBT*jb`:5\-0C3*/a1PTFEK#^/qke0F2BkFN,
%lru,*ZI-@ad]i]NomANBe@Q5mYGu]7\F2/9J5j<m@/gp<:>*F'o.24\%=W\F?\=oqrj<bS"=5TYoLrtgLp8';+2Qdj@T4%I5"W<*
%Lch[)T(E*rk?\Zkc(hVh]6g5n(DCA(HPJCj$:tLlI27E%`@pO>i#Pl`<u".g]?Yj146.e>3*EZVP![s!cL#^e^h!5+H:((731*hX
%81eF%LC#!n:i(*S49pC5T2cdnP$3]iMlCm(^p4uCUX(`<7M?kpVpbH=g1C;</l561YFf1"-hkCN:J9bt(+OS%cf?#eL=g.b(1$Tn
%nI]KCV>/7Lcd/`7mr\@P6$IBEkPTYNaU0!8nYp;p#BW<Z3F`-(("@J@L(<o_M3N#`)0$P^kZKYBP'.^b!.97)KWZT$O`LhJi91#M
%6p_n)):k4:=4F=7&l:#],:qJZ@Oj7/n[I.0$R+q(]8AXnXFVD7l$]RSc*@C)WfAZ@V3&IP1[14e7"%!LGLk@dm7r21fZqDBV$k+Q
%#+O_bOQhg%I5QG`'5m\p]OP+:iS[M[5GTs+^9_;:^g([>(o,@8>`lEk](-J,^OA5WIYTKIpT&Ku:d<]9=$/sFqR&fO)=X*GW:h;"
%+]-E-cO\tIP&<?]9T@]Y7k(Ob(gQ1dY&(X=l7.k=dUl&%j(4GYDhNUYC_&mBF.JumME?BKeV*MmV5A'We^:HmdB7*"=mraOs*9[G
%M#o.@m1HXRHt5IL%]QOEYL.AZdJ)8_!%M8^8#Z+p<T.d$knPfVeYX5Z)1(kg109:8OXV8,]Gsf&4AD2*V(D/,!3FHb1[P-dM*L_H
%i*?S9ImdjhPbQXl%,\_NqS\UEaB*)2p2dA@ih+'5f[W>?<XodRRX6[22256Y>4,XQ5`f*Aa'/!*ZRbsQh^7[5mob"'^*'IXZuY<q
%BnLbdQGJP=fQX=1Xj@-g';nR$.>KmFasLuC]gl(bn"UH]%_Un$Xd1Ptq!f3WMc'K?VQ6Pp)]cl)]")(8U8.C\2U.$M9Ni1\Qo77_
%QO8*nC1N>>ASr[B^aG+U\",:RXVU8pa.Y\qLY;4P9asEPBorM%V>oCRn.P]AU%"/^M`[\O:[79Rfu)g\b?aIqkXXn?UuY3uPPOe2
%"+WL5T5CLM-OdOBb<iX9m^'I)>%s9R.1Y0e0BrIXNa"YB@2ib#7+M([^btSZF\sV'=IooQ9ij;?-"q$t?DCpDK82\FNT-'[HZ=Sl
%%dY*pf'!ONU;(KUi?o.n=K=_^kjM9&Wa/:WiBYp3=O(/NFf$d(_%Psl.p7Zs[1N*=<"Id]27qj6k&fAFE`9l+98.'c3,WY^BY@(;
%!%AnL2[UtMRl7m8_g'V&$u3G?0'X!A9sfkoQ`a9)fV;WTQ`AHX9s2Seq6H/BaD)D>MQi.,+UN"h)p#lQoR482U$</>1`h5s%D&Wf
%B]-\OC@g-(*3o2;,)bU0Ye"uce(C\"iAoAd`Oqme8%Q^YCL%Rppo[8b?S?5$&#ric"pJmj:lS4,W#C`[8."$Gc2[C>FIN,#/2=MQ
%[us,8ca.]:rqP"$mV@;:Xlu5SqTI:kT3*K`H9ZB5%SJZ^p8bdj,%9p4*\f[_;-&&(HhX$ge!.aV5rdNPQh&X9OG-<m2aJfSmI_n-
%WB07\(2W'^j&_pOr)2!B<HgO9G+(uHG;>.NT$:XuY.e?-UB7/::81^h1MJbd;h-m$=8^jMChu#a_\[H^:8<U7fcBb8S\!SU0FhMX
%^"(N6lrOu[.SeA%5i.%*=`lpckRsXJg'>E:<ARcHgUgc(E(#;#_"IH@$qRk!/VCu"ho(Xna7G7be8P;R[j0U]f=Sd:\Jr,FGj@m:
%I9i+8a*?%iT;k<!TF=Gf:-tc.T\uq36FKq6%EY/:U9/@^IVBERb=s-7'MSb=$1B[$BV-!u8T*t6\"GVEG!C%f1].e0>23BU)/<"a
%M;(28&%;]!7/E3br'ml^YZa$96gKUqD%bk7V]-PR-bA@TeskqTX$I<++PM842;"X>.ckVARL,d!qM]M,cP@gUI"WM,ZKQ-mA:"hG
%KP+D048i,\CHR7@N3;Me9h<a<RsrB@flkU2].#kNj/:cY(&ZfF^iRd!mo/mXBl:?u%tJMN4q^mC5#X[rb?`f+8rkq_q3fOI_H&bX
%.R$&"L(upE15t>.$m[^/0&iAS@pSKcK/IgbWk$6G<T?gMI+^"FBlR+U<GF\RoS"H*])"49Z7!BdG06(Oh?N2JRVkbnrAM6s:Wj`L
%_8C.9E<V]TH]$%2HjaJc\clb*bt#aq+8M6-Ab,B)+2Ebg;_5gm9%5Ae'VMQ32tc8/3`!)sCL$mN"GI$roe,rqfaXQl0[Yh+M4Cba
%]*:pL!bJ;_'`b"[3Wj,2,K6$1WJ@u1:"/YCK2;MqC$+#`F?,498<Se)`ogNJ>7)e6l@=f05;5sa8#u*I@1e>S=j:0%b+Q8E^9*-j
%L^3Bs\;JX"[HMG9WBamdUZ0:9\:X!mGSZ1r0m-"['o5/O4Y\G/_ZgoV%<Z-/HlMmZiapC!Fgrs8Y5h7Wbj$)&]dF._O/rH!?*_3V
%gdF#5g)qlG3"pX0^;)laGE5n"k$TH]l?&lRp<j8S;qt+B3Hsdr6>l3l]?ssjs&@eWk0#eNE,o3/INmPbK4e.cgbfOW@_6<"kCm"s
%/->g)Z$3OD;*GF-C@JBMljsX5gpo@%nef"7L;c`@6%96;jO+;i..`+":u&<:F'sQ\VH(\Yp_g_\O_-tW9,dma<X;kKTl5cIZ?e@=
%Xq(JAUV0Vg[!.ZPr_@?VM,ecocP_:m^67e9ATMo7"5I$9kTHOMk]%B!adm2%6IR;LMth&!%89V/HBgUFah<QjH,[DJ`h<0\q$K[c
%OT9'BDqZ!K6eKUkAb<X7jeK2@\q[I@i%2W)le@C_g\jWaDES)iDV9B5_XuZe1R\rr!SB^1BB.]tN_lGKkR.5.qGc-DL)s6*GCb;P
%..%k>Vts\81AAG!:$3d!S]9<(khVoJSRGY3LN'/2DeJ.6J)#HK?``<?8ZEFG@8'/ccrj4sm@C3?^+Q,&,gYbHYt<sGHr.J37":0N
%c++BIh)34L1YY8dX$QQ^D\C!!4sV.,eT3_C>d?86L9i0GRi6>([hEmtLDkL<84&M5Z`fjFmG]&LgC`peqTj$\mPB$e\'$+$A:ctL
%d49')N("I2g4<Sos/K^`fE?LX\?ZG(Q/5D=[4C:t>l._BojBi47KUXGpg1bE@2ShNjL;cfk*&e2gqa_$=j;JeFK"MU593.&Ft*P`
%J_d&QhLm7hk>WQ9CMI)ae!ka<[6_<-Ct1>;ooHC-DW0=H/$RX;Dn!=NQf59(KunL@e`BF0,Q;?FoSX6]Xgk.!`W]H?HGqmh"tqc%
%_id[i5mF`3NLR/6kT]3EKbhhaT(:_o=:FP419pS#dP&_%I1<R[7_6"Tj%e1ck'T`bUsl<D[[hjC@F)d`[8Y1Bj#5`!q@M=!aSYbu
%=Zq^BTj/Bc78LSfBg&%`79gtDS.4=;J!PLqQYFW4Deeu?'Sf08"SG4F^6$XPR1]j1WS]AsdH^nD>I8G%_u1;/*fB@7[nF=KJYp"5
%,sIYRiMUUqp(pC]RcpNQ8I=c)o-H`*2Os!"/26.hP*Ts*]"bFA7l[WH)s&9]0Y1S/D%Mt4"Z5X@7cBh1]j4"80Yt;[iTtSH&^h9b
%]s`@mLLMkqm(8F[IN.,,cDt#n0K\bVkGkWt%<]@n<qT'jrV#/dNj].)TjsF/Ji6,9GE8kF#SbgH_4nn<QZ21.^U1oIW=,ZqZNqk<
%T<:04O)TA2[_nq5DRW+'Ef&tlO2m@Kd@tDtI8Q.h=iTdYMDm8!128tQeKc:[!3c9s@5'??!6CQ%7eLe?C'ODR?([,D`U`J%3(G5o
%2[M]hh!e8Mhu_3b"([l[lF,d/3\EZUbg1NIN].:-;YAr_Hh[II]$iI$eqXOV.Q'?KGC0s`oG)'nAM;/k@q@Yec6KnDIGM=#W3(L!
%`&i-$PLjrb>:C[@;0sBih1%BqckNH"Y<b;q_O[osR!Gjm@I2r9S\DGc*=pmX]VIcQ9,5]GL53W[I=>66Uf$asfg8@Moilh0o]`_X
%F#-$HHZj]k<c+1F"/hbaZYaU8!.?jaAQm/EASL5rP5bFp;2+pB)aab//aCBdTh)ts#H4j!egeTWeTVE<<`Wq'^KNl*7Usml_'k@8
%4FXVF<LD_WM,Pqmlb.)-J3+QZ&%DC3l*N=*d3?k^):4k'Tr0-,Vkt^(=DmAMSD<3<*a1;e(6rR\"]8l4-@!_45l6%Of!EY;pH$<u
%0P@"`ePlEGeee)%%9rJco!Rq;\+.94Z.rN?["7-el4\i?qg;DcO1)N5&7OOSIPEoW[;.;BkPL9A?t'^27ASeT=PA,=HE.'\Mq8P/
%E9NaN)LP%LG#&r?C.TDoja3NRl2GfqcaII;7JZVf!uA=XX=?ff*N2?3YC2I0P=ACOM:A9MoX_5.gS#ll\F_sVCo_J7Ykea;D.@!L
%PVs%G<#J^D3jD,)mcFopo9P)RM.e+iC!lH\SWoU;0^Mg0];h>)(ndS%a<$u<AcF/6&\Vc[W[<WU&uF>iDB"j`U]EurN]mtAW<]b(
%g=UD'f+I)Lf)0@%p\Sa!6`qdmI+Tk@<$/>h%?=X0&^*Gq-VmTU]G2Rc(Fiaf+g>13X`cOq<QS%:5I>T'6:W7jRBe7;b<=c$930Y/
%.s$V#5$$d.pNepP_G$_5-ZjSmHb!iAn`bkCQu&mrZ.:]c&L1efVp1]Y-aXaIUsYQH7GCBk.IeS!`E-R'_t_rL)c(0MSPlqopoi;(
%$qT.2*tc?X^Vd_aHkqS2%o&8cWMFM_fX0gE;,;Kq#o?oE:Du)R3tippI@H),\/ZCCW$gq0#pL/?;aMu$0aI&J9;JG'fFo%EXmB`:
%Slf^ZN+p/#fV"(Nn:j)'&%]\:?r*#=:SMj4YU=b']W4N7igsQ.f;6peJ3>(6pkp2lB9>F;<Bbr),t5#="nRC@jF,(%4H#_,<-2@W
%:EX_D>Sb76%F4hR4>0<iL\A2-hO,KqT/+S2G\<3';t[*jG<X3@.;*S+1Ej2"!G`V>eBk<Yja]B0;aKdSFK3T&P9]>-3M63N92$A2
%_jh%DU49YHS-^hATtU+a3R]GO:&VGOS4FOZS+jo^Bj'FO9o)a(37+HR#Ue\t.%r:"B*-8h?MJ+Fk#otEhSd?)%W$'*PKS%jSDYa'
%j.pO$Rn4A[G=Pn"Zj@mLQ6C0[PL_;)\L4]);+42dJB`bTLgJ+0f@4d(_hL#dF3S*eRct5fY;`D:/@h=gYm.(njO#H1Y="bk%1-V&
%LaI%M=']J@RL+Rl(*G[-b_4O:^#ooF-FQ,8To/V11K.A3/7<'V@BDle$d5@)MR3ZtPfY(%eO9_+RF&+P,^fc_b_8;g#*,+i?kWOl
%@8,fRhN.R8`RHR&6Sq*QPeu6p6C?sKg*pXRMI7e,,ml7F!+m-2\-ZP`LKV78(OhbZ7G*W")ST2CJ?ZMUQ\ikEN6GVd-*lJ[$1/bc
%-'.iBqD:6Vad\C4cPsGhgAg!LMHhLn'hWj#E68&XQ%r_VALaD/?=6FZ^(l@]JQd([Fl,E6Q=s\8ZVAYA['M;;G<hJ*F0._]`"F`6
%&pR[e/<cGVpUT:K#]ZK\jST!Z-610kd+*\Ji`'H'ie/iPhic7-)m.&`8i@Rq=NSO_g"F:nPPWQB.\'>3[,,G!JP+b.0VX+sEf/\S
%Rg#["<$i+`9Z`Z4UC0]9=MTA98==55'IH;kD+c%e5a4C&-]LeA&B`MT"c,o.+Nedn6IR1u#\Cm3TRFa+@Gp!7=pI0XpOT.NFHTt_
%QR:XJ9kIQ'e.nFri-EI`-8LFiT%[&UJOqKX#f*YHPF,1s\tYA!Pp3_^"XS:M.eX<FP$=p=5\GV1grabfKHrA>_]a3JJ0ZH9Wcp^c
%7O0c,S;T64+INa<'gm`W87q5:AZIl^a@o72Ar(P[,P/J#]4=2PE>gYV5/Be[V6PDpA!($E^@u&GOdY@DpDIHNjP3L<D(?7@;/^$S
%",FgsTLa_q?q;nu,*N+_Ui1Pn@Km++`NHo6VoBjcA6_!PfHEdF`huc3JO%@Ad^dO$+>_Ml_d4kmR*c$T!ZCJPDN%;NEe'3RkaF6R
%"aeJF!+lK.R*"j)6(Q@I`:YYhbSTi;[>O:1#4RFGa:3cG_&[OA2$C@^NnHm7"(:2=ZRETabCV_u0Q[NlJfHL"of>,G7l[AC;&Xs0
%L;)bGd^S4qo&MruIgih!`kE=I'5h@$*3emh2KD[cM-SEI%'Gu#5TgLo6IpSY;=V7!2KJ?'k?f"+&[P.G9,=H<j[%I-I3FSQ.Z5-$
%c3QX8>qZt\0iOci;.)[-1N'Qpa9KeCII+;Z]Y5p>URK,i+0]45=d`?@+GLa/F0d2?_PkpCK3eRJXso5O"(/tO6k2*g?Hf4iR(^2\
%76Q\e5Y(3"(je$SqoaRCdZWs"ZTgd7[.naG5Cc1.cZKChkM>HFYs!G@@7A?DapV4n.bPb*m%>O<]ufs;'iW&k<+`WJV?kdVmB[%n
%Lk\3-2/bkp3k%Y""&IuRcXuN"i'd+\7Cdf>M9'[r2,#]dCQok5JgFkEU\4)8-0hE1N@'mgPDdLBO@1_V1MF`>kob@e'0K^AI.o'J
%:rK)+YY-JSLaW;*VYA"?+jEY6ZXASGp"PDNZ9X3Lrn+&ngcuFIi!F4t",PUs((nYqp`U-RQag*15*V&:'#f\Kb,JOuZPRkbMt`\\
%fHF9R#.c.'=H6^B>_,8DPA8Xd)RpptC=AOtCl"Qr5N785i]#QY,B-P5L7#e8K,,I`/8A'a5!ju4S(KP06WG"IhbMK\iU!2K*q5%'
%(?gg(.kbibf7!i(f[3%RnT&2j710LHC]KA6/ED8U$X0dO6Bq/D>bT#T`K#'BKd\7[D4W^1DX1.X?XZ8./@(/)+CWZaXd*L+KI-)L
%p:MNb,1s':*>p"OBuJC"&=+$EpMYQno2T]A-U&rf?\bof&#-9_C@smuM`Ph506".OL95=:^]lfGJ;Yp7L]C2<^]XiRG86H'#;0,!
%<+Xpj+:ZQt-5rgj;,`Lb*Fj\ar/7-C_?;<33KkMO+G.+4g=q,\Oi'V0>S08V,8LbSYe]$PiN)!iKlojh_\X:p<8gP)1_@Wc&s3J)
%(+%*T:m(S'0T%_#5G18IAi9A4Oha:QVpG,A"Ca!#[dq?;0phTWFi&Zn#kLpQSIH8EJQ!-<"pcX;GlmJe!>]fIh>?r1Vj4so'IF+,
%?f1T!8=D9KdK\^C6@am9DM(mj!L1#jF(YK'\odCf=8\*m"ZpP9IosrZ1%Y1G^jkVchtE-+h\34CL<&UV(r0k:-'8K8,)j1odMEH+
%)[E^:-O;-,#]j\a#`(@VSe^]1&<Kc42^\leYCn0+$OFfcWsmro+<W%]QI5>9!<K`+aWqZ6YQDk&7fEGiq=DL+k5YO*G*<sO#Zt_+
%[\A;X333"#pr2/P@_L>\!Sq'F!9sRdU/[<emK*GjU#];ToI\5(qml"Q.gRO`@*9.V_AhUj,>&@Q&CF`GNQ!OfTMDZJ0JU@8Q6G;L
%M#jW1Le9HR#,o_H8p1CCL__RU3s,URZDP>q0+b@f4,51b#6@\nWiOGI!WjY6k'jBS+QCj#l(]4@+;Qh_r<j;N2]7t-<YUYCi7\VS
%YY((.]MLj'R(^=A:d@&.m)PIuZC/O)8)\WAJ.0E0=@#3titC\]!J+7.1:mhod["LkB=tMN!`m9rrg=Z-XEV$C=>7O]b1HFk#"\<$
%o&IXgNt`S>#m!4/M;:UX(BfP.Wd25Z!lT0MoQFq6JEPe<U_a.>P%07-KE*0:b3jP+!70lsnc8e;pNC"0+[@FpZMBn"i$\<PDoD]j
%ML5:$o^DcLE_?0$VpE/Nr7h.9J+bi$jkDHgc`_f(D9p!>s7n>Jl;rK*RpZ0(^])c%rog!Qe_g>rJ,SZU0E:0Q\ADVOpZK<*r7,_7
%olpGrDh%AZ07W_'s7Upu_B4b%pu=U<Z[`"Ys6-*R?fV_ENW~>
%AI9_PrivateDataEnd
